{
    "id": 18106,
    "date": "2025-06-12T00:42:40",
    "date_gmt": "2025-06-12T00:42:40",
    "guid": {
        "rendered": "https://make.wordpress.org/cli/handbook/common-issues/"
    },
    "modified": "2025-07-01T13:09:37",
    "modified_gmt": "2025-07-01T13:09:37",
    "slug": "common-issues",
    "status": "publish",
    "type": "handbook",
    "link": "https://make.wordpress.org/cli/handbook/guides/common-issues/",
    "title": {
        "rendered": "Common Issues"
    },
    "content": {
        "rendered": "<h3>Error: Can\u2019t connect to the database</h3>\n<p>A few possibilities:</p>\n<p>a) you\u2019re using MAMP, but <span tabindex='0' class='glossary-item-container'>WP-CLI<span class='glossary-item-hidden-content'><span class='glossary-item-header'>WP-CLI</span> <span class='glossary-item-description'>WP-CLI is the Command Line Interface for WordPress, used to do administrative and development tasks in a programmatic way. The project page is <a href=\"http://wp-cli.org/\">http://wp-cli.org/</a> <a href=\"https://make.wordpress.org/cli/\">https://make.wordpress.org/cli/</a></span></span></span> is not using the MAMP <span tabindex='0' class='glossary-item-container'>PHP<span class='glossary-item-hidden-content'><span class='glossary-item-header'>PHP</span> <span class='glossary-item-description'>PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. <a href=\"https://www.php.net/manual/en/preface.php\">https://www.php.net/manual/en/preface.php</a>.</span></span></span> binary.</p>\n<p>You can check which PHP WP-CLI is using by running <code>wp --info</code>.</p>\n<p>If you need to specify an alternate PHP binary, see <a href=\"https://make.wordpress.org/cli/handbook/installing/#using-a-custom-php-binary\">using a custom PHP binary</a>.</p>\n<p>b) it\u2019s a WordPress <span tabindex='0' class='glossary-item-container'>multisite<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Multisite</span> <span class='glossary-item-description'>Multisite is a WordPress feature which allows users to create a network of sites on a single WordPress installation. Available since WordPress version 3.0, Multisite is a continuation of WPMU or WordPress Multiuser project. WordPress MultiUser project was discontinued and its features were included into WordPress core.<a href=\"https://codex.wordpress.org/Create_A_Network\">https://codex.wordpress.org/Create_A_Network</a>.</span></span></span> install.</p>\n<p>c) the database credentials in <code>wp-config.php</code> are actually incorrect.</p>\n<h3>Running <code>wp --info</code> produces <span tabindex='0' class='glossary-item-container'>HTML<span class='glossary-item-hidden-content'><span class='glossary-item-header'>HTML</span> <span class='glossary-item-description'>HTML is an acronym for Hyper Text Markup Language. It is a markup language that is used in the development of web pages and websites.</span></span></span> output</h3>\n<p>If you run <code>wp --info</code> on a server with Phar support disabled, you may see:</p>\n<pre><code>$ wp --info\nContent-type: text/html; charset=UTF-8\n</code></pre>\n<p>When using the WP-CLI Phar, you\u2019ll need to whitelist Phar support in your <code>php.ini</code>:</p>\n<pre><code>suhosin.executor.include.whitelist = phar\n</code></pre>\n<h3>PHP Fatal error: Cannot redeclare wp_unregister_GLOBALS()</h3>\n<p>If you get this fatal error running the <code>wp</code> command, you may have moved or edited <code>wp-config.php</code> beyond what wp-cli supports:</p>\n<pre><code>PHP Fatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /var/www/foo.com/wp-includes/load.php:18) in /var/www/foo.com/wp-includes/load.php on line 33\n</code></pre>\n<p>One of WP-CLI\u2019s requirements is that the line:</p>\n<pre><code class=\"language-php\">require_once(ABSPATH . 'wp-settings.php');\n</code></pre>\n<p>remains in the <code>wp-config.php</code> file, so if you\u2019ve modified or moved it, put it back there. It gets matched by a regex when WP-CLI runs.</p>\n<h3>PHP Fatal error: Call to undefined function <code>&lt;WordPress function&gt;</code></h3>\n<p>Before WP-CLI can load <code>wp-settings.php</code>, it needs to know all of the constants defined in <code>wp-config.php</code> (database connection details and so on). Because WP-CLI doesn\u2019t want WordPress to load yet when it\u2019s <a href=\"https://github.com/wp-cli/wp-cli/blob/main/php/wp-cli.php#L22\">pulling the constants</a> out of <code>wp-config.php</code>, <a href=\"https://github.com/wp-cli/wp-cli/blob/main/php/WP_CLI/Runner.php#L324\">it uses regex</a> to strip the <code>require_once(ABSPATH . 'wp-settings.php');</code> statement.</p>\n<p>If you\u2019ve modified your <code>wp-config.php</code> in a way that calls WordPress functions, PHP will fail out with a fatal error, as your <code>wp-config.php</code> is calling a WordPress function before WordPress has been loaded to define it.</p>\n<p>Example:</p>\n<pre><code class=\"language-Shell\">$ wp core check-update\nPHP Fatal error:  Call to undefined function add_filter() in phar:///usr/local/bin/wp/php/WP_CLI/Runner.php(952) : eval()'d code on line N\n</code></pre>\n<p>Modifying <code>wp-config.php</code> beyond constant definitions is not best practice. You should move any modifications to a <a href=\"https://codex.wordpress.org/Must_Use_Plugins\">WordPress mu-plugin</a>, which will retain the functionality of your modifications while allowing wp-cli to parse your wp-config.php without throwing a PHP error, as well as preventing other errors.</p>\n<p>See: <a href=\"https://github.com/wp-cli/wp-cli/issues/1631\">#1631</a></p>\n<h3>PHP Fatal error: Call to undefined function cli\\posix_isatty()</h3>\n<p>Please ensure you have the php-process extension installed. For example for Centos 6: <code>yum install php-process</code></p>\n<h3>PHP Fatal error: Allowed memory size of 999999 bytes exhausted (tried to allocate 99 bytes)</h3>\n<p>If you run into a PHP fatal error relating to memory when running <code>wp package install</code>, you\u2019re likely running out of memory.</p>\n<p>WP-CLI uses Composer under the hood to manage WP-CLI packages. However, Composer is a bit of a memory hog, so you\u2019ll need to increase your memory limit to accommodate it.</p>\n<p>Edit your <code>php.ini</code> as a permanent fix:</p>\n<pre><code class=\"language-bash\"># Find your php.ini for PHP-CLI\n$ php -i | grep php.ini\nConfiguration File (php.ini) Path =&gt; /usr/local/etc/php/7.0\nLoaded Configuration File =&gt; /usr/local/etc/php/7.0/php.ini\n# Increase memory_limit to 512M or greater\n$ vim /usr/local/etc/php/7.0/php.ini\nmemory_limit = 512M\n</code></pre>\n<p>Set <code>memory_limit</code> on the fly as a temporary fix:</p>\n<pre><code class=\"language-bash\">$ php -d memory_limit=512M \"$(which wp)\" package install &lt;package-name&gt;\n</code></pre>\n<p>If your PHP process is still running out of memory, try these steps:</p>\n<ol>\n<li>Restart PHP.</li>\n<li>Check for additional php.ini files:</li>\n</ol>\n<pre><code class=\"language-bash\">$ php -i | grep additional\nScan this dir for additional .ini files =&gt; /usr/local/etc/php/7.1/conf.d\n# Edit the additional file(s) and increase the memory_limit to 512M or greater\n$ vim /usr/local/etc/php/7.1/conf.d\nmemory_limit = 512M\n</code></pre>\n<h3>Error: YIKES! It looks like you\u2019re running this as root.</h3>\n<p>Running WP-CLI as root is extremely dangerous. When you execute WP-CLI as root, any code within your WordPress instance (including third-party plugins and themes you\u2019ve installed) will have full privileges to the entire server. This can enable malicious code within the WordPress instance to compromise the entire server.</p>\n<p>The WP-CLI project strongly discourages running WP-CLI as root.</p>\n<p>See also: <a href=\"https://github.com/wp-cli/wp-cli/pull/973#issuecomment-35842969\">#973</a></p>\n<h3>PHP notice: Undefined index on <code>$_SERVER</code> superglobal</h3>\n<p>The <code>$_SERVER</code> superglobal is an array typically populated by a web server with information such as headers, paths, and script locations. PHP <span tabindex='0' class='glossary-item-container'>CLI<span class='glossary-item-hidden-content'><span class='glossary-item-header'>CLI</span> <span class='glossary-item-description'>Command Line Interface. Terminal (Bash) in Mac, Command Prompt in Windows, or WP-CLI for WordPress.</span></span></span> doesn\u2019t populate this variable, nor does WP-CLI, because many of the variable details are meaningless at the command line.</p>\n<p>Before accessing a value on the <code>$_SERVER</code> superglobal, you should check if the key is set:</p>\n<pre><code>if ( isset( $_SERVER['HTTP_X_FORWARDED_PROTO'] ) &amp;&amp; 'https' === $_SERVER['HTTP_X_FORWARDED_PROTO'] ) {\n  $_SERVER['HTTPS']='on';\n}\n</code></pre>\n<p>When using <code>$_SERVER['HTTP_HOST']</code> in your <code>wp-config.php</code>, you\u2019ll need to set a default value in WP-CLI context:</p>\n<pre><code>if ( defined( 'WP_CLI' ) &amp;&amp; WP_CLI &amp;&amp; ! isset( $_SERVER['HTTP_HOST'] ) ) {\n    $_SERVER['HTTP_HOST'] = 'example.com';\n}\n</code></pre>\n<p>See also: <a href=\"https://github.com/wp-cli/wp-cli/issues/730\">#730</a></p>\n<h3>PHP notice: Use of undefined constant STDOUT</h3>\n<p>The <code>STDOUT</code> constant is defined by the PHP CLI. If you receive an error notice that <code>STDOUT</code> is missing, it\u2019s likely because you\u2019re not running WP-CLI by PHP CLI. Please review your server configuration accordingly.</p>\n<h3>PHP Parse error:  syntax error, unexpected \u2018?\u2019 in \u2026 /php/WP_CLI/Runner.php \u2026 eval()\u2019d code on line 1</h3>\n<p>If you get this error running the <code>wp</code> command, the most likely cause is a <a href=\"https://en.wikipedia.org/wiki/Byte_order_mark\">Unicode <code>BOM</code></a> at the start of your <code>wp-config.php</code>. This issue will be addressed in a future release of WP-CLI, but in the meantime you can solve the issue by running:</p>\n<pre><code>$ sed -i '1s/^\\xEF\\xBB\\xBF//' $(wp config path)\n</code></pre>\n<p>or by manually removing the <code>BOM</code> using your favorite editor.</p>\n<p>See also: <a href=\"https://github.com/wp-cli/search-replace-command/issues/71\">wp-cli/search-replace-command#71</a></p>\n<h3>Can\u2019t find wp-content directory / use of <code>$_SERVER['document_root']</code></h3>\n<p><code>$_SERVER['document_root']</code> is defined by the webserver based on the incoming web request. Because this type of context is unavailable to PHP CLI, <code>$_SERVER['document_root']</code> is unavailable to WP-CLI. Furthermore, WP-CLI can\u2019t safely mock <code>$_SERVER['document_root']</code> as it does with <code>$_SERVER['http_host']</code> and a few other <code>$_SERVER</code> values.</p>\n<p>If you\u2019re using <code>$_SERVER['document_root']</code> in your <code>wp-config.php</code> file, you should instead use <code>dirname( __FILE__ )</code> or similar.</p>\n<p>See also: <a href=\"https://github.com/wp-cli/wp-cli/issues/785\">#785</a></p>\n<h3>Conflict between global parameters and command arguments</h3>\n<p>All of the <a href=\"https://make.wordpress.org/cli/handbook/references/config/#global-parameters\">global parameters</a> (e.g. <code>--url=&lt;url&gt;</code>) may conflict with the arguments you\u2019d like to accept for your command. For instance, adding a RSS <span tabindex='0' class='glossary-item-container'>widget<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Widget</span> <span class='glossary-item-description'>A WordPress Widget is a small block that performs a specific function. You can add these widgets in sidebars also known as widget-ready areas on your web page. WordPress widgets were originally created to provide a simple and easy-to-use way of giving design and structure control of the WordPress theme to the user.</span></span></span> to a <span tabindex='0' class='glossary-item-container'>sidebar<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Sidebar</span> <span class='glossary-item-description'>A sidebar in WordPress is referred to a widget-ready area used by WordPress themes to display information that is not a part of the main content. It is not always a vertical column on the side. It can be a horizontal rectangle below or above the content area, footer, header, or any where in the theme.</span></span></span> will not populate the feed <span tabindex='0' class='glossary-item-container'>URL<span class='glossary-item-hidden-content'><span class='glossary-item-header'>URL</span> <span class='glossary-item-description'>A specific web address of a website or web page on the Internet, such as a website\u2019s URL www.wordpress.org</span></span></span> for that widget:</p>\n<pre><code>$ wp widget add rss sidebar-1 1 --url=\"http://www.smashingmagazine.com/feed/\" --items=3\nSuccess: Added widget to sidebar.\n</code></pre>\n<ul>\n<li>Expected result: widget has the feed URL set.</li>\n<li>Actual result: widget is added with the number of items set to 3, but with empty feed URL.</li>\n</ul>\n<p>Use the <code>WP_CLI_STRICT_ARGS_MODE</code> environment variable to tell WP-CLI to treat any arguments before the command as global, and after the command as local:</p>\n<pre><code>WP_CLI_STRICT_ARGS_MODE=1 wp --url=wp.dev/site2 widget add rss sidebar-1 1 --url=\"http://wp-cli.org/feed/\"\n</code></pre>\n<p>In this example, <code>--url=wp.dev/site2</code> is the global argument, setting WP-CLI to run against \u2018site2\u2019 on a WP multisite install. <code>--url=\"http://wp-cli.org/feed/\"</code> is the local argument, setting the <span tabindex='0' class='glossary-item-container'>RSS feed<span class='glossary-item-hidden-content'><span class='glossary-item-header'>RSS Feed</span> <span class='glossary-item-description'>RSS is an acronym for Real Simple Syndication which is a type of web feed which allows users to access updates to online content in a standardized, computer-readable format. This is the feed.</span></span></span> widget with the proper URL.</p>\n<p>See also: <a href=\"https://github.com/wp-cli/wp-cli/pull/3128\">#3128</a></p>\n<h3>Warning: Some code is trying to do a URL redirect</h3>\n<p>Most of the time, it\u2019s some <span tabindex='0' class='glossary-item-container'>plugin<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Plugin</span> <span class='glossary-item-description'>A plugin is a piece of software containing a group of functions that can be added to a WordPress website. They can extend functionality or add new features to your WordPress websites. WordPress plugins are written in the PHP programming language and integrate seamlessly with WordPress. These can be free in the WordPress.org Plugin Directory https://wordpress.org/plugins/ or can be cost-based plugin from a third-party</span></span></span> or theme code that disables wp-admin access to non-admins.</p>\n<p>Quick fix, other than disabling the protection, is to pass the user parameter: <code>--user=some_admin</code></p>\n<p>See also: <a href=\"https://github.com/wp-cli/wp-cli/issues/477\">#477</a></p>\n<h3>Cannot create a post with Latin characters in the title on Windows</h3>\n<p>Considering the following example:</p>\n<pre><code>wp post create --post_title=\"Per\u00edcias Cont\u00e1beis\"\n</code></pre>\n<p>Using UTF-8 in PHP arguments doesn\u2019t work on Windows for PHP &lt;= 7.0, however it will work for PHP &gt;= 7.1, as it was fixed as part of <a href=\"http://php.net/manual/en/migration71.windows-support.php\">Support for long and UTF-8 path</a>. A workaround for PHP &lt;= 7.0 is to use the <code>--prompt</code> option:</p>\n<pre><code>echo \"Per\u00edcias Cont\u00e1beis\" | wp post create --post_type=page --post_status=publish --prompt=post_title\n</code></pre>\n<p>See also: <a href=\"https://github.com/wp-cli/wp-cli/issues/4714\">#4714</a></p>\n<h3>The installation hangs</h3>\n<p>If the installation seems to hang forever while trying to clone the resources from <span tabindex='0' class='glossary-item-container'>GitHub<span class='glossary-item-hidden-content'><span class='glossary-item-header'>GitHub</span> <span class='glossary-item-description'>GitHub is a website that offers online implementation of git repositories that can easily be shared, copied and modified by other developers. Public repositories are free to host, private repositories require a paid subscription. GitHub introduced the concept of the \u2018pull request\u2019 where code changes done in branches by contributors can be reviewed and discussed before being merged be the repository owner.  <a href=\"https://github.com/\">https://github.com/</a></span></span></span>, please ensure that you are allowed to connect to Github using <span tabindex='0' class='glossary-item-container'>SSL<span class='glossary-item-hidden-content'><span class='glossary-item-header'>SSL</span> <span class='glossary-item-description'>Secure Socket Layer - Encryption from the server to the browser and back. Prevents prying eyes from seeing what you are sending between your browser and the server.</span></span></span> (port 443) and <span tabindex='0' class='glossary-item-container'>Git<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Git</span> <span class='glossary-item-description'>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. Most modern plugin and theme development is being done with this version control system. <a href=\"https://git-scm.com/\">https://git-scm.com/</a>.</span></span></span> (port 9418) for outbound connections.</p>\n<h3>W3 Total Cache Error: some files appear to be missing or out of place.</h3>\n<p>W3 Total Cache object caching can cause this problem. Disabling object caching and optionally removing <code>wp-content/object-cache.php</code> will allow WP-CLI to work again.</p>\n<p>See also: <a href=\"https://github.com/wp-cli/wp-cli/issues/587\">#587</a></p>\n<h3>The automated updater doesn\u2019t work for versions before 3.4</h3>\n<p>The <code>wp core update</code> command is designed to work for WordPress 3.4 and above. To be able to update an older website to latest WordPress, you could try one of the following alternatives:</p>\n<ol>\n<li><strong>Fully-automated:</strong> Run <code>wp core download --force</code> to download latest WordPress and replace it with your files (don\u2019t worry, <code>wp-config.php</code> will remain intact). Then, run <code>wp core update-db</code> to update the database. Since the procedure isn\u2019t ideal, run once again <code>wp core download --force</code> and the new version should be available.</li>\n<li><strong>Semi-automated:</strong> Run <code>wp core download --force</code> to download all files and replace them in your current installation, then navigate to <code>/wp-admin/</code> and run the database upgrade when prompted.</li>\n</ol>\n<h3>PHP Fatal error: Maximum function nesting level of \u2018#\u2019 reached, aborting!</h3>\n<p>You\u2019re encountering a limitation associated with <a href=\"https://xdebug.org/\">PHP Xdebug</a>. Here are a few solutions to the problem:</p>\n<ol>\n<li>Temporarily turn off Xdebug while executing the CLI command: <code>XDEBUG_MODE=off wp &lt;command&gt; ...</code></li>\n<li>Increase the value of <code>xdebug.max_nesting_level</code> in your <code>php.ini</code> file. You can learn more about it here \u2013 <a href=\"https://xdebug.org/docs/all_settings#max_nesting_level\"><code>xdebug.max-nesting-level</code></a></li>\n</ol>\n<p>If you\u2019re looking for a quick fix while still retaining debugging tools, you can change the <code>max_nesting_level</code> value to execute the command just once:</p>\n<p><code>php -d xdebug.max_nesting_level=512 wp &lt;command&gt; ...</code></p>\n<p>If you\u2019re not in the process of debugging code, it\u2019s advisable to completely disable Xdebug. For instructions on how to permanently switch off Xdebug, please refer to the documentation of your local environment or your hosting provider.</p>\n<p>You might experience similar issues with the alternate error message: <code>Error: Xdebug has detected a possible infinite loop, and aborted your script with a stack depth of '#' frames</code></p>\n<nav class='o2-post-footer-actions'><ul class='o2-post-footer-action-row'></ul><div class='o2-post-footer-action-likes'></div><ul class='o2-post-footer-action-row'></ul></nav>",
        "protected": false
    },
    "author": 368236,
    "featured_media": 0,
    "parent": 18370,
    "menu_order": 0,
    "template": "",
    "meta": {
        "jetpack_post_was_ever_published": false,
        "footnotes": ""
    },
    "class_list": [
        "post-18106",
        "handbook",
        "type-handbook",
        "status-publish",
        "hentry",
        "author-swissspidy"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18106",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook"
            }
        ],
        "about": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/types/handbook"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/users/368236"
            }
        ],
        "version-history": [
            {
                "count": 1,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18106/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 18359,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18106/revisions/18359"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18370"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/media?parent=18106"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}