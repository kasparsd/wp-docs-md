{
    "id": 18131,
    "date": "2025-06-12T00:42:41",
    "date_gmt": "2025-06-12T00:42:41",
    "guid": {
        "rendered": "https://make.wordpress.org/cli/handbook/installing/"
    },
    "modified": "2025-07-01T13:11:44",
    "modified_gmt": "2025-07-01T13:11:44",
    "slug": "installing",
    "status": "publish",
    "type": "handbook",
    "link": "https://make.wordpress.org/cli/handbook/guides/installing/",
    "title": {
        "rendered": "Installing"
    },
    "content": {
        "rendered": "<h2>Recommended installation</h2>\n<p>The recommended way to install <span tabindex='0' class='glossary-item-container'>WP-CLI<span class='glossary-item-hidden-content'><span class='glossary-item-header'>WP-CLI</span> <span class='glossary-item-description'>WP-CLI is the Command Line Interface for WordPress, used to do administrative and development tasks in a programmatic way. The project page is <a href=\"http://wp-cli.org/\">http://wp-cli.org/</a> <a href=\"https://make.wordpress.org/cli/\">https://make.wordpress.org/cli/</a></span></span></span> is by downloading the Phar build (archives similar to Java JAR files, <a href=\"http://php.net/manual/en/phar.using.intro.php\">see this article for more detail</a>), marking it executable, and placing it on your PATH.</p>\n<p>First, download <a href=\"https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\">wp-cli.phar</a> using <code>wget</code> or <code>curl</code>. For example:</p>\n<pre><code>curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n</code></pre>\n<p>Then, check if it works:</p>\n<pre><code>php wp-cli.phar --info\n</code></pre>\n<p>To be able to type just <code>wp</code>, instead of <code>php wp-cli.phar</code>, you need to make the file executable and move it to somewhere in your PATH. For example:</p>\n<pre><code>chmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n</code></pre>\n<p>Now try running <code>wp --info</code>. If WP-CLI is installed successfully, you\u2019ll see output like this:</p>\n<pre><code>OS:  Linux 4.10.0-42-generic #46~16.04.1-Ubuntu SMP Mon Dec 4 15:57:59 UTC 2017 x86_64\nShell:   /usr/bin/zsh\nPHP binary:    /usr/bin/php\nPHP version:     7.1.12-1+ubuntu16.04.1+deb.sury.org+1\nphp.ini used:   /etc/php/7.1/cli/php.ini\nMySQL binary:\nMySQL version:\nSQL modes:\nWP-CLI root dir:        /home/wp-cli/.wp-cli\nWP-CLI packages dir:    /home/wp-cli/.wp-cli/packages/\nWP-CLI global config:   /home/wp-cli/.wp-cli/config.yml\nWP-CLI project config:\nWP-CLI version: 1.5.0\n</code></pre>\n<p>Voila! You\u2019re now an official WP-CLI user.</p>\n<p>Wondering what to do next? Check out the <a href=\"https://make.wordpress.org/cli/handbook/quick-start/\">quick start guide</a> for a short introduction and some example usage.</p>\n<h3>Updating WP-CLI</h3>\n<p>If you have installed WP-CLI using the recommended Phar method, you can update it at any time by running <code>wp cli update</code> (although if WP-CLI is owned by root, that may be <code>sudo wp cli update</code>). If you installed WP-CLI using the Composer or <span tabindex='0' class='glossary-item-container'>Git<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Git</span> <span class='glossary-item-description'>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. Most modern plugin and theme development is being done with this version control system. <a href=\"https://git-scm.com/\">https://git-scm.com/</a>.</span></span></span>-based installations, see the specific instructions for updating associated with each method below.</p>\n<p>When you run <code>wp cli update</code>, you\u2019ll be prompted to confirm that you wish to update with a message similar to the following:</p>\n<pre><code>You have version 0.21.1. Would you like to update to 0.23.1? [y/n]\n</code></pre>\n<p>After you accept, you should see a success message:</p>\n<pre><code>Success: Updated WP-CLI to 0.23.1\n</code></pre>\n<p>If you\u2019re already running the latest version of WP-CLI, you\u2019ll see this message:</p>\n<pre><code>WP-CLI is at the latest version.\n</code></pre>\n<p>Want to live life on the edge? Run <code>wp cli update --nightly</code> to use the latest nightly build of WP-CLI. The nightly build is more or less stable enough for you to use in your local environment, and always includes the latest and greatest.</p>\n<p>For more information about <code>wp cli update</code>, including flags and options that can be used, read the full <a href=\"https://wp-cli.org/commands/cli/update/\">docs page on the update command</a>.</p>\n<h3>Tab completions</h3>\n<h4>Bash &amp; Z-Shell</h4>\n<p>WP-CLI also comes with a tab completion script for <em>Bash</em> and <em>Z-Shell</em>. Just download <a href=\"https://github.com/wp-cli/wp-cli/raw/main/utils/wp-completion.bash\">wp-completion.bash</a> and source it from <code>~/.bash_profile</code>:</p>\n<pre><code>source /FULL/PATH/TO/wp-completion.bash\n</code></pre>\n<p>To have this change take effect in your currently active shell, run <code>source ~/.bash_profile</code> afterwards.</p>\n<h4>Oh My Zsh</h4>\n<p>If you\u2019re using the <em>Oh My Zsh</em> framework, you can enable the <a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/wp-cli\">built-in <code>wp-cli</code> plugin</a>, by adding it to the <code>plugins=(wp-cli git [...])</code> line in your <code>~/.zshrc</code> file.</p>\n<p>Note: the Oh My Zsh <span tabindex='0' class='glossary-item-container'>plugin<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Plugin</span> <span class='glossary-item-description'>A plugin is a piece of software containing a group of functions that can be added to a WordPress website. They can extend functionality or add new features to your WordPress websites. WordPress plugins are written in the PHP programming language and integrate seamlessly with WordPress. These can be free in the WordPress.org Plugin Directory https://wordpress.org/plugins/ or can be cost-based plugin from a third-party</span></span></span> comes with the bash completion script included, so it\u2019s unnecessary to have both.</p>\n<p>To have this change take effect in your currently active shell, run <code>source ~/.zshrc</code> afterwards.</p>\n<h4>Fish</h4>\n<p>If you\u2019re using the <em>Fish</em> shell, you can download <a href=\"https://github.com/wp-cli/wp-cli/raw/main/utils/wp.fish\">wp.fish</a> and move it to <code>~/.config/fish/completions/wp.fish</code>.<br>\nAfterwards just type <code>wp</code> and press <code>TAB</code>, and fish will automatically source <code>wp.fish</code>.</p>\n<h3>Dash/Alfred workflow</h3>\n<p>If you\u2019re using <em>Dash</em> and <em>Alfred</em>, you can add a custom Alfred workflow to look up WP-CLI command information.</p>\n<h4>Setup</h4>\n<p>Open Dash and download the <a href=\"https://github.com/wp-cli/dash-docset-generator\">WP-CLI docset</a>:<br>\nDash \u203a Preferences \u203a Downloads \u203a User Contributions \u203a Search for WP-CLI</p>\n<p>Still in Dash, activate the Alfred integration:<br>\nDash \u203a Preferences \u203a Integration \u203a Alfred</p>\n<h4>Usage</h4>\n<p>Open Alfred and try searching for a specific command. For example, this gives you an overview of the <code>plugin</code> command and its subcommands: <code>wp-cli plugin</code></p>\n<h2>Alternative installation methods</h2>\n<h3>Installing via Git</h3>\n<p>If you intend to work on WP-CLI itself, see the <a href=\"https://make.wordpress.org/cli/handbook/pull-requests/#setting-up\">Setting up</a> section in <a href=\"https://make.wordpress.org/cli/handbook/pull-requests/\">Pull Requests</a>.</p>\n<h3>Installing nightly via Phar</h3>\n<p>The \u201cnightly\u201d is the bleeding-edge version of WP-CLI, built straight from the <a href=\"https://github.com/wp-cli/wp-cli/commits/main\">main branch</a>.</p>\n<p>Just follow the normal <a href=\"/#install\">installation instructions</a>, except change the <span tabindex='0' class='glossary-item-container'>URL<span class='glossary-item-hidden-content'><span class='glossary-item-header'>URL</span> <span class='glossary-item-description'>A specific web address of a website or web page on the Internet, such as a website\u2019s URL www.wordpress.org</span></span></span> to the phar file:</p>\n<p><a href=\"https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar\">https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar</a></p>\n<h3>Installing via Composer</h3>\n<p><strong>As part of a project</strong></p>\n<p>Add the following line to your project\u2019s <code>composer.json</code> file:</p>\n<pre><code>\"require\" : {\n    \"wp-cli/wp-cli-bundle\": \"*\"\n}\n</code></pre>\n<p>To add any additional suggested packages seen in the <code>wp-cli-bundle</code> package, such as <code>psy/psysh</code>, run:</p>\n<pre><code>composer require --dev $(composer suggests --by-package | awk '/wp-cli\\/wp-cli-bundle/' RS= | grep -o -P '(?&lt;=- ).*(?=:)')\n</code></pre>\n<p>Optionally (if run on a server or for e.g. in a virtual machine locally) you can automate setting up the command and making it available in the users path. Let\u2019s assume <em>Composer</em> installed into <code>/var/www/vendor</code> (you can get the composer <code>vendor-dir</code> config variable specific to your machine via <code>composer config --list | grep \"\\[vendor-dir\\]\"</code>), we can add the following <code>scripts</code>/commands to the <code>composer.json</code> file. The second and third line set up <a href=\"https://github.com/wp-cli/wp-cli/blob/main/utils/wp-completion.bash\">bash completion</a> so we don\u2019t have to remember every single command:</p>\n<pre><code>\"scripts\" : {\n    \"post-install-cmd\" : [\n        \"[[ -f /usr/bin/wp ]] || sudo ln -s /var/www/vendor/wp-cli/wp-cli/bin/wp /usr/bin/wp\",\n        \"source /var/www/vendor/wp-cli/wp-cli/utils/wp-completion.bash\",\n    \"[[ -f ~/.bash_profile ]] || touch ~/.bash_profile\",\n        \"source ~/.bash_profile\"\n    ]\n}\n</code></pre>\n<p>Above script assumes that your current shell is <code>bash</code>, which might not be the case for all users. Example for a vagrant box (added to the <code>scripts</code>-<span tabindex='0' class='glossary-item-container'>block<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Block</span> <span class='glossary-item-description'>Block is the abstract term used to describe units of markup that, composed together, form the content or layout of a webpage using the WordPress editor. The idea combines concepts of what in the past may have achieved with shortcodes, custom HTML, and embed discovery into a single consistent API and user experience.</span></span></span>):</p>\n<pre><code>cat /etc/passwd | grep $(whoami)\nvagrant:x:1000:1000::/home/vagrant:/bin/bash\n</code></pre>\n<p>In case you got <code>bash</code> available and installed for your OS, you can switch dynamically:</p>\n<pre><code>\"scripts\" : {\n    \"post-update-cmd\" : [\n        \"/bin/bash -c \\\"[[ -f /usr/local/bin/wp ]] || sudo ln -s /var/www/vendor/wp-cli/wp-cli/bin/wp /usr/bin/wp\\\"\",\n        \"/bin/bash -c \\\"source /var/www/vendor/wp-cli/wp-cli/utils/wp-completion.bash\\\"\",\n    \"/bin/bash -c \\\"[[ -f ~/.bash_profile ]] || touch ~/.bash_profile\\\"\",\n        \"/bin/bash -c \\\"source ~/.bash_profile\\\"\"\n    ]\n}\n</code></pre>\n<p><strong>As a project</strong></p>\n<p>Needs <code>php</code> and <code>composer</code> (or <code>php composer.phar</code>) set up as console commands.</p>\n<pre><code>composer create-project wp-cli/wp-cli-bundle --prefer-source\n</code></pre>\n<p>Then run <code>wp-cli-bundle/vendor/wp-cli/wp-cli/bin/wp</code> or add <code>wp-cli-bundle/vendor/wp-cli/wp-cli/bin</code> folder to <code>PATH</code> for global <code>wp</code> command (on Windows, use <code>wp-cli/bin/wp.bat</code> instead).</p>\n<p>To update, you\u2019ll need to:</p>\n<pre><code>cd wp-cli-bundle\ngit pull origin main\ncomposer install\n</code></pre>\n<p><strong>Global require</strong></p>\n<p>If you prefer to have <span tabindex='0' class='glossary-item-container'>PHP<span class='glossary-item-hidden-content'><span class='glossary-item-header'>PHP</span> <span class='glossary-item-description'>PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. <a href=\"https://www.php.net/manual/en/preface.php\">https://www.php.net/manual/en/preface.php</a>.</span></span></span> tools installed globally via Composer and have something like <code>~/.composer/vendor/bin</code> in your PATH (or <code>C:\\Users\\you\\AppData\\Roaming\\Composer\\vendor\\bin</code> on Windows), you can just run:</p>\n<pre><code>composer global require wp-cli/wp-cli-bundle\n</code></pre>\n<p>To update everything globally, run <code>composer global update</code>.</p>\n<p><strong>Installing a specific version</strong></p>\n<p>If you want to install a specific version of WP-CLI then append the version numbers behind the packages</p>\n<pre><code>composer create-project wp-cli/wp-cli-bundle:2.1.0 --no-dev\n</code></pre>\n<p>The version must be in a <a href=\"https://getcomposer.org/doc/04-schema.md#version\">format</a> that Composer can understand and can be found on <a href=\"https://packagist.org/packages/wp-cli/wp-cli\">packagist.org</a>.</p>\n<p><strong>Installing bleeding-edge</strong></p>\n<p>If you want to install bleeding-edge then use <code>dev-main</code>:</p>\n<pre><code>composer create-project wp-cli/wp-cli-bundle:dev-main --no-dev\n</code></pre>\n<h4>Installing globally as a project</h4>\n<p>You can specify a custom install path for WP-CLI, like so:</p>\n<pre><code>composer create-project wp-cli/wp-cli-bundle /usr/share/wp-cli --no-dev\n</code></pre>\n<p>Then, just symlink the binary:</p>\n<pre><code>sudo ln -s /usr/share/wp-cli-bundle/vendor/wp-cli/wp-cli/bin /usr/bin/wp\n</code></pre>\n<h3>Installing via Homebrew</h3>\n<pre><code>brew install wp-cli\n</code></pre>\n<p>Here\u2019s the <a href=\"https://github.com/Homebrew/homebrew-core/blob/master/Formula/w/wp-cli.rb\">formula</a>.</p>\n<h3>Installing via Docker</h3>\n<p>The Docker community maintains <a href=\"https://hub.docker.com/_/wordpress/\">WordPress and WP-CLI images</a>.</p>\n<p>To include the WP-CLI image in your own project:</p>\n<pre><code>image: wordpress:cli\n</code></pre>\n<h3>Installing on Windows</h3>\n<p>Install via <a href=\"#installing-via-composer\">composer as described above</a> or use the following method.</p>\n<p>Make sure you have php installed and <a href=\"http://php.net/manual/en/faq.installation.php#faq.installation.addtopath\">in your path</a> so you can execute it globally.</p>\n<p>Download <a href=\"https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\">wp-cli.phar</a> manually and save it to a folder, for example <code>c:\\wp-cli</code></p>\n<p>Create a file named <code>wp.bat</code> in <code>c:\\wp-cli</code> with the following contents:</p>\n<pre><code>@ECHO OFF\nphp \"c:/wp-cli/wp-cli.phar\" %*\n</code></pre>\n<p>Add <code>c:\\wp-cli</code> to your path:</p>\n<pre><code>setx path \"%path%;c:\\wp-cli\"\n</code></pre>\n<p>You can now use WP-CLI from anywhere in Windows command line.</p>\n<h3>Installing via .deb package</h3>\n<p>On Debian or Ubuntu, just download and open one of the .deb packages: <a href=\"https://github.com/wp-cli/builds/tree/gh-pages/deb\">https://github.com/wp-cli/builds/tree/gh-pages/deb</a></p>\n<h3>Installing on Fedora 30+</h3>\n<pre><code>su -c 'dnf install wp-cli'\n</code></pre>\n<h3>Installing on CentOS</h3>\n<pre><code>su -c 'yum install wp-cli'\n</code></pre>\n<h3>Using a custom PHP binary</h3>\n<p>In some cases, like for MAMP installs, you might not want to use the default PHP binary.</p>\n<p>To use the latest PHP version provided by MAMP, you\u2019ll need to modify your <code>PATH</code> environment variable with the following added to your <code>~/.bash_profile</code> or <code>~/.zsh_profile</code>:</p>\n<pre><code>PHP_VERSION=$(ls /Applications/MAMP/bin/php/ | sort -n | tail -1)\nexport PATH=/Applications/MAMP/bin/php/${PHP_VERSION}/bin:$PATH\n</code></pre>\n<p>To use a specific PHP version provided by MAMP, you\u2019ll need to determine the path to the PHP version\u2019s executable, and modify your <code>PATH</code> environment variable with the following added to your <code>~/.bash_profile</code> or <code>~/.zsh_profile</code>:</p>\n<pre><code>export PATH=/Applications/MAMP/bin/php/php5.5.26/bin:$PATH\n</code></pre>\n<p>Note there\u2019s no assignment of the <code>PHP_VERSION</code> variable in this case, because we aren\u2019t dynamically looking up the latest PHP version.</p>\n<p>Once you have added that and saved the file, reload the file with:</p>\n<pre><code>source ~/.bash_profile\n</code></pre>\n<p>After you\u2019ve done that, run <code>wp --info</code> to make sure the change has been applied correctly.</p>\n<p>For Composer and Git-based WP-CLI installation, you can alternatively set the <code>WP_CLI_PHP</code> environment variable, if you don\u2019t want to modify <code>PATH</code> for some reason.</p>\n<h3>Installing on MediaTemple</h3>\n<p>See <a href=\"http://razorfrog.com/installing-wp-cli-on-mediatemple-grid-server/\">http://razorfrog.com/installing-wp-cli-on-mediatemple-grid-server/</a></p>\n<nav class='o2-post-footer-actions'><ul class='o2-post-footer-action-row'></ul><div class='o2-post-footer-action-likes'></div><ul class='o2-post-footer-action-row'></ul></nav>",
        "protected": false
    },
    "author": 368236,
    "featured_media": 0,
    "parent": 18370,
    "menu_order": 0,
    "template": "",
    "meta": {
        "jetpack_post_was_ever_published": false,
        "footnotes": ""
    },
    "class_list": [
        "post-18131",
        "handbook",
        "type-handbook",
        "status-publish",
        "hentry",
        "author-swissspidy"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18131",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook"
            }
        ],
        "about": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/types/handbook"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/users/368236"
            }
        ],
        "version-history": [
            {
                "count": 1,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18131/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 18334,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18131/revisions/18334"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18370"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/media?parent=18131"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}