{
    "id": 18107,
    "date": "2025-06-12T00:42:40",
    "date_gmt": "2025-06-12T00:42:40",
    "guid": {
        "rendered": "https://make.wordpress.org/cli/handbook/config/"
    },
    "modified": "2025-07-01T13:06:41",
    "modified_gmt": "2025-07-01T13:06:41",
    "slug": "config",
    "status": "publish",
    "type": "handbook",
    "link": "https://make.wordpress.org/cli/handbook/references/config/",
    "title": {
        "rendered": "Config"
    },
    "content": {
        "rendered": "<p><span tabindex='0' class='glossary-item-container'>WP-CLI<span class='glossary-item-hidden-content'><span class='glossary-item-header'>WP-CLI</span> <span class='glossary-item-description'>WP-CLI is the Command Line Interface for WordPress, used to do administrative and development tasks in a programmatic way. The project page is <a href=\"http://wp-cli.org/\">http://wp-cli.org/</a> <a href=\"https://make.wordpress.org/cli/\">https://make.wordpress.org/cli/</a></span></span></span> has a series of global parameters (e.g. <code>--path=&lt;path&gt;</code> and <code>--user=&lt;user&gt;</code>) which work with all commands. They are called <em>global parameters</em> because they affect how WP-CLI interacts with WordPress, and have the same behavior across all commands.</p>\n<pre><code># `--user=&lt;user&gt;` sets request to a specific WordPress user\n$ wp --user=wpcli eval 'echo wp_get_current_user()-&gt;user_email;'\nwpcli@example.com\n</code></pre>\n<p>For repeated usage, WP-CLI can also read options from a YAML configuration file (e.g. <code>wp-cli.yml</code>). WP-CLI automatically discovers configuration files on the filesystem based on rules defined below. These configuration files enable specifying default values for both global parameters and subcommand-specific arguments.</p>\n<pre><code># WordPress develop includes a `wp-cli.yml` to enable easy use of WP-CLI\n$ pwd\n/srv/www/wordpress-develop.dev\n$ cat wp-cli.yml\npath: src/\n</code></pre>\n<p>Arguments are interpreted following an order of precedence, from highest priority to lowest:</p>\n<ol>\n<li>Command-line arguments.</li>\n<li><code>wp-cli.local.yml</code> file inside the current working directory (or upwards).</li>\n<li><code>wp-cli.yml</code> file inside the current working directory (or upwards).</li>\n<li><code>~/.wp-cli/config.yml</code> file (path can be changed by setting the <code>WP_CLI_CONFIG_PATH</code> environment variable).</li>\n<li>WP-CLI defaults.</li>\n</ol>\n<h2>Global parameters</h2>\n<p>The table below lists the available <span class=\"argument\">arguments</span> (specified on the command-line) and <span class=\"option\">options</span> (specified in the configuration file).</p>\n<table>\n<thead>\n<tr>\n<th>Description</th>\n<th><span class=\"argument\">Argument</span></th>\n<th><span class=\"option\">Option</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n            Path to the WordPress files.<br>\n            <br>\n            Default value: <code>null</code>\n        </td>\n<td>\n            <code>--path=&lt;path&gt;</code>\n        </td>\n<td>\n            <code>path: &lt;path&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Perform operation against a remote server over <span tabindex='0' class='glossary-item-container'>SSH<span class='glossary-item-hidden-content'><span class='glossary-item-header'>SSH</span> <span class='glossary-item-description'>Secure SHell - a protocol for securely connecting to a remote system in addition to or in place of a password.</span></span></span>.<br>\n            <br>\n            Default value: <code>null</code>\n        </td>\n<td>\n            <code>--ssh=[&lt;user&gt;@]&lt;host&gt;[:&lt;port&gt;][&lt;path&gt;]</code>\n        </td>\n<td>\n            <code>ssh: [&lt;user&gt;@]&lt;host&gt;[:&lt;port&gt;][&lt;path&gt;]</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Perform operation against a remote WordPress install over <span tabindex='0' class='glossary-item-container'>HTTP<span class='glossary-item-hidden-content'><span class='glossary-item-header'>HTTP</span> <span class='glossary-item-description'>HTTP is an acronym for Hyper Text Transfer Protocol. HTTP  is the underlying protocol used by the World Wide Web and this protocol defines how messages are formatted and transmitted, and what actions Web servers and browsers should take in response to various commands.</span></span></span>.<br>\n            <br>\n            Default value: <code>null</code>\n        </td>\n<td>\n            <code>--http=&lt;http&gt;</code>\n        </td>\n<td>\n            <code>http: &lt;http&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Pretend request came from given <span tabindex='0' class='glossary-item-container'>URL<span class='glossary-item-hidden-content'><span class='glossary-item-header'>URL</span> <span class='glossary-item-description'>A specific web address of a website or web page on the Internet, such as a website\u2019s URL www.wordpress.org</span></span></span>. In <span tabindex='0' class='glossary-item-container'>multisite<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Multisite</span> <span class='glossary-item-description'>Multisite is a WordPress feature which allows users to create a network of sites on a single WordPress installation. Available since WordPress version 3.0, Multisite is a continuation of WPMU or WordPress Multiuser project. WordPress MultiUser project was discontinued and its features were included into WordPress core.<a href=\"https://codex.wordpress.org/Create_A_Network\">https://codex.wordpress.org/Create_A_Network</a>.</span></span></span>, this argument is how the target site is specified.<br>\n            <br>\n            Default value: <code>null</code>\n        </td>\n<td>\n            <code>--url=&lt;url&gt;</code>\n        </td>\n<td>\n            <code>url: &lt;url&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Set the WordPress user.<br>\n            <br>\n            Default value: <code>null</code>\n        </td>\n<td>\n            <code>--user=&lt;id|login|email&gt;</code>\n        </td>\n<td>\n            <code>user: &lt;id|login|email&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Skip loading all or some plugins. Note: mu-plugins are still loaded.<br>\n            <br>\n            Default value: <code>\"\"</code>\n        </td>\n<td>\n            <code>--skip-plugins[=&lt;plugin&gt;]</code>\n        </td>\n<td>\n            <code>skip-plugins: &lt;list&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Skip loading all or some themes.<br>\n            <br>\n            Default value: <code>\"\"</code>\n        </td>\n<td>\n            <code>--skip-themes[=&lt;theme&gt;]</code>\n        </td>\n<td>\n            <code>skip-themes: &lt;list&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Skip loading all installed packages.<br>\n            <br>\n            Default value: <code>false</code>\n        </td>\n<td>\n            <code>--skip-packages</code>\n        </td>\n<td>\n            <code>skip-packages: &lt;bool&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Load <span tabindex='0' class='glossary-item-container'>PHP<span class='glossary-item-hidden-content'><span class='glossary-item-header'>PHP</span> <span class='glossary-item-description'>PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. <a href=\"https://www.php.net/manual/en/preface.php\">https://www.php.net/manual/en/preface.php</a>.</span></span></span> file before running the command (may be used more than once).<br>\n            <br>\n            Default value: <code>[]</code>\n        </td>\n<td>\n            <code>--require=&lt;path&gt;</code>\n        </td>\n<td>\n            <code>require: &lt;path&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Execute PHP code before running the command (may be used more than once).<br>\n            <br>\n            Default value: <code>[]</code>\n        </td>\n<td>\n            <code>--exec=&lt;php-code&gt;</code>\n        </td>\n<td>\n            <code>exec: &lt;php-code&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Load WordPress in a given context.<br>\n            <br>\n            Default value: <code>auto</code>\n        </td>\n<td>\n            <code>--context[=&lt;context&gt;]</code>\n        </td>\n<td>\n            <code>context: &lt;context&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            (Sub)commands to disable.<br>\n            <br>\n            Default value: <code>[]</code>\n        </td>\n<td>\n            <em>Not available as a flag</em>\n        </td>\n<td>\n            <code>disabled_commands: &lt;list&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Whether to colorize the output.<br>\n            <br>\n            Default value: <code>\"auto\"</code>\n        </td>\n<td>\n            <code>--[no-]color</code>\n        </td>\n<td>\n            <code>color: &lt;bool&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Show all PHP errors; add verbosity to WP-CLI bootstrap.<br>\n            <br>\n            Default value: <code>false</code>\n        </td>\n<td>\n            <code>--debug[=&lt;group&gt;]</code>\n        </td>\n<td>\n            <code>debug: &lt;group&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br>\n            <br>\n            Default value: <code>false</code>\n        </td>\n<td>\n            <code>--prompt[=&lt;assoc&gt;]</code>\n        </td>\n<td>\n            <em>Not available as an option</em>\n        </td>\n</tr>\n<tr>\n<td>\n            Suppress informational messages.<br>\n            <br>\n            Default value: <code>false</code>\n        </td>\n<td>\n            <code>--quiet</code>\n        </td>\n<td>\n            <code>quiet: &lt;bool&gt;</code>\n        </td>\n</tr>\n<tr>\n<td>\n            List of <span tabindex='0' class='glossary-item-container'>Apache<span class='glossary-item-hidden-content'><span class='glossary-item-header'>Apache</span> <span class='glossary-item-description'>Apache is the most widely used web server software. Developed and maintained by <a href=\"https://www.apache.org/\">Apache Software Foundation</a>. Apache is an Open Source software available for free.</span></span></span> Modules that are to be reported as loaded.<br>\n            <br>\n            Default value: <code>[]</code>\n        </td>\n<td>\n            <em>Not available as a flag</em>\n        </td>\n<td>\n            <code>apache_modules: &lt;list&gt;</code>\n        </td>\n</tr>\n</tbody>\n</table>\n<h2>Config files</h2>\n<p>WP-CLI can automatically discover and read options from a few configuration file types (when present):</p>\n<ol>\n<li><code>wp-cli.local.yml</code> file inside the current working directory (or upwards).</li>\n<li><code>wp-cli.yml</code> file inside the current working directory (or upwards).</li>\n<li><code>~/.wp-cli/config.yml</code> file (path can be changed by setting the <code>WP_CLI_CONFIG_PATH</code> environment variable).</li>\n</ol>\n<p>Besides the global parameters described above, configuration files can also contain defaults for any subcommand, as well as aliases to one or more WordPress installs.</p>\n<p>Here\u2019s an annotated example <code>wp-cli.yml</code> file:</p>\n<pre><code># Global parameter defaults\npath: wp-core\nurl: http://example.com\nuser: admin\ncolor: false\ndisabled_commands:\n  - db drop\n  - plugin install\nrequire:\n  - path-to/command.php\n\n# Subcommand defaults (e.g. `wp config create`)\nconfig create:\n    dbuser: root\n    dbpass: \n    extra-php: |\n        define( 'WP_DEBUG', true );\n        define( 'WP_POST_REVISIONS', 50 );\n\n# Aliases to other WordPress installs (e.g. `wp @staging rewrite flush`)\n# An alias can include 'user', 'url', 'path', 'ssh', or 'http'\n@staging:\n    ssh: wpcli@staging.wp-cli.org\n    user: wpcli\n    path: /srv/www/staging.wp-cli.org\n@production:\n    ssh: wpcli@wp-cli.org:2222\n    user: wpcli\n    path: /srv/www/wp-cli.org\n\n# Aliases can reference other aliases to create alias groups\n# Alias groups can be nested\n@both:\n - @staging\n - @production\n\n# '_' is a special value denoting configuration options for this wp-cli.yml\n_:\n    # Merge subcommand defaults from the upstream config.yml, instead of overriding\n    merge: true\n    # Inherit configuration from an arbitrary YAML file\n    inherit: prod.yml\n</code></pre>\n<h2>Remote (SSH) configuration</h2>\n<p>Using the <code>ssh</code> option, WP-CLI can be configured to run on a remote system rather than the current system. Along with the SSH protocol, WP-CLI also supports connecting to Docker containers (including docker-compose) and Vagrant VMs.</p>\n<p>The connection type can be passed via the scheme of the <code>--ssh</code> parameter or <code>ssh</code> option.</p>\n<p>Supported types are:</p>\n<ul>\n<li><code>docker:[&lt;user&gt;@]&lt;container_id&gt;</code> \u2013 Runs WP-CLI in a running Docker container via <code>docker exec [--user &lt;user&gt;] &lt;container_id&gt; ...</code></li>\n<li><code>docker-compose:[&lt;user&gt;@]&lt;container_id&gt;</code> \u2013 Runs WP-CLI in a running Docker container via <code>docker-compose exec [--user &lt;user&gt;] &lt;container_id&gt; ...</code></li>\n<li><code>docker-compose-run:[&lt;user&gt;@]&lt;container_id&gt;</code> \u2013 Runs WP-CLI in a new Docker container via <code>docker-compose run [--user &lt;user&gt;] &lt;container_id&gt; ...</code></li>\n<li><code>vagrant</code> \u2013 Runs WP-CLI in a running Vagrant VM via <code>vagrant ssh ...</code></li>\n<li><code>[&lt;user&gt;@]&lt;host&gt;[:&lt;port&gt;]</code> (ssh) \u2013 Runs WP-CLI on a remote machine through an SSH connection via <code>ssh [-p &lt;port&gt;] [&lt;user&gt;@]&lt;host&gt; ...</code></li>\n</ul>\n<p>All connection types support an optional <code>path</code> suffix to specify a directory to <code>cd</code> to before running WP-CLI; <code>path</code> is a full system path starting with either <code>/</code> or <code>~</code>. (If <code>WP_CLI_SSH_PRE_CMD</code> is specified, <code>cd</code> is run after this pre-command.)</p>\n<p>The SSH connection type also supports two advanced connection configuration options, which must be specified via an alias in the YAML configuration:</p>\n<ul>\n<li><code>proxyjump</code> \u2013 Specifies a jumpbox connection string, which is passed to <code>ssh -J</code></li>\n<li><code>key</code> \u2013 Specifies the key (identify file) to use, which is passed to <code>ssh -i</code></li>\n</ul>\n<p>See the documentation about <a href=\"https://make.wordpress.org/cli/handbook/guides/running-commands-remotely/\">running WP-CLI commands remotely</a> for more information.</p>\n<h2>Context configuration</h2>\n<p>In WP-CLI v2.6.0, a new global flag <code>--context=&lt;context&gt;</code> was added which allows users to select the WordPress context in which WP-CLI is supposed to execute its command(s).</p>\n<p>One of the main goals is to allow WP-CLI to run updates on premium plugins and themes without requiring any special setup. From our initial testing, this allows a large range of popular premium extensions to <em>just work</em>\u2122 with WP-CLI in terms of their update procedures.</p>\n<p>Possible values for this flag:</p>\n<ul>\n<li><code>cli</code>: The context which has been the default before introduction of this flag. This is something in-between a frontend and an admin request, to get around some of the quirks of WordPress when running on the console.</li>\n<li><code>admin</code>: A context that simulates running a command as if it would be executed in the administration backend. This is meant to be used to get around issues with plugins that limit functionality behind an <code>is_admin()</code> check.</li>\n<li><code>auto</code>: Switches between <code>cli</code> and <code>admin</code> depending on which command is being used. Currently, all <code>wp plugin *</code> and <code>wp theme *</code> commands use <code>admin</code>, while all other commands use <code>cli</code>.</li>\n<li><code>frontend</code>: [WIP] This does nothing yet.</li>\n</ul>\n<p>By default, the <code>--context</code> flag was set to <code>cli</code> in the initial release (v2.6.0). In WP-CLI v2.7.0 and later versions, the default was changed to <code>auto</code>. This gradual deployment allowed hosters and site owners to run tests on v2.6.0 by manually setting the context before the default behavior was changed.</p>\n<p>If you are still using WP-CLI v2.6.0 but you want to use the default of <code>--context=auto</code>, you can do so by adding the necessary <code>context: auto</code> line to your global <code>wp-cli.yml</code> configuration file. Feel free to check the documentation on <a href=\"#config-files\">WP-CLI configuration files</a> if this is new to you.</p>\n<h2>Environment variables</h2>\n<p>WP-CLI\u2019s behavior can be changed at runtime through the use of environment variables:</p>\n<ul>\n<li><code>WP_CLI_CACHE_DIR</code> \u2013 Directory to store the WP-CLI file cache. Default is <code>~/.wp-cli/cache/</code>.</li>\n<li><code>WP_CLI_CONFIG_PATH</code> \u2013 Path to the global <code>config.yml</code> file. Default is <code>~/.wp-cli/config.yml</code>.</li>\n<li><code>WP_CLI_CUSTOM_SHELL</code> \u2013 Allows the user to override the default <code>/bin/bash</code> shell used.</li>\n<li><code>WP_CLI_DISABLE_AUTO_CHECK_UPDATE</code> \u2013 Disable WP-CLI automatic checks for updates.</li>\n<li><code>WP_CLI_DOCKER_NO_TTY</code> \u2013 Ignore detected tty status and remove the <code>--tty</code> flag from <code>docker exec</code> when running WP-CLI against a docker container via ssh.</li>\n<li><code>WP_CLI_DOCKER_NO_INTERACTIVE</code> \u2013 Ignore detected tty status and remove the <code>--interactive</code> flag from <code>docker exec</code> when running WP-CLI against a docker container via ssh.</li>\n<li><code>WP_CLI_PACKAGES_DIR</code> \u2013 Directory to store packages installed through WP-CLI\u2019s package management. Default is <code>~/.wp-cli/packages/</code>.</li>\n<li><code>WP_CLI_PHP</code> \u2013 PHP binary path to use when overriding the system default (only works for non-Phar installation).</li>\n<li><code>WP_CLI_PHP_ARGS</code> \u2013 Arguments to pass to the PHP binary when invoking WP-CLI (only works for non-Phar installation).</li>\n<li><code>WP_CLI_SSH_PRE_CMD</code> \u2013 When using <code>--ssh=&lt;ssh&gt;</code>, perform a command before WP-CLI calls WP-CLI on the remote server.</li>\n<li><code>WP_CLI_SSH_BINARY</code> \u2013 When using <code>--ssh=&lt;ssh&gt;</code>, this is the command that will be called on the remote machine in place of <code>wp</code>.</li>\n<li><code>WP_CLI_STRICT_ARGS_MODE</code> \u2013 Avoid ambiguity by telling WP-CLI to treat any arguments before the command as global, and after the command as local.</li>\n<li><code>WP_CLI_SUPPRESS_GLOBAL_PARAMS</code> \u2013 Set to <code>true</code> to skip showing the global parameters at the end of the help screen. This saves screen estate for advanced users.</li>\n<li><code>WP_CLI_FORCE_USER_LOGIN</code> \u2013 Set to <code>1</code> to force the value provided to the <code>--user</code> flag to be interpreted as a login instead of an ID, to get around ambiguous types.</li>\n<li><code>WP_CLI_EARLY_REQUIRE</code> \u2013 Load one or more custom PHP files (comma-separated) early on in the bootstrap process.</li>\n<li><code>WP_CLI_REQUIRE</code> \u2013 Load one or more custom PHP files (comma-separated) after the bootstrap process. This has the same effect as <code>--require</code> on the command line or a <code>require</code> mapping in a wp-cli.yml config file.</li>\n<li><code>WP_CLI_USER_AGENT</code> \u2013 Sets the <code>$_SERVER['HTTP_USER_AGENT']</code> value that some plugins and tools rely on.</li>\n</ul>\n<p>To set an environment variable on demand, simply place the environment variable definition before the WP-CLI command you mean to run.</p>\n<pre><code># Use vim to edit a post\n$ EDITOR=vim wp post edit 1\n</code></pre>\n<p>To set the same environment variable value for every shell session, you\u2019ll need to include the environment variable definition in your <code>~/.bashrc</code> or <code>~/.zshrc</code> file</p>\n<pre><code># Always use vim to edit a post\nexport EDITOR=vim\n</code></pre>\n<nav class='o2-post-footer-actions'><ul class='o2-post-footer-action-row'></ul><div class='o2-post-footer-action-likes'></div><ul class='o2-post-footer-action-row'></ul></nav>",
        "protected": false
    },
    "author": 368236,
    "featured_media": 0,
    "parent": 18371,
    "menu_order": 0,
    "template": "",
    "meta": {
        "jetpack_post_was_ever_published": false,
        "footnotes": ""
    },
    "class_list": [
        "post-18107",
        "handbook",
        "type-handbook",
        "status-publish",
        "hentry",
        "author-swissspidy"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18107",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook"
            }
        ],
        "about": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/types/handbook"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/users/368236"
            }
        ],
        "version-history": [
            {
                "count": 1,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18107/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 18358,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18107/revisions/18358"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/handbook/18371"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://make.wordpress.org/cli/wp-json/wp/v2/media?parent=18107"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}