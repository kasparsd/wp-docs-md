{
    "id": 134522,
    "date": "2021-03-09T08:38:22",
    "date_gmt": "2021-03-09T08:38:22",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-a11y/"
    },
    "modified": "2025-07-08T10:16:04",
    "modified_gmt": "2025-07-08T10:16:04",
    "slug": "packages-a11y",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-a11y/",
    "title": {
        "rendered": "@wordpress/a11y"
    },
    "content": {
        "rendered": "<p>Accessibility utilities for WordPress.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/a11y --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>setup</h3>\n<p>Create the live regions.</p>\n<h3>speak</h3>\n<p>Allows you to easily announce dynamic interface updates to screen readers using ARIA live regions. This module is inspired by the <code>speak</code> function in <code>wp-a11y.js</code>.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { speak } from '@wordpress/a11y';\n\n// For polite messages that shouldn't interrupt what screen readers are currently announcing.\nspeak( 'The message you want to send to the ARIA live region' );\n\n// For assertive messages that should interrupt what screen readers are currently announcing.\nspeak( 'The message you want to send to the ARIA live region', 'assertive' );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>message</em> <code>string</code>: The message to be announced by assistive technologies.</li>\n<li><em>ariaLive</em> <code>['polite'|'assertive']</code>: The politeness level for aria-live; default: &#8216;polite&#8217;.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h3>Background</h3>\n<p>For context I\u2019ll quote <a href=\"https://make.wordpress.org/accessibility/2015/04/15/let-wordpress-speak-new-in-wordpress-4-2/\">this article on WordPress.org</a> by <a href=\"https://github.com/joedolson\">@joedolson</a>:</p>\n<blockquote>\n<h4>Why.</h4>\n<p>  In modern web development, updating discrete regions of a screen with JavaScript is common. The use of AJAX responses in modern JavaScript-based User Interfaces allows web developers to create beautiful interfaces similar to Desktop applications that don\u2019t require pages to reload or refresh.</p>\n<p>  JavaScript can create great usability improvements for most users \u2013 but when content is updated dynamically, it has the potential to introduce accessibility issues. This is one of the steps you can take to handle that problem.</p>\n<h4>What.</h4>\n<p>  When a portion of a page is updated with JavaScript, the update is usually highlighted with animation and bright colors, and is easy to see. But if you don\u2019t have the ability to see the screen, you don\u2019t know this has happened, unless the updated region is marked as an ARIA-live region.</p>\n<p>  If this isn\u2019t marked, there\u2019s no notification for screen readers. But it\u2019s also possible that all the region content will be announced after an update, if the ARIA live region is too large. You want to provide users with just a simple, concise message.</p>\n<h4>How.</h4>\n<p>  That\u2019s what <code>wp.a11y.speak()</code> is meant for. It\u2019s a simple tool that creates and appends an ARIA live notifications area to the  element where developers can dispatch text messages. Assistive technologies will automatically announce any text change in this area. This ARIA live region has an ARIA role of \u201cstatus\u201d so it has an implicit aria-live value of polite and an implicit aria-atomic value of true.</p>\n<p>  This means assistive technologies will notify users of updates but generally do not interrupt the current task, and updates take low priority. If you\u2019re creating an application with higher priority updates (such as a notification that their current session is about to expire, for example), then you\u2019ll want to create your own method with an aria-live value of assertive.\n</p></blockquote>\n<h2>Browser support</h2>\n<p>See <a href=\"https://make.wordpress.org/core/handbook/best-practices/browser-support/\">https://make.wordpress.org/core/handbook/best-practices/browser-support/</a></p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 237,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134522",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134522",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 11,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134522/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155216,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134522/revisions/155216"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134522"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}