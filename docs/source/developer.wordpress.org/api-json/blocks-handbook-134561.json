{
    "id": 134561,
    "date": "2021-03-09T08:38:23",
    "date_gmt": "2021-03-09T08:38:23",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-env/"
    },
    "modified": "2025-02-06T06:49:11",
    "modified_gmt": "2025-02-06T06:49:11",
    "slug": "packages-env",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-env/",
    "title": {
        "rendered": "@wordpress/env"
    },
    "content": {
        "rendered": "<p><code>wp-env</code> lets you easily set up a local WordPress environment for building and testing plugins and themes. It&#8217;s simple to install and requires no configuration.</p>\n<h2>Quick (tl;dr) instructions</h2>\n<p>Ensure that Docker is running, then:</p>\n<pre><code class=\"language-sh\">$ cd /path/to/a/wordpress/plugin\n$ npm -g i @wordpress/env\n$ wp-env start\n</code></pre>\n<p>The local environment will be available at http://localhost:8888 (Username: <code>admin</code>, Password: <code>password</code>).</p>\n<p>The database credentials are: user <code>root</code>, password <code>password</code>. For a comprehensive guide on connecting directly to the database, refer to <a href=\"https://github.com/WordPress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#accessing-the-mysql-database\">Accessing the MySQL Database</a>.</p>\n<h2>Prerequisites</h2>\n<p><code>wp-env</code> relies on a few commonly used developer tools:</p>\n<ul>\n<li><strong>Docker</strong>. <code>wp-env</code> is powered by Docker. There are instructions available for installing Docker on <a href=\"https://docs.docker.com/desktop/install/windows-install/\">Windows</a> (we recommend the WSL2 backend), <a href=\"https://docs.docker.com/docker-for-mac/install/\">macOS</a>, and <a href=\"https://docs.docker.com/desktop/install/linux-install/\">Linux</a>.</li>\n<li><strong>Node.js</strong>. <code>wp-env</code> is written as a Node script. We recommend using a Node version manager like <a href=\"https://github.com/nvm-sh/nvm\">nvm</a> to install the latest LTS version. Alternatively, you can <a href=\"https://nodejs.org/en/download\">download it directly here</a>.</li>\n<li><strong>git</strong>. Git is used for downloading software from source control, such as WordPress, plugins, and themes. <a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">You can find the installation instructions here.</a></li>\n</ul>\n<h2>Installation</h2>\n<h3>Installation as a global package</h3>\n<p>After confirming that the prerequisites are installed, you can install <code>wp-env</code> globally like so:</p>\n<pre><code class=\"language-sh\">$ npm -g i @wordpress/env\n</code></pre>\n<p>You&#8217;re now ready to use <code>wp-env</code>!</p>\n<h3>Installation as a local package</h3>\n<p>If your project already has a package.json, it&#8217;s also possible to use <code>wp-env</code> as a local package. First install <code>wp-env</code> locally as a dev dependency:</p>\n<pre><code class=\"language-sh\">$ npm i @wordpress/env --save-dev\n</code></pre>\n<p>If you have also installed <code>wp-env</code> globally, running it will automatically execute the local, project-level package. Alternatively, you can execute <code>wp-env</code> via <a href=\"https://www.npmjs.com/package/npx\"><code>npx</code></a>, a utility automatically installed with <code>npm</code>.<code>npx</code> finds binaries like <code>wp-env</code> installed through node modules. As an example: <code>npx wp-env start --update</code>.</p>\n<p>If you don&#8217;t wish to use the global installation or <code>npx</code>, modify your <code>package.json</code> and add an extra command to npm <code>scripts</code> (https://docs.npmjs.com/misc/scripts):</p>\n<pre><code class=\"language-json\">\"scripts\": {\n    \"wp-env\": \"wp-env\"\n}\n</code></pre>\n<p>When installing <code>wp-env</code> in this way, all <code>wp-env</code> commands detailed in these docs must be prefixed with <code>npm run</code>, for example:</p>\n<pre><code class=\"language-sh\"># You must add another double dash to pass flags to the script (wp-env) rather than to npm itself\n$ npm run wp-env start -- --update\n</code></pre>\n<p>instead of:</p>\n<pre><code class=\"language-sh\">$ wp-env start --update\n</code></pre>\n<h2>Usage</h2>\n<h3>Starting the environment</h3>\n<p>First, ensure that Docker is running. You can do this by clicking on the Docker icon in the system tray or menu bar.</p>\n<p>Then, change to a directory that contains a WordPress plugin or theme:</p>\n<pre><code class=\"language-sh\">$ cd ~/gutenberg\n</code></pre>\n<p>Then, start the local environment:</p>\n<pre><code class=\"language-sh\">$ wp-env start\n</code></pre>\n<p>Finally, navigate to http://localhost:8888 in your web browser to see WordPress running with the local WordPress plugin or theme running and activated. Default login credentials are username: <code>admin</code> password: <code>password</code>.</p>\n<h3>Stopping the environment</h3>\n<p>To stop the local environment:</p>\n<pre><code class=\"language-sh\">$ wp-env stop\n</code></pre>\n<h2>Troubleshooting common problems</h2>\n<p>Many common problems can be fixed by running through the following troubleshooting steps in order:</p>\n<h3>1. Check that <code>wp-env</code> is running</h3>\n<p>First, check that <code>wp-env</code> is running. One way to do this is to have Docker print a table with the currently running containers:</p>\n<pre><code class=\"language-sh\">$ docker ps\n</code></pre>\n<p>In this table, by default, you should see three entries: <code>wordpress</code> with port 8888, <code>tests-wordpress</code> with port 8889 and <code>mariadb</code> with port 3306.</p>\n<h3>2. Check the port number</h3>\n<p>By default <code>wp-env</code> uses port 8888, meaning that the local environment will be available at http://localhost:8888.</p>\n<p>You can configure the port that <code>wp-env</code> uses so that it doesn&#8217;t clash with another server by specifying the <code>WP_ENV_PORT</code> environment variable when starting <code>wp-env</code>:</p>\n<pre><code class=\"language-sh\">$ WP_ENV_PORT=3333 wp-env start\n</code></pre>\n<p>Running <code>docker ps</code> and inspecting the <code>PORTS</code> column allows you to determine which port <code>wp-env</code> is currently using.</p>\n<p>You may also specify the port numbers in your <code>.wp-env.json</code> file, but the environment variables will take precedence.</p>\n<h3>3. Restart <code>wp-env</code> with updates</h3>\n<p>Restarting <code>wp-env</code> will restart the underlying Docker containers which can fix many issues.</p>\n<p>To restart <code>wp-env</code>, just run <code>wp-env start</code> again. It will automatically stop and start the container. If you also pass the <code>--update</code> argument, it will download updates and configure WordPress again.</p>\n<pre><code class=\"language-sh\">$ wp-env start --update\n</code></pre>\n<h3>4. Restart Docker</h3>\n<p>Restarting Docker will restart the underlying Docker containers and volumes which can fix many issues.</p>\n<p>To restart Docker:</p>\n<ol>\n<li>Click on the Docker icon in the system tray or menu bar.</li>\n<li>Select <em>Restart</em>.</li>\n</ol>\n<p>Once restarted, start <code>wp-env</code> again:</p>\n<pre><code class=\"language-sh\">$ wp-env start\n</code></pre>\n<h3>5. Reset the database</h3>\n<p>Resetting the database which the local environment uses can fix many issues, especially when they are related to the WordPress installation.</p>\n<p>To reset the database:</p>\n<p><strong>\u26a0\ufe0f WARNING: This will permanently delete any posts, pages, media, etc. in the local WordPress installation.</strong></p>\n<pre><code class=\"language-sh\">$ wp-env clean all\n$ wp-env start\n</code></pre>\n<h3>6. Destroy everything and start again \ud83d\udd25</h3>\n<p>When all else fails, you can use <code>wp-env destroy</code> to forcibly remove all of the underlying Docker containers, volumes, and files. This will allow you to start from scratch.</p>\n<p>To do so:</p>\n<p><strong>\u26a0\ufe0f WARNING: This will permanently delete any posts, pages, media, etc. in the local WordPress installation.</strong></p>\n<pre><code class=\"language-sh\">$ wp-env destroy\n# This new instance is a fresh start with no existing data:\n$ wp-env start\n</code></pre>\n<h2>Using included WordPress PHPUnit test files</h2>\n<p>Out of the box <code>wp-env</code> includes the <a href=\"https://develop.svn.wordpress.org/trunk/tests/phpunit/\">WordPress&#8217; PHPUnit test files</a> corresponding to the version of WordPress installed. There is an environment variable, <code>WP_TESTS_DIR</code>, which points to the location of these files within each container. By including these files in the environment, we remove the need for you to use a package or install and mount them yourself. If you do not want to use these files, you should ignore the <code>WP_TESTS_DIR</code> environment variable and load them from the location of your choosing.</p>\n<h3>Customizing the <code>wp-tests-config.php</code> file</h3>\n<p>While we do provide a default <code>wp-tests-config.php</code> file within the environment, there may be cases where you want to use your own. WordPress provides a <code>WP_TESTS_CONFIG_FILE_PATH</code> constant that you can use to change the <code>wp-config.php</code> file used for testing. Set this to a desired path in your <code>bootstrap.php</code> file and the file you&#8217;ve chosen will be used instead of the one included in the environment.</p>\n<h2>Using <code>composer</code>, <code>phpunit</code>, and <code>wp-cli</code> tools.</h2>\n<p>For ease of use, Composer, PHPUnit, and wp-cli are available for in the environment. To run these executables, use <code>wp-env run &lt;env&gt; &lt;tool&gt; &lt;command&gt;</code>. For example, <code>wp-env run cli composer install</code>, or <code>wp-env run tests-cli phpunit</code>. You can also access various shells like <code>wp-env run cli bash</code> or <code>wp-env run cli wp shell</code>.</p>\n<p>For the <code>env</code> part, <code>cli</code> and <code>wordpress</code> share a database and mapped volumes, but more tools are available in the cli environment. You should use the <code>tests-cli</code> / <code>tests-wordpress</code> environments for a separate testing database.</p>\n<p>By default, the cwd of the run command is the root of the WordPress install. If you&#8217;re working on a plugin, you likely need to pass <code>--env-cwd</code> to make sure composer/phpunit commands are executed relative to the plugin you&#8217;re working on. For example, <code>wp-env run cli --env-cwd=wp-content/plugins/gutenberg composer install</code>.</p>\n<p>To make this easier, it&#8217;s often helpful to add scripts in your <code>package.json</code> file:</p>\n<pre><code class=\"language-json\">{\n    \"scripts\": {\n        \"composer\": \"wp-env run cli --env-cwd=wp-content/plugins/gutenberg composer\"\n    }\n}\n</code></pre>\n<p>Then, <code>npm run composer install</code> would run composer install in the environment. You could also do this for phpunit, wp-cli, etc.</p>\n<h2>Using Xdebug</h2>\n<p>Xdebug is installed in the wp-env environment, but it is turned off by default. To enable Xdebug, you can use the <code>--xdebug</code> flag with the <code>wp-env start</code> command. Here is a reference to how the flag works:</p>\n<pre><code class=\"language-sh\"># Sets the Xdebug mode to \"debug\" (for step debugging):\nwp-env start --xdebug\n\n# Sets the Xdebug mode to \"off\":\nwp-env start\n\n# Enables each of the Xdebug modes listed:\nwp-env start --xdebug=profile,trace,debug\n</code></pre>\n<p>When you&#8217;re running <code>wp-env</code> using <code>npm run</code>, like when working in the Gutenberg repo or when <code>wp-env</code> is a local project dependency, don&#8217;t forget to add an extra double dash before the <code>--xdebug</code> command:</p>\n<pre><code class=\"language-sh\">npm run wp-env start -- --xdebug\n# Alternatively, use npx:\nnpx wp-env start --xdebug\n</code></pre>\n<p>If you forget about that, the <code>--xdebug</code> parameter will be passed to npm instead of the <code>wp-env start</code> command and it will be ignored.</p>\n<p>You can see a reference on each of the Xdebug modes and what they do in the <a href=\"https://xdebug.org/docs/all_settings#mode\">Xdebug documentation</a>.</p>\n<p><em>Since we are only installing Xdebug 3, Xdebug is only supported for PHP versions greater than or equal to 7.2 (the default). Xdebug won&#8217;t be installed if <code>phpVersion</code> is set to a legacy version.</em></p>\n<h3>Xdebug IDE support</h3>\n<p>To connect to Xdebug from your IDE, you can use these IDE settings. This bit of JSON was tested for VS Code&#8217;s <code>launch.json</code> format (which you can <a href=\"https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes\">learn more about here</a>) along with <a href=\"https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug\">this PHP Debug extension</a>. Its path mapping also points to a specific plugin &#8212; you should update this to point to the source you are working with inside of the wp-env instance.</p>\n<p>You should only have to translate <code>port</code> and <code>pathMappings</code> to the format used by your own IDE.</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"Listen for XDebug\",\n    \"type\": \"php\",\n    \"request\": \"launch\",\n    \"port\": 9003,\n    \"pathMappings\": {\n        \"/var/www/html/wp-content/plugins/gutenberg\": \"${workspaceFolder}/\"\n    }\n}\n</code></pre>\n<p>After you create a <code>.vscode/launch.json</code> file in your repository, you probably want to add it to your <a href=\"https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files#configuring-ignored-files-for-all-repositories-on-your-computer\">global gitignore file</a> so that it stays private for you and is not committed to the repository.</p>\n<p>Once your IDEs Xdebug settings have been enabled, you should just have to launch the debugger, put a breakpoint on any line of PHP code, and then refresh your browser!</p>\n<p>Here is a summary:</p>\n<ol>\n<li>Start wp-env with xdebug enabled: <code>wp-env start --xdebug</code></li>\n<li>Install a suitable Xdebug extension for your IDE if it does not include one already.</li>\n<li>Configure the IDE debugger to use port <code>9003</code> and the correct source files in wp-env.</li>\n<li>Launch the debugger and put a breakpoint on any line of PHP code.</li>\n<li>Refresh the URL wp-env is running at and the breakpoint should trigger.</li>\n</ol>\n<h2>Command reference</h2>\n<p><code>wp-env</code> creates generated files in the <code>wp-env</code> home directory. By default, this is <code>~/.wp-env</code>. The exception is Linux, where files are placed at <code>~/wp-env</code> <a href=\"https://github.com/WordPress/gutenberg/issues/20180#issuecomment-587046325\">for compatibility with Snap Packages</a>. The <code>wp-env</code> home directory contains a subdirectory for each project named <code>/$md5_of_project_path</code>. To change the <code>wp-env</code> home directory, set the <code>WP_ENV_HOME</code> environment variable. For example, running <code>WP_ENV_HOME=\"something\" wp-env start</code> will download the project files to the directory <code>./something/$md5_of_project_path</code> (relative to the current directory).</p>\n<h3><code>wp-env start</code></h3>\n<p>The start command installs and initializes the WordPress environment, which includes downloading any specified remote sources. By default, <code>wp-env</code> will not update or re-configure the environment except when the configuration file changes. Tell <code>wp-env</code> to update sources and apply the configuration options again with <code>wp-env start --update</code>. This will not overwrite any existing content.</p>\n<pre><code class=\"language-sh\">wp-env start\n\nStarts WordPress for development on port 8888 (\u200bhttp://localhost:8888\u200b)\n(override with WP_ENV_PORT) and tests on port 8889 (\u200bhttp://localhost:8889\u200b)\n(override with WP_ENV_TESTS_PORT). The current working directory must be a\nWordPress installation, a plugin, a theme, or contain a .wp-env.json file. After\nfirst install, use the '--update' flag to download updates to mapped sources and\nto re-apply WordPress configuration options.\n\nOptions:\n  --debug    Enable debug output.                     [boolean] [default: false]\n  --update   Download source updates and apply WordPress configuration.\n                                                      [boolean] [default: false]\n  --xdebug   Enables Xdebug. If not passed, Xdebug is turned off. If no modes\n             are set, uses \"debug\". You may set multiple Xdebug modes by passing\n             them in a comma-separated list: `--xdebug=develop,coverage`. See\n             https://xdebug.org/docs/all_settings#mode for information about\n             Xdebug modes.                                              [string]\n  --scripts  Execute any configured lifecycle scripts. [boolean] [default: true]\n</code></pre>\n<h3><code>wp-env stop</code></h3>\n<pre><code class=\"language-sh\">wp-env stop\n\nStops running WordPress for development and tests and frees the ports.\n\nOptions:\n  --debug            Enable debug output.             [boolean] [default: false]\n</code></pre>\n<h3><code>wp-env clean [environment]</code></h3>\n<pre><code class=\"language-sh\">wp-env clean [environment]\n\nCleans the WordPress databases.\n\nPositionals:\n  environment  Which environments' databases to clean.\n            [string] [choices: \"all\", \"development\", \"tests\"] [default: \"tests\"]\n\nOptions:\n  --debug    Enable debug output.                     [boolean] [default: false]\n  --scripts  Execute any configured lifecycle scripts. [boolean] [default: true]\n</code></pre>\n<h3><code>wp-env run &lt;container&gt; [command...]</code></h3>\n<p>The run command can be used to open shell sessions, invoke WP-CLI commands, or run any arbitrary commands inside of a container.</p>\n<div class=\"callout callout-alert\">\n<p>In some cases <code>wp-env run</code> may conflict with options that you are passing to the container.<br />\nWhen this happens, <code>wp-env</code> will treat the option as its own and take action accordingly.<br />\nFor example, if you try <code>wp-env run cli php --help</code>, you will receive the <code>wp-env</code> help text.</p>\n<p>You can get around this by passing any conflicting options after a double dash. <code>wp-env</code> will not process anything after<br />\nthe double dash and will simply pass it on to the container. To get the PHP help text you would use <code>wp-env run cli php -- --help</code>.</p>\n</div>\n<pre><code class=\"language-sh\">wp-env run &lt;container&gt; [command...]\n\nRuns an arbitrary command in one of the underlying Docker containers. A double\ndash can be used to pass arguments to the container without parsing them. This\nis necessary if you are using an option that is defined below. You can use\n`bash` to open a shell session and both `composer` and `phpunit` are available\nin all WordPress and CLI containers. WP-CLI is also available in the CLI\ncontainers.\n\nPositionals:\n  container  The Docker service to run the command on.\n              [string] [required] [choices: \"mysql\", \"tests-mysql\", \"wordpress\",\n                   \"tests-wordpress\", \"cli\", \"tests-cli\", \"composer\", \"phpmyadmin\"]\n  command    The command to run.                                      [required]\n\nOptions:\n  --debug    Enable debug output.                     [boolean] [default: false]\n  --env-cwd  The command's working directory inside of the container. Paths\n             without a leading slash are relative to the WordPress root.\n                                                         [string] [default: \".\"]\n</code></pre>\n<p>For example:</p>\n<h4>Displaying the users on the development instance:</h4>\n<pre><code class=\"language-sh\">wp-env run cli wp user list\n\u280f Running `wp user list` in 'cli'.\n\nID      user_login      display_name    user_email      user_registered roles\n1       admin   admin   wordpress@example.com   2020-03-05 10:45:14     administrator\n\n\u2714 Ran `wp user list` in 'cli'. (in 2s 374ms)\n</code></pre>\n<h4>Creating a post on the tests instance:</h4>\n<pre><code class=\"language-sh\">wp-env run tests-cli \"wp post create --post_type=page --post_title='Ready'\"\n\n\u2139 Starting 'wp post create --post_type=page --post_title='Ready&apos;&apos; on the tests-cli container.\n\nSuccess: Created post 5.\n\u2714 Ran `wp post create --post_type=page --post_title='Ready'` in 'tests-cli'. (in 3s 293ms)\n</code></pre>\n<h4>Opening the WordPress shell on the tests instance and running PHP commands:</h4>\n<pre><code class=\"language-sh\">wp-env run tests-cli wp shell\n\u2139 Starting 'wp shell' on the tests-cli container. Exit the WordPress shell with ctrl-c.\n\nStarting 31911d623e75f345e9ed328b9f48cff6_mysql_1 ... done\nStarting 31911d623e75f345e9ed328b9f48cff6_tests-wordpress_1 ... done\nwp&gt; echo( 'hello world!' );\nhello world!\nwp&gt; ^C\n\u2714 Ran `wp shell` in 'tests-cli'. (in 16s 400ms)\n</code></pre>\n<h4>Installing a plugin or theme on the development instance</h4>\n<pre><code class=\"language-sh\">wp-env run cli wp plugin install custom-post-type-ui\n\nCreating 500cd328b649d63e882d5c4695871d04_cli_run ... done\nInstalling Custom Post Type UI (1.9.2)\nDownloading installation package from https://downloads.wordpress.org/plugin/custom-post-type-ui.zip...\nThe authenticity of custom-post-type-ui.zip could not be verified as no signature was found.\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nSuccess: Installed 1 of 1 plugins.\n\u2714 Ran `plugin install custom-post-type-ui` in 'cli'. (in 6s 483ms)\n</code></pre>\n<h4>Changing the permalink structure</h4>\n<p>You might want to do this to enable access to the REST API (<code>wp-env/wp/v2/</code>) endpoint in your wp-env environment. The endpoint is not available with plain permalinks.</p>\n<p><strong>Examples</strong></p>\n<p>To set the permalink to just the post name:</p>\n<pre><code>wp-env run cli \"wp rewrite structure /%postname%/\"\n</code></pre>\n<p>To set the permalink to the year, month, and post name:</p>\n<pre><code>wp-env run cli \"wp rewrite structure /%year%/%monthnum%/%postname%/\"\n</code></pre>\n<h3><code>wp-env destroy</code></h3>\n<pre><code class=\"language-sh\">wp-env destroy\n\nDestroy the WordPress environment. Deletes docker containers, volumes, and\nnetworks associated with the WordPress environment and removes local files.\n\nOptions:\n  --debug    Enable debug output.                     [boolean] [default: false]\n  --scripts  Execute any configured lifecycle scripts. [boolean] [default: true]\n</code></pre>\n<h3><code>wp-env logs [environment]</code></h3>\n<pre><code class=\"language-sh\">wp-env logs\n\ndisplays PHP and Docker logs for given WordPress environment.\n\nPositionals:\n  environment  Which environment to display the logs from.\n      [string] [choices: \"development\", \"tests\", \"all\"] [default: \"development\"]\n\nOptions:\n  --debug    Enable debug output.                     [boolean] [default: false]\n  --watch    Watch for logs as they happen.            [boolean] [default: true]\n</code></pre>\n<h3><code>wp-env install-path</code></h3>\n<p>Get the path where all of the environment files are stored. This includes the Docker files, WordPress, PHPUnit files, and any sources that were downloaded.</p>\n<p>Example:</p>\n<pre><code class=\"language-sh\">$ wp-env install-path\n\n/home/user/.wp-env/63263e6506becb7b8613b02d42280a49\n</code></pre>\n<h2>.wp-env.json</h2>\n<p>You can customize the WordPress installation, plugins and themes that the development environment will use by specifying a <code>.wp-env.json</code> file in the directory that you run <code>wp-env</code> from.</p>\n<p><code>.wp-env.json</code> supports fields for options applicable to both the tests and development instances.</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\"core\"</code></td>\n<td><code>string\\|null</code></td>\n<td><code>null</code></td>\n<td>The WordPress installation to use. If <code>null</code> is specified, <code>wp-env</code> will use the latest production release of WordPress.</td>\n</tr>\n<tr>\n<td><code>\"phpVersion\"</code></td>\n<td><code>string\\|null</code></td>\n<td><code>null</code></td>\n<td>The PHP version to use. If <code>null</code> is specified, <code>wp-env</code> will use the default version used with production release of WordPress.</td>\n</tr>\n<tr>\n<td><code>\"plugins\"</code></td>\n<td><code>string[]</code></td>\n<td><code>[]</code></td>\n<td>A list of plugins to install and activate in the environment.</td>\n</tr>\n<tr>\n<td><code>\"themes\"</code></td>\n<td><code>string[]</code></td>\n<td><code>[]</code></td>\n<td>A list of themes to install in the environment.</td>\n</tr>\n<tr>\n<td><code>\"port\"</code></td>\n<td><code>integer</code></td>\n<td><code>8888</code> (<code>8889</code> for the tests instance)</td>\n<td>The primary port number to use for the installation. You&#8217;ll access the instance through the port: &#8216;http://localhost:8888&#8217;.</td>\n</tr>\n<tr>\n<td><code>\"testsPort\"</code></td>\n<td><code>integer</code></td>\n<td><code>8889</code></td>\n<td>The port number for the test site. You&#8217;ll access the instance through the port: &#8216;http://localhost:8889&#8217;.</td>\n</tr>\n<tr>\n<td><code>\"config\"</code></td>\n<td><code>Object</code></td>\n<td>See below.</td>\n<td>Mapping of wp-config.php constants to their desired values.</td>\n</tr>\n<tr>\n<td><code>\"mappings\"</code></td>\n<td><code>Object</code></td>\n<td><code>\"{}\"</code></td>\n<td>Mapping of WordPress directories to local directories to be mounted in the WordPress instance.</td>\n</tr>\n<tr>\n<td><code>\"mysqlPort\"</code></td>\n<td><code>integer</code></td>\n<td><code>null</code> (randomly assigned)</td>\n<td>The MySQL port number to expose. The setting is only available in the <code>env.development</code> and <code>env.tests</code> objects.</td>\n</tr>\n<tr>\n<td><code>\"phpmyadminPort\"</code></td>\n<td><code>integer</code></td>\n<td><code>null</code></td>\n<td>The port number for phpMyAdmin. If provided, you&#8217;ll access phpMyAdmin through: http://localhost:</td>\n</tr>\n<tr>\n<td><code>\"multisite\"</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>Whether to set up a multisite installation.</td>\n</tr>\n<tr>\n<td><code>\"lifecycleScripts\"</code></td>\n<td><code>Object</code></td>\n<td><code>\"{}\"</code></td>\n<td>Mapping of commands that should be executed at certain points in the lifecycle.</td>\n</tr>\n</tbody>\n</table>\n<p><em>Note: the port number environment variables (<code>WP_ENV_PORT</code> and <code>WP_ENV_TESTS_PORT</code>) take precedent over the .wp-env.json values.</em></p>\n<p>Several types of strings can be passed into the <code>core</code>, <code>plugins</code>, <code>themes</code>, and <code>mappings</code> fields.</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Format</th>\n<th>Example(s)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Relative path</td>\n<td><code>.&lt;path&gt;\\|~&lt;path&gt;</code></td>\n<td><code>\"./a/directory\"</code>, <code>\"../a/directory\"</code>, <code>\"~/a/directory\"</code></td>\n</tr>\n<tr>\n<td>Absolute path</td>\n<td><code>/&lt;path&gt;\\|&lt;letter&gt;:\\&lt;path&gt;</code></td>\n<td><code>\"/a/directory\"</code>, <code>\"C:\\\\a\\\\directory\"</code></td>\n</tr>\n<tr>\n<td>GitHub repository</td>\n<td><code>&lt;owner&gt;/&lt;repo&gt;[/&lt;path&gt;][#&lt;ref&gt;]</code></td>\n<td><code>\"WordPress/WordPress\"</code>, <code>\"WordPress/gutenberg#trunk\"</code>, <code>WordPress/themes/my-theme#my-branch</code>; if no branch is provided wp-env will fall back to the repo&#8217;s default branch</td>\n</tr>\n<tr>\n<td>SSH repository</td>\n<td><code>ssh://user@host/&lt;owner&gt;/&lt;repo&gt;.git[#&lt;ref&gt;]</code></td>\n<td><code>\"ssh://git@github.com/WordPress/WordPress.git\"</code></td>\n</tr>\n<tr>\n<td>ZIP File</td>\n<td><code>http[s]://&lt;host&gt;/&lt;path&gt;.zip</code></td>\n<td><code>\"https://wordpress.org/wordpress-5.4-beta2.zip\"</code></td>\n</tr>\n</tbody>\n</table>\n<p>Remote sources will be downloaded into a temporary directory located in <code>~/.wp-env</code>.</p>\n<p>Additionally, the key <code>env</code> is available to override any of the above options on an individual-environment basis. For example, take the following <code>.wp-env.json</code> file:</p>\n<pre><code class=\"language-json\">{\n    \"plugins\": [ \".\" ],\n    \"config\": {\n        \"KEY_1\": true,\n        \"KEY_2\": false\n    },\n    \"env\": {\n        \"development\": {\n            \"themes\": [ \"./one-theme\" ]\n        },\n        \"tests\": {\n            \"config\": {\n                \"KEY_1\": false\n            },\n            \"port\": 3000,\n            \"mysqlPort\": 13306,\n            \"phpmyadminPort\": 9001\n        }\n    }\n}\n</code></pre>\n<p>On the development instance, <code>cwd</code> will be mapped as a plugin, <code>one-theme</code> will be mapped as a theme, KEY_1 will be set to true, and KEY_2 will be set to false. Also note that the default port, 8888, will be used as well.</p>\n<p>On the tests instance, <code>cwd</code> is still mapped as a plugin, but no theme is mapped. Additionally, while KEY_2 is still set to false, KEY_1 is overridden and set to false. 3000 overrides the default port as well.</p>\n<p>This gives you a lot of power to change the options applicable to each environment.</p>\n<h2>.wp-env.override.json</h2>\n<p>Any fields here will take precedence over .wp-env.json. This file is useful when ignored from version control, to persist local development overrides. Note that options like <code>plugins</code> and <code>themes</code> are not merged. As a result, if you set <code>plugins</code> in your override file, this will override all of the plugins listed in the base-level config. The only keys which are merged are <code>config</code> and <code>mappings</code>. This means that you can set your own wp-config values without losing any of the default values.</p>\n<h2>Default wp-config values.</h2>\n<p>On the development instance, these wp-config values are defined by default:</p>\n<pre><code>WP_DEBUG: true,\nSCRIPT_DEBUG: true,\nWP_PHP_BINARY: 'php',\nWP_TESTS_EMAIL: 'admin@example.org',\nWP_TESTS_TITLE: 'Test Blog',\nWP_TESTS_DOMAIN: 'localhost',\nWP_SITEURL: 'http://localhost',\nWP_HOME: 'http://localhost',\n</code></pre>\n<p>On the test instance, all of the above are still defined, but <code>WP_DEBUG</code> and <code>SCRIPT_DEBUG</code> are set to false.</p>\n<p>These can be overridden by setting a value within the <code>config</code> configuration. Setting it to <code>null</code> will prevent the constant being defined entirely.</p>\n<p>Additionally, the values referencing a URL include the specified port for the given environment. So if you set <code>testsPort: 3000, port: 2000</code>, <code>WP_HOME</code> (for example) will be <code>http://localhost:3000` on the tests instance and</code>http://localhost:2000` on the development instance.</p>\n<h2>Lifecycle Scripts</h2>\n<p>Using the <code>lifecycleScripts</code> option in <code>.wp-env.json</code> will allow you to set arbitrary commands to be executed at certain points in the lifecycle. This configuration<br />\ncan also be overridden using <code>WP_ENV_LIFECYCLE_SCRIPT_{LIFECYCLE_EVENT}</code> environment variables, with the remainder being the all-caps snake_case name of the option, for<br />\nexample, <code>WP_ENV_LIFECYCLE_SCRIPT_AFTER_START</code>. Keep in mind that these will be executed on both fresh and existing environments, so, ensure any commands you<br />\nbuild won&#8217;t break on subsequent executions.</p>\n<ul>\n<li><code>afterStart</code>: Runs after <code>wp-env start</code> has finished setting up the environment.</li>\n<li><code>afterClean</code>: Runs after <code>wp-env clean</code> has finished cleaning the environment.</li>\n<li><code>afterDestroy</code>: Runs after <code>wp-env destroy</code> has destroyed the environment.</li>\n</ul>\n<h2>Examples</h2>\n<h3>Latest stable WordPress + current directory as a plugin</h3>\n<p>This is useful for plugin development.</p>\n<pre><code class=\"language-json\">{\n    \"core\": null,\n    \"plugins\": [ \".\" ]\n}\n</code></pre>\n<h3>Latest development WordPress + current directory as a plugin</h3>\n<p>This is useful for plugin development when upstream Core changes need to be tested. This can also be set via the environment variable <code>WP_ENV_CORE</code>.</p>\n<pre><code class=\"language-json\">{\n    \"core\": \"WordPress/WordPress#master\",\n    \"plugins\": [ \".\" ]\n}\n</code></pre>\n<h3>Local <code>wordpress-develop</code> + current directory as a plugin</h3>\n<p>This is useful for working on plugins and WordPress Core at the same time.</p>\n<p>If you are running a <em>build</em> of <code>wordpress-develop</code>, point <code>core</code> to the <code>build</code> directory.</p>\n<pre><code class=\"language-json\">{\n    \"core\": \"../wordpress-develop/build\",\n    \"plugins\": [ \".\" ]\n}\n</code></pre>\n<p>If you are running <code>wordpress-develop</code> in a dev mode (e.g. the watch command <code>dev</code> or the dev build <code>build:dev</code>), then point <code>core</code> to the <code>src</code> directory.</p>\n<pre><code class=\"language-json\">{\n    \"core\": \"../wordpress-develop/src\",\n    \"plugins\": [ \".\" ]\n}\n</code></pre>\n<h3>A complete testing environment</h3>\n<p>This is useful for integration testing: that is, testing how old versions of WordPress and different combinations of plugins and themes impact each other.</p>\n<pre><code class=\"language-json\">{\n    \"core\": \"WordPress/WordPress#5.2.0\",\n    \"plugins\": [ \"WordPress/wp-lazy-loading\", \"WordPress/classic-editor\" ],\n    \"themes\": [ \"WordPress/theme-experiments\" ]\n}\n</code></pre>\n<h3>Add mu-plugins and other mapped directories</h3>\n<p>You can add mu-plugins via the mapping config. The mapping config also allows you to mount a directory to any location in the wordpress install, so you could even mount a subdirectory. Note here that theme-1, will not be activated.</p>\n<pre><code class=\"language-json\">{\n    \"plugins\": [ \".\" ],\n    \"mappings\": {\n        \"wp-content/mu-plugins\": \"./path/to/local/mu-plugins\",\n        \"wp-content/themes\": \"./path/to/local/themes\",\n        \"wp-content/themes/specific-theme\": \"./path/to/local/theme-1\"\n    }\n}\n</code></pre>\n<h3>Avoid activating plugins or themes on the instance</h3>\n<p>Since all plugins in the <code>plugins</code> key are activated by default, you should use the <code>mappings</code> key to avoid this behavior. This might be helpful if you have a test plugin that should not be activated all the time.</p>\n<pre><code class=\"language-json\">{\n    \"plugins\": [ \".\" ],\n    \"mappings\": {\n        \"wp-content/plugins/my-test-plugin\": \"./path/to/test/plugin\"\n    }\n}\n</code></pre>\n<h3>Map a plugin only in the tests environment</h3>\n<p>If you need a plugin active in one environment but not the other, you can use <code>env.&lt;envName&gt;</code> to set options specific to one environment. Here, we activate cwd and a test plugin on the tests instance. This plugin is not activated on any other instances.</p>\n<pre><code class=\"language-json\">{\n    \"plugins\": [ \".\" ],\n    \"env\": {\n        \"tests\": {\n            \"plugins\": [ \".\", \"path/to/test/plugin\" ]\n        }\n    }\n}\n</code></pre>\n<h3>Custom Port Numbers</h3>\n<p>You can tell <code>wp-env</code> to use a custom port number so that your instance does not conflict with other <code>wp-env</code> instances.</p>\n<pre><code class=\"language-json\">{\n    \"plugins\": [ \".\" ],\n    \"port\": 4013,\n    \"env\": {\n        \"tests\": {\n            \"port\": 4012\n        }\n    }\n}\n</code></pre>\n<p>These can also be set via environment variables:</p>\n<ul>\n<li><code>WP_ENV_PORT</code> to override the development environment&#8217;s web server&#8217;s port.</li>\n<li><code>WP_ENV_TESTS_PORT</code> to override the testing environment&#8217;s web server&#8217;s port.</li>\n<li>phpMyAdmin is not enabled by default, but its port can also be overridden for the development and testing environments via <code>WP_ENV_PHPMYADMIN_PORT</code> and <code>WP_ENV_TESTS_PHPMYADMIN_PORT</code>, respectively.</li>\n<li>By default, MySQL aren&#8217;t exposed to the host, which means no chance of port conflicts. But these can also be overridden for the development and testing environments via <code>WP_ENV_MYSQL_PORT</code> and <code>WP_ENV_TESTS_MYSQL_PORT</code>, respectively.</li>\n</ul>\n<h3>Specific PHP Version</h3>\n<p>You can tell <code>wp-env</code> to use a specific PHP version for compatibility and testing. This can also be set via the environment variable <code>WP_ENV_PHP_VERSION</code>.</p>\n<pre><code class=\"language-json\">{\n    \"phpVersion\": \"7.2\",\n    \"plugins\": [ \".\" ]\n}\n</code></pre>\n<h3>Multisite support</h3>\n<p>You can tell <code>wp-env</code>  if the site should be multisite enabled. This can also be set via the environment variable <code>WP_ENV_MULTISITE</code>.</p>\n<pre><code class=\"language-json\">{\n    \"multisite\": true,\n    \"plugins\": [ \".\" ]\n}\n</code></pre>\n<h3>Node Lifecycle Script</h3>\n<p>This is useful for performing some actions after setting up the environment, such as bootstrapping an E2E test environment.</p>\n<pre><code class=\"language-json\">{\n    \"lifecycleScripts\": {\n        \"afterStart\": \"node tests/e2e/bin/setup-env.js\"\n    }\n}\n</code></pre>\n<h3>Advanced PHP settings</h3>\n<p>You can set PHP settings by mapping an <code>.htaccess</code> file. This maps an <code>.htaccess</code> file to the WordPress root (<code>/var/www/html</code>) from the directory in which you run <code>wp-env</code>.</p>\n<pre><code class=\"language-json\">{\n    \"mappings\": {\n        \".htaccess\": \".htaccess\"\n    }\n}\n</code></pre>\n<p>Then, your .htaccess file can contain various settings like this:</p>\n<pre><code># Note: the default upload value is 1G.\nphp_value post_max_size 2G\nphp_value upload_max_filesize 2G\nphp_value memory_limit 2G\n</code></pre>\n<p>This is useful if there are options you&#8217;d like to add to <code>php.ini</code>, which is difficult to access in this environment.</p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 278,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134561",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134561",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 44,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134561/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 156272,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134561/revisions/156272"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134561"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}