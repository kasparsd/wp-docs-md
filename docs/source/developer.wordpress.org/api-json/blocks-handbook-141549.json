{
    "id": 141549,
    "date": "2022-07-01T14:09:48",
    "date_gmt": "2022-07-01T14:09:48",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/5-adding-a-delete-button/"
    },
    "modified": "2024-01-29T21:09:40",
    "modified_gmt": "2024-01-29T21:09:40",
    "slug": "5-adding-a-delete-button",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/5-adding-a-delete-button/",
    "title": {
        "rendered": "Adding a delete button"
    },
    "content": {
        "rendered": "<p>In the <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/\">previous part</a> we added an ability to create new pages,<br />\nand in this part we will add a <em>Delete</em> feature to our app.</p>\n<p>Here&#8217;s a glimpse of what we&#8217;re going to build:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/delete-button/delete-button.png?ssl=1\" alt=\"\" /></p>\n<h3>Step 1: Add a <em>Delete</em> button</h3>\n<p>Let&#8217;s start by creating the <code>DeletePageButton</code> component and updating the user interface of our <code>PagesList</code> component:</p>\n<pre><code class=\"language-js\">import { Button } from '@wordpress/components';\nimport { decodeEntities } from '@wordpress/html-entities';\n\nconst DeletePageButton = () =&gt; (\n    &lt;Button variant=\"primary\"&gt;\n        Delete\n    &lt;/Button&gt;\n)\n\nfunction PagesList( { hasResolved, pages } ) {\n    if ( ! hasResolved ) {\n        return &lt;Spinner /&gt;;\n    }\n    if ( ! pages?.length ) {\n        return &lt;div&gt;No results&lt;/div&gt;;\n    }\n\n    return (\n        &lt;table className=\"wp-list-table widefat fixed striped table-view-list\"&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Title&lt;/td&gt;\n                    &lt;td style={{width: 190}}&gt;Actions&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                { pages?.map( ( page ) =&gt; (\n                    &lt;tr key={page.id}&gt;\n                        &lt;td&gt;{ decodeEntities( page.title.rendered ) }&lt;/td&gt;\n                        &lt;td&gt;\n                            &lt;div className=\"form-buttons\"&gt;\n                                &lt;PageEditButton pageId={ page.id } /&gt;\n                                {/* <span aria-hidden=\"true\" class=\"wp-exclude-emoji\">\u2193</span> This is the only change in the PagesList component */}\n                                &lt;DeletePageButton pageId={ page.id }/&gt;\n                            &lt;/div&gt;\n                        &lt;/td&gt;\n                    &lt;/tr&gt;\n                ) ) }\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    );\n}\n</code></pre>\n<p>This is what the PagesList should look like now:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/delete-button/delete-button.png?ssl=1\" alt=\"\" /></p>\n<h3>Step 2: Wire the button to a delete action</h3>\n<p>In Gutenberg data, we delete entity records from the WordPress REST API using the <code>deleteEntityRecord</code> action. It sends the request, processes the result, and updates the cached data in the Redux state.</p>\n<p>Here&#8217;s how you can try deleting entity records in your browser&#8217;s dev tools:</p>\n<pre><code class=\"language-js\">// We need a valid page ID to call deleteEntityRecord, so let's get the first available one using getEntityRecords.\nconst pageId = wp.data.select( 'core' ).getEntityRecords( 'postType', 'page' )[0].id;\n\n// Now let's delete that page:\nconst promise = wp.data.dispatch( 'core' ).deleteEntityRecord( 'postType', 'page', pageId );\n\n// promise gets resolved or rejected when the API request succeeds or fails.\n</code></pre>\n<p>Once the REST API request is finished, you will notice one of the pages has disappeared from the list. This is because that list is populated by the <code>useSelect()</code> hook and the <code>select( coreDataStore ).getEntityRecords( 'postType', 'page' )</code> selector. Anytime the underlying data changes, the list gets re-rendered with fresh data. That&#8217;s pretty convenient!</p>\n<p>Let&#8217;s dispatch that action when <code>DeletePageButton</code> is clicked:</p>\n<pre><code class=\"language-js\">const DeletePageButton = ({ pageId }) =&gt; {\n    const { deleteEntityRecord } = useDispatch( coreDataStore );\n    const handleDelete = () =&gt; deleteEntityRecord( 'postType', 'page', pageId );\n    return (\n        &lt;Button variant=\"primary\" onClick={ handleDelete }&gt;\n            Delete\n        &lt;/Button&gt;\n    );\n}\n</code></pre>\n<h3>Step 3: Add visual feedback</h3>\n<p>It may take a few moments for the REST API request to finish after clicking the <em>Delete</em> button. Let&#8217;s communicate that with a <code>&lt;Spinner /&gt;</code> component similarly to what we did in the previous parts of this tutorial.</p>\n<p>We&#8217;ll need the <code>isDeletingEntityRecord</code> selector for that. It is similar to the <code>isSavingEntityRecord</code> selector we&#8217;ve already seen in <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/\">part 3</a>: it returns <code>true</code> or <code>false</code> and never issues any HTTP requests:</p>\n<pre><code class=\"language-js\">const DeletePageButton = ({ pageId }) =&gt; {\n    // ...\n    const { isDeleting } = useSelect(\n        select =&gt; ({\n            isDeleting: select( coreDataStore ).isDeletingEntityRecord( 'postType', 'page', pageId ),\n        }),\n        [ pageId ]\n    )\n    return (\n        &lt;Button variant=\"primary\" onClick={ handleDelete } disabled={ isDeleting }&gt;\n            { isDeleting ? (\n                &lt;&gt;\n                    &lt;Spinner /&gt;\n                    Deleting...\n                &lt;/&gt;\n            ) : 'Delete' }\n        &lt;/Button&gt;\n    );\n}\n</code></pre>\n<p>Here&#8217;s what it looks like in action:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/delete-button/deleting-in-progress.png?ssl=1\" alt=\"\" /></p>\n<h3>Step 4: Handle errors</h3>\n<p>We optimistically assumed that a <em>delete</em> operation would always succeed. Unfortunately, under the hood, it is a REST API request that can fail in many ways:</p>\n<ul>\n<li>The website can be down.</li>\n<li>The delete request may be invalid.</li>\n<li>The page could have been deleted by someone else in the meantime.</li>\n</ul>\n<p>To tell the user when any of these errors happen, we need to extract the error information using the <code>getLastEntityDeleteError</code> selector:</p>\n<pre><code class=\"language-js\">// Replace 9 with an actual page ID\nwp.data.select( 'core' ).getLastEntityDeleteError( 'postType', 'page', 9 )\n</code></pre>\n<p>Here&#8217;s how we can apply it in <code>DeletePageButton</code>:</p>\n<pre><code class=\"language-js\">import { useEffect } from 'react';\nconst DeletePageButton = ({ pageId }) =&gt; {\n    // ...\n    const { error, /* ... */ } = useSelect(\n        select =&gt; ( {\n            error: select( coreDataStore ).getLastEntityDeleteError( 'postType', 'page', pageId ),\n            // ...\n        } ),\n        [pageId]\n    );\n    useEffect( () =&gt; {\n        if ( error ) {\n            // Display the error\n        }\n    }, [error] )\n\n    // ...\n}\n</code></pre>\n<p>The <code>error</code> object comes from the <code>@wordpress/api-fetch</code> and contains information about the error. It has the following properties:</p>\n<ul>\n<li><code>message</code> \u2013 a human-readable error message such as <code>Invalid post ID</code>.</li>\n<li><code>code</code> \u2013 a string-based error code such as <code>rest_post_invalid_id</code>. To learn about all possible error codes you&#8217;d need to refer to the <a href=\"https://github.com/WordPress/wordpress-develop/blob/2648a5f984b8abf06872151898e3a61d3458a628/src/wp-includes/rest-api/endpoints/class-wp-rest-revisions-controller.php#L226-L230\"><code>/v2/pages</code> endpoint&#8217;s source code</a>.</li>\n<li><code>data</code> (optional) \u2013 error details, contains the <code>code</code> property containing the HTTP response code for the failed request.</li>\n</ul>\n<p>There are many ways to turn that object into an error message, but in this tutorial, we will display the <code>error.message</code>.</p>\n<p>WordPress has an established pattern of displaying status information using the <code>Snackbar</code> component. Here&#8217;s what it looks like <strong>in the Widgets editor</strong>:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/delete-button/snackbar-example.png?ssl=1\" alt=\"\" /></p>\n<p>Let&#8217;s use the same type of notifications in our plugin! There are two parts to this:</p>\n<ol>\n<li>Displaying notifications</li>\n<li>Dispatching notifications</li>\n</ol>\n<h4>Displaying notifications</h4>\n<p>Our application only knows how to display pages but does not know how to display notifications. Let&#8217;s tell it!</p>\n<p>WordPress conveniently provides us with all the React components we need to render notifications. A <a href=\"https://wordpress.github.io/gutenberg/?path=/story/components-snackbar--default\">component called <code>Snackbar</code></a> represents a single notification:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/delete-button/snackbar.png?ssl=1\" alt=\"\" /></p>\n<p>We won&#8217;t use <code>Snackbar</code> directly, though. We&#8217;ll use the <code>SnackbarList</code> component, which can display multiple notices using smooth animations and automatically hide them after a few seconds. In fact, WordPress uses the same component used in the Widgets editor and other wp-admin pages!</p>\n<p>Let&#8217;s create our own <code>Notifications</code> components:</p>\n<pre><code class=\"language-js\">import { SnackbarList } from '@wordpress/components';\nimport { store as noticesStore } from '@wordpress/notices';\n\nfunction Notifications() {\n    const notices = []; // We'll come back here in a second!\n\n    return (\n        &lt;SnackbarList\n            notices={ notices }\n            className=\"components-editor-notices__snackbar\"\n        /&gt;\n    );\n}\n</code></pre>\n<p>The basic structure is in place, but the list of notifications it renders is empty. How do we populate it? We&#8217;ll lean on the same package as WordPress: <a href=\"https://github.com/WordPress/gutenberg/blob/895ca1f6a7d7e492974ea55f693aecbeb1d5bbe3/docs/reference-guides/data/data-core-notices.md\"><code>@wordpress/notices</code></a>.</p>\n<p>Here&#8217;s how:</p>\n<pre><code class=\"language-js\">import { SnackbarList } from '@wordpress/components';\nimport { store as noticesStore } from '@wordpress/notices';\n\nfunction Notifications() {\n    const notices = useSelect(\n        ( select ) =&gt; select( noticesStore ).getNotices(),\n        []\n    );\n    const { removeNotice } = useDispatch( noticesStore );\n    const snackbarNotices = notices.filter( ({ type }) =&gt; type === 'snackbar' );\n\n    return (\n        &lt;SnackbarList\n            notices={ snackbarNotices }\n            className=\"components-editor-notices__snackbar\"\n            onRemove={ removeNotice }\n        /&gt;\n    );\n}\n\nfunction MyFirstApp() {\n    // ...\n    return (\n        &lt;div&gt;\n            {/* ... */}\n            &lt;Notifications /&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>\n<p>This tutorial is focused on managing the pages and won&#8217;t discuss the above snippet in detail. If you&#8217;re interested in the details of <code>@wordpress/notices</code>, the <a href=\"https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/\">handbook page</a> is a good place to start.</p>\n<p>Now we&#8217;re ready to tell the user about any errors that may have occurred.</p>\n<h4>Dispatching notifications</h4>\n<p>With the SnackbarNotices component in place, we&#8217;re ready to dispatch some notifications! Here&#8217;s how:</p>\n<pre><code class=\"language-js\">import { useEffect } from 'react';\nimport { store as noticesStore } from '@wordpress/notices';\nfunction DeletePageButton( { pageId } ) {\n    const { createSuccessNotice, createErrorNotice } = useDispatch( noticesStore );\n    // useSelect returns a list of selectors if you pass the store handle\n    // instead of a callback:\n    const { getLastEntityDeleteError } = useSelect( coreDataStore )\n    const handleDelete = async () =&gt; {\n        const success = await deleteEntityRecord( 'postType', 'page', pageId);\n        if ( success ) {\n            // Tell the user the operation succeeded:\n            createSuccessNotice( \"The page was deleted!\", {\n                type: 'snackbar',\n            } );\n        } else {\n            // We use the selector directly to get the fresh error *after* the deleteEntityRecord\n            // have failed.\n            const lastError = getLastEntityDeleteError( 'postType', 'page', pageId );\n            const message = ( lastError?.message || 'There was an error.' ) + ' Please refresh the page and try again.'\n            // Tell the user how exactly the operation has failed:\n            createErrorNotice( message, {\n                type: 'snackbar',\n            } );\n        }\n    }\n    // ...\n}\n</code></pre>\n<p>Great! <code>DeletePageButton</code> is now fully aware of errors. Let&#8217;s see that error message in action. We&#8217;ll trigger an invalid delete and let it fail. One way to do this is to multiply the <code>pageId</code> by a large number:</p>\n<pre><code class=\"language-js\">function DeletePageButton( { pageId, onCancel, onSaveFinished } ) {\n    pageId = pageId * 1000;\n    // ...\n}\n</code></pre>\n<p>Once you refresh the page and click any <code>Delete</code> button, you should see the following error message:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/delete-button/snackbar-error.png?ssl=1\" alt=\"\" /></p>\n<p>Fantastic! We can now <strong>remove the <code>pageId = pageId * 1000;</code> line.</strong></p>\n<p>Let&#8217;s now try actually deleting a page. Here&#8217;s what you should see after refreshing your browser and clicking the Delete button:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/delete-button/snackbar-success.png?ssl=1\" alt=\"\" /></p>\n<p>And that&#8217;s it!</p>\n<h3>Wiring it all together</h3>\n<p>All the pieces are in place, great! Here\u2019s all the changes we&#8217;ve made in this chapter:</p>\n<pre><code class=\"language-js\">import { useState, useEffect } from 'react';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { Button, Modal, TextControl } from '@wordpress/components';\n\nfunction MyFirstApp() {\n    const [searchTerm, setSearchTerm] = useState( &apos;&apos; );\n    const { pages, hasResolved } = useSelect(\n        ( select ) =&gt; {\n            const query = {};\n            if ( searchTerm ) {\n                query.search = searchTerm;\n            }\n            const selectorArgs = ['postType', 'page', query];\n            const pages = select( coreDataStore ).getEntityRecords( ...selectorArgs );\n            return {\n                pages,\n                hasResolved: select( coreDataStore ).hasFinishedResolution(\n                    'getEntityRecords',\n                    selectorArgs,\n                ),\n            };\n        },\n        [searchTerm],\n    );\n\n    return (\n        &lt;div&gt;\n            &lt;div className=\"list-controls\"&gt;\n                &lt;SearchControl onChange={ setSearchTerm } value={ searchTerm }/&gt;\n                &lt;PageCreateButton/&gt;\n            &lt;/div&gt;\n            &lt;PagesList hasResolved={ hasResolved } pages={ pages }/&gt;\n            &lt;Notifications /&gt;\n        &lt;/div&gt;\n    );\n}\n\nfunction SnackbarNotices() {\n    const notices = useSelect(\n        ( select ) =&gt; select( noticesStore ).getNotices(),\n        []\n    );\n    const { removeNotice } = useDispatch( noticesStore );\n    const snackbarNotices = notices.filter( ( { type } ) =&gt; type === 'snackbar' );\n\n    return (\n        &lt;SnackbarList\n            notices={ snackbarNotices }\n            className=\"components-editor-notices__snackbar\"\n            onRemove={ removeNotice }\n        /&gt;\n    );\n}\n\nfunction PagesList( { hasResolved, pages } ) {\n    if ( !hasResolved ) {\n        return &lt;Spinner/&gt;;\n    }\n    if ( !pages?.length ) {\n        return &lt;div&gt;No results&lt;/div&gt;;\n    }\n\n    return (\n        &lt;table className=\"wp-list-table widefat fixed striped table-view-list\"&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Title&lt;/td&gt;\n                    &lt;td style={ { width: 190 } }&gt;Actions&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                { pages?.map( ( page ) =&gt; (\n                    &lt;tr key={ page.id }&gt;\n                        &lt;td&gt;{ page.title.rendered }&lt;/td&gt;\n                        &lt;td&gt;\n                            &lt;div className=\"form-buttons\"&gt;\n                                &lt;PageEditButton pageId={ page.id }/&gt;\n                                &lt;DeletePageButton pageId={ page.id }/&gt;\n                            &lt;/div&gt;\n                        &lt;/td&gt;\n                    &lt;/tr&gt;\n                ) ) }\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    );\n}\n\nfunction DeletePageButton( { pageId } ) {\n    const { createSuccessNotice, createErrorNotice } = useDispatch( noticesStore );\n    // useSelect returns a list of selectors if you pass the store handle\n    // instead of a callback:\n    const { getLastEntityDeleteError } = useSelect( coreDataStore )\n    const handleDelete = async () =&gt; {\n        const success = await deleteEntityRecord( 'postType', 'page', pageId);\n        if ( success ) {\n            // Tell the user the operation succeeded:\n            createSuccessNotice( \"The page was deleted!\", {\n                type: 'snackbar',\n            } );\n        } else {\n            // We use the selector directly to get the error at this point in time.\n            // Imagine we fetched the error like this:\n            //     const { lastError } = useSelect( function() { /* ... */ } );\n            // Then, lastError would be null inside of handleDelete.\n            // Why? Because we'd refer to the version of it that was computed\n            // before the handleDelete was even called.\n            const lastError = getLastEntityDeleteError( 'postType', 'page', pageId );\n            const message = ( lastError?.message || 'There was an error.' ) + ' Please refresh the page and try again.'\n            // Tell the user how exactly the operation have failed:\n            createErrorNotice( message, {\n                type: 'snackbar',\n            } );\n        }\n    }\n\n    const { deleteEntityRecord } = useDispatch( coreDataStore );\n    const { isDeleting } = useSelect(\n        select =&gt; ( {\n            isDeleting: select( coreDataStore ).isDeletingEntityRecord( 'postType', 'page', pageId ),\n        } ),\n        [ pageId ]\n    );\n\n    return (\n        &lt;Button variant=\"primary\" onClick={ handleDelete } disabled={ isDeleting }&gt;\n            { isDeleting ? (\n                &lt;&gt;\n                    &lt;Spinner /&gt;\n                    Deleting...\n                &lt;/&gt;\n            ) : 'Delete' }\n        &lt;/Button&gt;\n    );\n}\n</code></pre>\n<h2>What&#8217;s next?</h2>\n<ul>\n<li><strong>Previous part:</strong> <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/data-basics/4-building-a-create-page-form/\">Building a <em>Create page form</em></a></li>\n<li>(optional) Review the <a href=\"https://github.com/WordPress/block-development-examples/tree/trunk/plugins/data-basics-59c8f8\">finished app</a> in the block-development-examples repository</li>\n</ul>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 140129,
    "menu_order": 34,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-141549",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141549",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 5,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141549/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 151686,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141549/revisions/151686"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/140129"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=141549"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}