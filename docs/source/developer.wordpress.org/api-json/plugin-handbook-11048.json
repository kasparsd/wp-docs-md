{
    "id": 11048,
    "date": "2014-09-24T00:45:47",
    "date_gmt": "2014-09-24T00:45:47",
    "guid": {
        "rendered": "http://developer.wordpress.org/?post_type=plugin-handbook&#038;p=11048"
    },
    "modified": "2022-11-17T06:49:37",
    "modified_gmt": "2022-11-17T06:49:37",
    "slug": "managing-post-metadata",
    "status": "publish",
    "type": "plugin-handbook",
    "link": "https://developer.wordpress.org/plugins/metadata/managing-post-metadata/",
    "title": {
        "rendered": "Managing Post Metadata"
    },
    "content": {
        "rendered": "\n<h2 class=\"wp-block-heading\">Adding Metadata</h2>\n\n\n\n<p>Adding metadata can be done quite easily with <a href=\"https://developer.wordpress.org/reference/functions/add_post_meta/\" rel=\"function\">add_post_meta()</a> . The function accepts a <code>post_id</code>, a <code>meta_key</code>, a <code>meta_value</code>, and a <code>unique</code> flag.</p>\n\n\n\n<p>The <code>meta_key</code> is how your plugin will reference the meta value elsewhere in your code. Something like <code>mycrazymetakeyname</code> would work, however a prefix related to your plugin or theme followed by a description of the key would be more useful. <code>wporg_featured_menu</code> might be a good one. It should be noted that the same <code>meta_key</code> may be used multiple times to store variations of the metadata (see the unique flag below).</p>\n\n\n\n<p>The <code>meta_value</code> can be a string, integer, or an array. If it&#8217;s an array, it will be automatically serialized before being stored in the database.</p>\n\n\n\n<p>The <code>unique</code> flag allows you to declare whether this key should be unique. A <strong>non</strong> unique key is something a post can have multiple variations of, like price.<br>If you only ever want <strong>one</strong> price for a post, you should flag it <code>unique</code> and the <code>meta_key</code> will have one value only.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Updating Metadata</h2>\n\n\n\n<p>If a key already exists and you want to update it, use <a href=\"https://developer.wordpress.org/reference/functions/update_post_meta/\" rel=\"function\">update_post_meta()</a> . If you use this function and the key does <strong>NOT</strong> exist, then it will create it, as if you&#8217;d used <a href=\"https://developer.wordpress.org/reference/functions/add_post_meta/\" rel=\"function\">add_post_meta()</a> .</p>\n\n\n\n<p>Similar to <a href=\"https://developer.wordpress.org/reference/functions/add_post_meta/\" rel=\"function\">add_post_meta()</a> , the function accepts a <code>post_id</code>, a <code>meta_key</code>, and <code>meta_value</code>. It also accepts an optional <code>prev_value</code> \u2013 which, if specified, will cause the function to only update existing metadata entries with this value. If it isn&#8217;t provided, the function defaults to updating all entries.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Deleting Metadata</h2>\n\n\n\n<p><a href=\"https://developer.wordpress.org/reference/functions/delete_post_meta/\" rel=\"function\">delete_post_meta()</a>  takes a <code>post_id</code>, a <code>meta_key</code>, and optionally <code>meta_value</code>. It does exactly what the name suggests.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Character Escaping</h2>\n\n\n\n<p>Post meta values are passed through the <a href=\"http://php.net/manual/en/function.stripslashes.php\">stripslashes()</a> function upon being stored, so you will need to be careful when passing in values (such as JSON) that might include escaped characters.</p>\n\n\n\n<p>Consider the JSON value <code>{\"key\":\"value with \\\"escaped quotes\\\"\"}</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">$escaped_json = '{\"key\":\"value with \\\"escaped quotes\\\"\"}';\nupdate_post_meta( $id, 'escaped_json', $escaped_json );\n$broken = get_post_meta( $id, 'escaped_json', true );\n/*\n$broken, after stripslashes(), ends up unparsable:\n{\"key\":\"value with \"escaped quotes\"\"}\n*/</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">Workaround</h3>\n\n\n\n<p>By adding one more level of  escaping using the function <a href=\"https://developer.wordpress.org/reference/functions/wp_slash/\" rel=\"function\">wp_slash()</a>  (introduced in WP 3.6), you can compensate for the call to <a href=\"http://php.net/manual/en/function.stripslashes.php\">stripslashes()</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">$escaped_json = '{\"key\":\"value with \\\"escaped quotes\\\"\"}';\nupdate_post_meta( $id, 'double_escaped_json', wp_slash( $escaped_json ) );\n$fixed = get_post_meta( $id, 'double_escaped_json', true );\n/*\n$fixed, after stripslashes(), ends up as desired:\n{\"key\":\"value with \\\"escaped quotes\\\"\"}\n*/</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Hidden Custom Fields</h2>\n\n\n\n<p>If you are a plugin or theme developer and you are planning to use custom fields to store parameters, it is important to note that WordPress will not show custom fields which have <code>meta_key</code> starting with an &#8220;_&#8221; (underscore) in the custom fields list on the post edit screen or when using the <a href=\"https://developer.wordpress.org/reference/functions/the_meta/\" rel=\"function\">the_meta()</a>  template function.</p>\n\n\n\n<p>This can be useful in order to show these custom fields in an unusual way by using the <a href=\"https://developer.wordpress.org/reference/functions/add_meta_box/\" rel=\"function\">add_meta_box()</a>  function.</p>\n\n\n\n<p>The example below will add a unique custom field with the <code>meta_key</code> name &#8216;_color&#8217; and the <code>meta_value</code> of &#8216;red&#8217; but this custom field will not display in the post edit screen:</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">add_post_meta( 68, '_color', 'red', true );</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">Hidden Arrays</h3>\n\n\n\n<p>In addition, if the <code>meta_value</code> is an array, it will not be displayed on the page edit screen, even if you don&#8217;t prefix the <code>meta_key</code> name with an underscore.</p>\n",
        "protected": false
    },
    "author": 12560283,
    "featured_media": 0,
    "parent": 11046,
    "menu_order": 0,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-11048",
        "plugin-handbook",
        "type-plugin-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/11048",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/plugin-handbook"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/users/12560283"
            }
        ],
        "version-history": [
            {
                "count": 27,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/11048/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 152202,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/11048/revisions/152202"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/11046"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=11048"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}