{
    "id": 151368,
    "date": "2023-12-19T19:25:01",
    "date_gmt": "2023-12-19T19:25:01",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/getting-started/fundamentals/markup-representation-block/"
    },
    "modified": "2024-02-06T14:39:35",
    "modified_gmt": "2024-02-06T14:39:35",
    "slug": "markup-representation-block",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/getting-started/fundamentals/markup-representation-block/",
    "title": {
        "rendered": "Markup representation of a block"
    },
    "content": {
        "rendered": "<p>Blocks are stored in the database or within HTML templates using a unique <a href=\"https://developer.wordpress.org/block-editor/explanations/architecture/key-concepts/#data-and-attributes\">HTML-based syntax</a>, distinguished by HTML comments that serve as clear block delimiters. This ensures that block markup is technically valid HTML.</p>\n<p>Here are a few guidelines for the markup that defines a block:</p>\n<ul>\n<li>Core blocks begin with the <code>wp:</code> prefix, followed by the block name (e.g., <code>wp:image</code>). Notably, the <code>core</code> namespace is omitted.</li>\n<li>Custom blocks begin with the <code>wp:</code> prefix, followed by the block namespace and name (e.g., <code>wp:namespace/name</code>).</li>\n<li>The comment can be a single line, self-closing, or wrapper for HTML content.</li>\n<li>Block settings and attributes are stored as a JSON object inside the block comment.</li>\n</ul>\n<p>The following is the simplified markup representation of an Image block:</p>\n<pre><code class=\"language-html\">&lt;!-- wp:image {\"sizeSlug\":\"large\"} --&gt;\n&lt;figure class=\"wp-block-image size-large\"&gt;\n    &lt;img src=\"source.jpg\" alt=\"\" /&gt;\n&lt;/figure&gt;\n&lt;!-- /wp:image --&gt;\n</code></pre>\n<p>The markup for a block is crucial both in the Block Editor and for displaying the block on the front end:</p>\n<ul>\n<li>WordPress analyzes the block&#8217;s markup within the Editor to extract its data and present the editable version to the user.</li>\n<li>On the front end, WordPress again parses the markup to extract data and render the final HTML output.</li>\n</ul>\n<div class=\"callout callout-tip\">\n    Refer to the <a href=\"https://developer.wordpress.org/block-editor/explanations/architecture/data-flow/\">Data Flow</a> article for a more in-depth look at how block data is parsed in WordPress.\n</div>\n<p>When a block is saved, the <code>save</code> function\u2014defined when the <a href=\"https://developer.wordpress.org/block-editor/getting-started/fundamentals/registration-of-a-block/#registration-of-the-block-with-javascript-client-side\">block is registered in the client</a>\u2014is executed to generate the markup stored in the database, wrapped in block delimiter comments. For dynamically rendered blocks, which typically set <code>save</code> to <code>null</code>, only a placeholder comment with block attributes is saved.</p>\n<p>Here is the markup representation of a dynamically rendered block (<code>save</code> = <code>null</code>). Notice there is no HTML markup besides the comment.</p>\n<pre><code class=\"language-html\">&lt;!-- wp:latest-posts {\"postsToShow\":4,\"displayPostDate\":true} /--&gt;\n</code></pre>\n<p>When a block has a <code>save</code> function, the Block Editor checks that the markup created by the <code>save</code> function is identical to the block&#8217;s markup saved to the database:</p>\n<ul>\n<li>Discrepancies will trigger a <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#validation\">validation error</a>, often due to changes in the <code>save</code> function&#8217;s output.</li>\n<li>Developers can address potential validation issues by implementing <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-deprecation/\">block deprecations</a> to account for changes.</li>\n</ul>\n<p>As the example above shows, the stored markup is minimal for dynamically rendered blocks. Generally, this is just a delimiter comment containing block attributes, which is not subject to the Block Editor&#8217;s validation. This approach reflects the dynamic nature of these blocks, where the actual HTML is generated server-side and is not stored in the database.</p>\n<h2>Additional resources</h2>\n<ul>\n<li><a href=\"https://developer.wordpress.org/block-editor/explanations/architecture/data-flow/\">Data Flow and Data Format</a></li>\n<li><a href=\"https://developer.wordpress.org/news/2023/02/27/static-vs-dynamic-blocks-whats-the-difference/\">Static vs. dynamic blocks: What\u2019s the difference?</a> | Developer Blog</li>\n<li><a href=\"https://developer.wordpress.org/news/2023/03/10/block-deprecation-a-tutorial/\">Block deprecation \u2013 a tutorial</a> | Developer Blog</li>\n<li><a href=\"https://developer.wordpress.org/themes/templates/introduction-to-templates/#block-markup\">Introduction to Templates &gt; Block markup</a> | Theme Handbook</li>\n</ul>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 150294,
    "menu_order": 15,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-151368",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/151368",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 5,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/151368/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 152192,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/151368/revisions/152192"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/150294"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=151368"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}