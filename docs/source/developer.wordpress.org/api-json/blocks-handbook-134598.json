{
    "id": 134598,
    "date": "2021-03-09T08:38:24",
    "date_gmt": "2021-03-09T08:38:24",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-server-side-render/"
    },
    "modified": "2025-07-29T03:45:49",
    "modified_gmt": "2025-07-29T03:45:49",
    "slug": "packages-server-side-render",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-server-side-render/",
    "title": {
        "rendered": "@wordpress/server-side-render"
    },
    "content": {
        "rendered": "<p>ServerSideRender is a component used for server-side rendering a preview of dynamic blocks to display in the editor. Server-side rendering in a block&#8217;s <code>edit</code> function should be limited to blocks that are heavily dependent on existing PHP rendering logic that is heavily intertwined with data, particularly when there are no endpoints available.</p>\n<p>ServerSideRender may also be used when a legacy block is provided as a backward compatibility measure, rather than needing to re-write the deprecated code that the block may depend on.</p>\n<p>ServerSideRender should be regarded as a fallback or legacy mechanism, it is not appropriate for developing new features against.</p>\n<p>New blocks should be built in conjunction with any necessary REST API endpoints, so that JavaScript can be used for rendering client-side in the <code>edit</code> function. This gives the best user experience, instead of relying on using the PHP <code>render_callback</code>. The logic necessary for rendering should be included in the endpoint, so that both the client-side JavaScript and server-side PHP logic should require a minimal amount of differences.</p>\n<blockquote><p>\n  This package is meant to be used only with WordPress core. Feel free to use it in your own project but please keep in mind that it might never get fully documented.\n</p></blockquote>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/server-side-render --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>default</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> Use <code>ServerSideRender</code> non-default export instead.\n</p></blockquote>\n<p>A compatibility layer for the <code>ServerSideRender</code> component when used with <code>wp</code> global namespace.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import ServerSideRender from '@wordpress/server-side-render';\n</code></pre>\n<h3>ServerSideRender</h3>\n<p>A component that renders server-side content for blocks.</p>\n<p>Note: URL query will include the current post ID when applicable. This is useful for blocks that depend on the context of the current post for rendering.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-jsx\">import { ServerSideRender } from '@wordpress/server-side-render';\n// Legacy import for WordPress 6.8 and earlier\n// import { default as ServerSideRender } from '@wordpress/server-side-render';\n\nfunction Example() {\n    return (\n        &lt;ServerSideRender\n            block=\"core/archives\"\n            attributes={ { showPostCounts: true } }\n            urlQueryArgs={ { customArg: 'value' } }\n            className=\"custom-class\"\n        /&gt;\n    );\n}\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>props</em> <code>Object</code>: Component props.</li>\n<li><em>props.block</em> <code>string</code>: The identifier of the block to be serverside rendered.</li>\n<li><em>props.attributes</em> <code>Object</code>: The block attributes to be sent to the server for rendering.</li>\n<li><em>props.className</em> <code>[string]</code>: Additional classes to apply to the wrapper element.</li>\n<li><em>props.httpMethod</em> <code>[string]</code>: The HTTP method to use (&#8216;GET&#8217; or &#8216;POST&#8217;). Default is &#8216;GET&#8217;</li>\n<li><em>props.urlQueryArgs</em> <code>[Object]</code>: Additional query arguments to append to the request URL.</li>\n<li><em>props.skipBlockSupportAttributes</em> <code>[boolean]</code>: Whether to remove block support attributes before sending.</li>\n<li><em>props.EmptyResponsePlaceholder</em> <code>[Function]</code>: Component rendered when the API response is empty.</li>\n<li><em>props.ErrorResponsePlaceholder</em> <code>[Function]</code>: Component rendered when the API response is an error.</li>\n<li><em>props.LoadingResponsePlaceholder</em> <code>[Function]</code>: Component rendered while the API request is loading.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>JSX.Element</code>: The rendered server-side content.</li>\n</ul>\n<h3>useServerSideRender</h3>\n<p>A hook for server-side rendering a preview of dynamic blocks to display in the editor.</p>\n<p>Handles fetching server-rendered previews for blocks, managing loading states, and automatically debouncing requests to prevent excessive API calls. It supports both GET and POST requests, with POST requests used for larger attribute payloads.</p>\n<p><em>Usage</em></p>\n<p>Basic usage:</p>\n<pre><code class=\"language-jsx\">import { RawHTML } from '@wordpress/element';\nimport { useServerSideRender } from '@wordpress/server-side-render';\n\nfunction MyServerSideRender( { attributes, block } ) {\n    const { content, status, error } = useServerSideRender( {\n        attributes,\n        block,\n    } );\n\n    if ( status === 'loading' ) {\n        return &lt;div&gt;Loading...&lt;/div&gt;;\n    }\n\n    if ( status === 'error' ) {\n        return &lt;div&gt;Error: { error }&lt;/div&gt;;\n    }\n\n    return &lt;RawHTML&gt;{ content }&lt;/RawHTML&gt;;\n}\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>args</em> <code>Object</code>: The hook configuration object.</li>\n<li><em>args.attributes</em> <code>Object</code>: The block attributes to be sent to the server for rendering.</li>\n<li><em>args.block</em> <code>string</code>: The identifier of the block to be serverside rendered. Example: &#8216;core/archives&#8217;.</li>\n<li><em>args.skipBlockSupportAttributes</em> <code>[boolean]</code>: Whether to remove block support attributes before sending.</li>\n<li><em>args.httpMethod</em> <code>[string]</code>: The HTTP method to use (&#8216;GET&#8217; or &#8216;POST&#8217;). Default is &#8216;GET&#8217;.</li>\n<li><em>args.urlQueryArgs</em> <code>[Object]</code>: Additional query arguments to append to the request URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ServerSideRenderResponse</code>: The server-side render response object.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Output</h2>\n<p>Output uses the block&#8217;s <code>render_callback</code> function, set when defining the block.</p>\n<h2>API Endpoint</h2>\n<p>The API endpoint for getting the output for ServerSideRender is <code>/wp/v2/block-renderer/:block</code>. It will use the block&#8217;s <code>render_callback</code> method.</p>\n<p>If you pass <code>attributes</code> to <code>ServerSideRender</code>, the block must also be registered and have its attributes defined in PHP.</p>\n<pre><code class=\"language-php\">register_block_type(\n    'core/archives',\n    array(\n        'api_version' =&gt; 3,\n        'attributes'      =&gt; array(\n            'showPostCounts'    =&gt; array(\n                'type'      =&gt; 'boolean',\n                'default'   =&gt; false,\n            ),\n            'displayAsDropdown' =&gt; array(\n                'type'      =&gt; 'boolean',\n                'default'   =&gt; false,\n            ),\n        ),\n        'render_callback' =&gt; 'render_block_core_archives',\n    )\n);\n</code></pre>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 322,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134598",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134598",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 17,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134598/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 159147,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134598/revisions/159147"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134598"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}