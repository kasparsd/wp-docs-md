{
    "id": 134602,
    "date": "2021-03-09T08:38:24",
    "date_gmt": "2021-03-09T08:38:24",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-url/"
    },
    "modified": "2025-07-18T10:31:00",
    "modified_gmt": "2025-07-18T10:31:00",
    "slug": "packages-url",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-url/",
    "title": {
        "rendered": "@wordpress/url"
    },
    "content": {
        "rendered": "<p>A collection of utilities to manipulate URLs.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/url --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>Usage</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>addQueryArgs</h3>\n<p>Appends arguments as querystring to the provided URL. If the URL already includes query arguments, the arguments are merged with (and take precedent over) the existing set.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const newURL = addQueryArgs( 'https://google.com', { q: 'test' } ); // https://google.com/?q=test\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: URL to which arguments should be appended. If omitted, only the resulting querystring is returned.</li>\n<li><em>args</em> <code>Record&lt; string, unknown &gt;</code>: Query arguments to apply to URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: URL with arguments applied.</li>\n</ul>\n<h3>buildQueryString</h3>\n<p>Generates URL-encoded query string using input query data.</p>\n<p>It is intended to behave equivalent as PHP&#8217;s <code>http_build_query</code>, configured with encoding type PHP_QUERY_RFC3986 (spaces as <code>%20</code>).</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const queryString = buildQueryString( {\n    simple: 'is ok',\n    arrays: [ 'are', 'fine', 'too' ],\n    objects: {\n        evenNested: {\n            ok: 'yes',\n        },\n    },\n} );\n// \"simple=is%20ok&amp;arrays%5B0%5D=are&amp;arrays%5B1%5D=fine&amp;arrays%5B2%5D=too&amp;objects%5BevenNested%5D%5Bok%5D=yes\"\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>data</em> <code>Record&lt; string, unknown &gt;</code>: Data to encode.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Query string.</li>\n</ul>\n<h3>cleanForSlug</h3>\n<p>Performs some basic cleanup of a string for use as a post slug.</p>\n<p>This replicates some of what <code>sanitize_title_with_dashes()</code> does in WordPress core, but is only designed to approximate what the slug will be.</p>\n<p>Converts Latin-1 Supplement and Latin Extended-A letters to basic Latin letters. Removes combining diacritical marks. Converts whitespace, periods, and forward slashes to hyphens. Removes any remaining non-word characters except hyphens. Converts remaining string to lowercase. It does not account for octets, HTML entities, or other encoded characters.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>string</em> <code>string</code>: Title or slug to be processed.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Processed string.</li>\n</ul>\n<h3>filterURLForDisplay</h3>\n<p>Returns a URL for display.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const displayUrl = filterURLForDisplay(\n    'https://www.wordpress.org/gutenberg/'\n); // wordpress.org/gutenberg\nconst imageUrl = filterURLForDisplay(\n    'https://www.wordpress.org/wp-content/uploads/img.png',\n    20\n); // \u2026ent/uploads/img.png\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: Original URL.</li>\n<li><em>maxLength</em> <code>number | null</code>: URL length.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Displayed URL.</li>\n</ul>\n<h3>getAuthority</h3>\n<p>Returns the authority part of the URL.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const authority1 = getAuthority( 'https://wordpress.org/help/' ); // 'wordpress.org'\nconst authority2 = getAuthority( 'https://localhost:8080/test/' ); // 'localhost:8080'\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The full URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string | void</code>: The authority part of the URL.</li>\n</ul>\n<h3>getFilename</h3>\n<p>Returns the filename part of the URL.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const filename1 = getFilename( 'http://localhost:8080/this/is/a/test.jpg' ); // 'test.jpg'\nconst filename2 = getFilename( '/this/is/a/test.png' ); // 'test.png'\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The full URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string | void</code>: The filename part of the URL.</li>\n</ul>\n<h3>getFragment</h3>\n<p>Returns the fragment part of the URL.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const fragment1 = getFragment(\n    'http://localhost:8080/this/is/a/test?query=true#fragment'\n); // '#fragment'\nconst fragment2 = getFragment(\n    'https://wordpress.org#another-fragment?query=true'\n); // '#another-fragment'\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The full URL</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string | void</code>: The fragment part of the URL.</li>\n</ul>\n<h3>getPath</h3>\n<p>Returns the path part of the URL.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const path1 = getPath( 'http://localhost:8080/this/is/a/test?query=true' ); // 'this/is/a/test'\nconst path2 = getPath( 'https://wordpress.org/help/faq/' ); // 'help/faq'\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The full URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string | void</code>: The path part of the URL.</li>\n</ul>\n<h3>getPathAndQueryString</h3>\n<p>Returns the path part and query string part of the URL.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const pathAndQueryString1 = getPathAndQueryString(\n    'http://localhost:8080/this/is/a/test?query=true'\n); // '/this/is/a/test?query=true'\nconst pathAndQueryString2 = getPathAndQueryString(\n    'https://wordpress.org/help/faq/'\n); // '/help/faq'\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The full URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The path part and query string part of the URL.</li>\n</ul>\n<h3>getProtocol</h3>\n<p>Returns the protocol part of the URL.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const protocol1 = getProtocol( 'tel:012345678' ); // 'tel:'\nconst protocol2 = getProtocol( 'https://wordpress.org' ); // 'https:'\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The full URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string | void</code>: The protocol part of the URL.</li>\n</ul>\n<h3>getQueryArg</h3>\n<p>Returns a single query argument of the url</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const foo = getQueryArg( 'https://wordpress.org?foo=bar&amp;bar=baz', 'foo' ); // bar\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: URL.</li>\n<li><em>arg</em> <code>string</code>: Query arg name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>QueryArgParsed | undefined</code>: Query arg value.</li>\n</ul>\n<h3>getQueryArgs</h3>\n<p>Returns an object of query arguments of the given URL. If the given URL is invalid or has no querystring, an empty object is returned.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const foo = getQueryArgs( 'https://wordpress.org?foo=bar&amp;bar=baz' );\n// { \"foo\": \"bar\", \"bar\": \"baz\" }\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>QueryArgs</code>: Query args object.</li>\n</ul>\n<h3>getQueryString</h3>\n<p>Returns the query string part of the URL.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const queryString = getQueryString(\n    'http://localhost:8080/this/is/a/test?query=true#fragment'\n); // 'query=true'\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The full URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string | void</code>: The query string part of the URL.</li>\n</ul>\n<h3>hasQueryArg</h3>\n<p>Determines whether the URL contains a given query arg.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const hasBar = hasQueryArg( 'https://wordpress.org?foo=bar&amp;bar=baz', 'bar' ); // true\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: URL.</li>\n<li><em>arg</em> <code>string</code>: Query arg name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether or not the URL contains the query arg.</li>\n</ul>\n<h3>isEmail</h3>\n<p>Determines whether the given string looks like an email.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const isEmail = isEmail( 'hello@wordpress.org' ); // true\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>email</em> <code>string</code>: The string to scrutinise.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether or not it looks like an email.</li>\n</ul>\n<h3>isPhoneNumber</h3>\n<p>Determines whether the given string looks like a phone number.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const isPhoneNumber = isPhoneNumber( '+1 (555) 123-4567' ); // true\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>phoneNumber</em> <code>string</code>: The string to scrutinize.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether or not it looks like a phone number.</li>\n</ul>\n<h3>isURL</h3>\n<p>Determines whether the given string looks like a URL.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://url.spec.whatwg.org/\">https://url.spec.whatwg.org/</a></li>\n<li><a href=\"https://url.spec.whatwg.org/#valid-url-string\">https://url.spec.whatwg.org/#valid-url-string</a></li>\n</ul>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const isURL = isURL( 'https://wordpress.org' ); // true\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The string to scrutinise.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether or not it looks like a URL.</li>\n</ul>\n<h3>isValidAuthority</h3>\n<p>Checks for invalid characters within the provided authority.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const isValid = isValidAuthority( 'wordpress.org' ); // true\nconst isNotValid = isValidAuthority( 'wordpress#org' ); // false\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>authority</em> <code>string</code>: A string containing the URL authority.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the argument contains a valid authority.</li>\n</ul>\n<h3>isValidFragment</h3>\n<p>Checks for invalid characters within the provided fragment.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const isValid = isValidFragment( '#valid-fragment' ); // true\nconst isNotValid = isValidFragment( '#invalid-#fragment' ); // false\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>fragment</em> <code>string</code>: The url fragment.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the argument contains a valid fragment.</li>\n</ul>\n<h3>isValidPath</h3>\n<p>Checks for invalid characters within the provided path.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const isValid = isValidPath( 'test/path/' ); // true\nconst isNotValid = isValidPath( '/invalid?test/path/' ); // false\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>path</em> <code>string</code>: The URL path.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the argument contains a valid path</li>\n</ul>\n<h3>isValidProtocol</h3>\n<p>Tests if a url protocol is valid.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const isValid = isValidProtocol( 'https:' ); // true\nconst isNotValid = isValidProtocol( 'https :' ); // false\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>protocol</em> <code>string</code>: The url protocol.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the argument is a valid protocol (e.g. http&#058;, tel:).</li>\n</ul>\n<h3>isValidQueryString</h3>\n<p>Checks for invalid characters within the provided query string.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const isValid = isValidQueryString( 'query=true&amp;another=false' ); // true\nconst isNotValid = isValidQueryString( 'query=true?another=false' ); // false\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>queryString</em> <code>string</code>: The query string.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the argument contains a valid query string.</li>\n</ul>\n<h3>normalizePath</h3>\n<p>Given a path, returns a normalized path where equal query parameter values will be treated as identical, regardless of order they appear in the original text.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>path</em> <code>string</code>: Original path.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Normalized path.</li>\n</ul>\n<h3>prependHTTP</h3>\n<p>Prepends &#8220;http&#058;//&#8221; to a url, if it looks like something that is meant to be a TLD.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const actualURL = prependHTTP( 'wordpress.org' ); // http://wordpress.org\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The URL to test.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The updated URL.</li>\n</ul>\n<h3>prependHTTPS</h3>\n<p>Prepends &#8220;https&#058;//&#8221; to a url, if it looks like something that is meant to be a TLD.</p>\n<p>Note: this will not replace &#8220;http&#058;//&#8221; with &#8220;&lt;https://&#8221;&gt;.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const actualURL = prependHTTPS( 'wordpress.org' ); // https://wordpress.org\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The URL to test.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The updated URL.</li>\n</ul>\n<h3>removeQueryArgs</h3>\n<p>Removes arguments from the query string of the url</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const newUrl = removeQueryArgs(\n    'https://wordpress.org?foo=bar&amp;bar=baz&amp;baz=foobar',\n    'foo',\n    'bar'\n); // https://wordpress.org?baz=foobar\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: URL.</li>\n<li><em>args</em> <code>string[]</code>: Query Args.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Updated URL.</li>\n</ul>\n<h3>safeDecodeURI</h3>\n<p>Safely decodes a URI with <code>decodeURI</code>. Returns the URI unmodified if <code>decodeURI</code> throws an error.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const badUri = safeDecodeURI( '%z' ); // does not throw an Error, simply returns '%z'\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>uri</em> <code>string</code>: URI to decode.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Decoded URI if possible.</li>\n</ul>\n<h3>safeDecodeURIComponent</h3>\n<p>Safely decodes a URI component with <code>decodeURIComponent</code>. Returns the URI component unmodified if <code>decodeURIComponent</code> throws an error.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>uriComponent</em> <code>string</code>: URI component to decode.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Decoded URI component if possible.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 331,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134602",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134602",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 16,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134602/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 159134,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134602/revisions/159134"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134602"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}