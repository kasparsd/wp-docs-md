{
    "id": 134573,
    "date": "2021-03-09T08:38:23",
    "date_gmt": "2021-03-09T08:38:23",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-puppeteer-axe/"
    },
    "modified": "2025-07-08T10:15:57",
    "modified_gmt": "2025-07-08T10:15:57",
    "slug": "packages-jest-puppeteer-axe",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-jest-puppeteer-axe/",
    "title": {
        "rendered": "@wordpress/jest-puppeteer-axe"
    },
    "content": {
        "rendered": "<p><a href=\"https://www.deque.com/axe/\">Axe</a> (the Accessibility Engine) API integration with <a href=\"https://jestjs.io/\">Jest</a> and <a href=\"https://pptr.dev/\">Puppeteer</a>.</p>\n<p>Defines Jest async matcher to check whether a given Puppeteer&#8217;s page instance passes <a href=\"https://www.deque.com/axe/\">Axe</a> accessibility tests.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/jest-puppeteer-axe --save-dev\n</code></pre>\n<p><strong>Note</strong>: This package requires Node.js version with long-term support status (check <a href=\"https://nodejs.org/en/about/previous-releases\">Active LTS or Maintenance LTS releases</a>). It is not compatible with older versions.</p>\n<h3>Setup</h3>\n<p>The simplest setup is to use Jest&#8217;s <code>setupFilesAfterEnv</code> config option:</p>\n<pre><code class=\"language-js\">\"jest\": {\n  \"setupFilesAfterEnv\": [\n    \"@wordpress/jest-puppeteer-axe\"\n  ]\n},\n</code></pre>\n<h2>Usage</h2>\n<p>In your Jest test suite add the following code to the test&#8217;s body:</p>\n<pre><code class=\"language-js\">test( 'checks the test page with Axe', async () =&gt; {\n    // First, run some code which loads the content of the page.\n    loadTestPage();\n\n    await expect( page ).toPassAxeTests();\n} );\n</code></pre>\n<p>It is also possible to pass optional params which allow Axe API to perform customized checks:</p>\n<ul>\n<li><code>include</code> &#8211; CSS selector(s) to add the list of elements to include in analysis.</li>\n<li><code>exclude</code> &#8211; CSS selector(s) to add the list of elements to exclude from analysis.</li>\n<li><code>disabledRules</code> &#8211; the list of <a href=\"https://github.com/dequelabs/axe-core/blob/HEAD/doc/rule-descriptions.md\">Axe rules</a> to skip from verification.</li>\n<li><code>options</code> &#8211; a flexible way to configure how Axe run operates. See <a href=\"https://github.com/dequelabs/axe-core/blob/HEAD/doc/API.md#options-parameter\">axe-core API documentation</a> for information on the object structure.</li>\n<li><code>config</code> &#8211; Axe configuration object. See <a href=\"https://github.com/dequelabs/axe-core/blob/HEAD/doc/API.md#api-name-axeconfigure\">axe-core API documentation</a> for documentation on the object structure.</li>\n</ul>\n<pre><code class=\"language-js\">test( 'checks the test component with Axe excluding some button', async () =&gt; {\n    // First, run some code which loads the content of the page.\n    loadPageWithTestComponent();\n\n    await expect( page ).toPassAxeTests( {\n        include: '.test-component',\n        exclude: '.some-button',\n        disabledRules: [ 'aria-allowed-role' ],\n        options: { iframes: false },\n        config: { reporter: 'raw' },\n    } );\n} );\n</code></pre>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 295,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134573",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134573",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 9,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134573/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 153845,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134573/revisions/153845"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134573"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}