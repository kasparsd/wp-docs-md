{
    "id": 141747,
    "date": "2022-07-26T12:54:48",
    "date_gmt": "2022-07-26T12:54:48",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-widgets/"
    },
    "modified": "2025-07-08T10:15:34",
    "modified_gmt": "2025-07-08T10:15:34",
    "slug": "data-core-edit-widgets",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-edit-widgets/",
    "title": {
        "rendered": "Edit Widgets"
    },
    "content": {
        "rendered": "<p>Namespace: <code>core/edit-widgets</code>.</p>\n<h2>Selectors</h2>\n<p><!-- START TOKEN(Autogenerated selectors|../../../packages/edit-widgets/src/store/selectors.js) --></p>\n<h3>canInsertBlockInWidgetArea</h3>\n<p>Returns true if a block can be inserted into a widget area.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Array</code>: The open state of the widget areas.</li>\n<li><em>blockName</em> <code>string</code>: The name of the block being inserted.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the block can be inserted in a widget area.</li>\n</ul>\n<h3>getEditedWidgetAreas</h3>\n<p>Returns all edited widget area entity records.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object[]</code>: List of edited widget area entity records.</li>\n</ul>\n<h3>getIsWidgetAreaOpen</h3>\n<p>Gets whether the widget area is opened.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Array</code>: The open state of the widget areas.</li>\n<li><em>clientId</em> <code>string</code>: The clientId of the widget area.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the widget area is open.</li>\n</ul>\n<h3>getParentWidgetAreaBlock</h3>\n<p>Given a child client id, returns the parent widget area block.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>clientId</em> <code>string</code>: The client id of a block in a widget area.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>WPBlock</code>: The widget area block.</li>\n</ul>\n<h3>getReferenceWidgetBlocks</h3>\n<p>Returns all blocks representing reference widgets.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>referenceWidgetName</em> <code>string</code>: Optional. If given, only reference widgets with this name will be returned.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: List of all blocks representing reference widgets</li>\n</ul>\n<h3>getWidget</h3>\n<p>Returns API widget data for a particular widget ID.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>id</em> <code>number</code>: Widget ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: API widget data for a particular widget ID.</li>\n</ul>\n<h3>getWidgetAreaForWidgetId</h3>\n<p>Returns widgetArea containing a block identify by given widgetId</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>widgetId</em> <code>string</code>: The ID of the widget.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Containing widget area.</li>\n</ul>\n<h3>getWidgetAreas</h3>\n<p>Returns all API widget areas.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object[]</code>: API List of widget areas.</li>\n</ul>\n<h3>getWidgets</h3>\n<p>Returns all API widgets.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object[]</code>: API List of widgets.</li>\n</ul>\n<h3>isInserterOpened</h3>\n<p>Returns true if the inserter is opened.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global application state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the inserter is opened.</li>\n</ul>\n<h3>isListViewOpened</h3>\n<p>Returns true if the list view is opened.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global application state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the list view is opened.</li>\n</ul>\n<h3>isSavingWidgetAreas</h3>\n<p>Returns true if any widget area is currently being saved.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if any widget area is currently being saved. False otherwise.</li>\n</ul>\n<h3>isWidgetSavingLocked</h3>\n<p>Returns whether widget saving is locked.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-jsx\">import { __ } from '@wordpress/i18n';\nimport { store as widgetStore } from '@wordpress/edit-widgets';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () =&gt; {\n    const isSavingLocked = useSelect(\n        ( select ) =&gt; select( widgetStore ).isWidgetSavingLocked(),\n        []\n    );\n\n    return isSavingLocked ? (\n        &lt;p&gt;{ __( 'Widget saving is locked' ) }&lt;/p&gt;\n    ) : (\n        &lt;p&gt;{ __( 'Widget saving is not locked' ) }&lt;/p&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global application state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Is locked.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated selectors|../../../packages/edit-widgets/src/store/selectors.js) --></p>\n<h2>Actions</h2>\n<p><!-- START TOKEN(Autogenerated actions|../../../packages/edit-widgets/src/store/actions.js) --></p>\n<h3>closeGeneralSidebar</h3>\n<p>Returns an action object signalling that the user closed the sidebar.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action creator.</li>\n</ul>\n<h3>lockWidgetSaving</h3>\n<p>Returns an action object used to signal that widget saving is locked.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as widgetStore } from '@wordpress/edit-widgets';\nimport { useDispatch } from '@wordpress/data';\n\nconst ExampleComponent = () =&gt; {\n    const { lockWidgetSaving } = useDispatch( widgetStore );\n    return (\n        &lt;Button onClick={ () =&gt; lockWidgetSaving( 'lockName' ) }&gt;\n            { __( 'Lock Widget Saving' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>lockName</em> <code>string</code>: The lock name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object</li>\n</ul>\n<h3>moveBlockToWidgetArea</h3>\n<p>Action that handles moving a block between widget areas</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>clientId</em> <code>string</code>: The clientId of the block to move.</li>\n<li><em>widgetAreaId</em> <code>string</code>: The id of the widget area to move the block to.</li>\n</ul>\n<h3>persistStubPost</h3>\n<p>Persists a stub post with given ID to core data store. The post is meant to be in-memory only and shouldn&#8217;t be saved via the API.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>id</em> <code>string</code>: Post ID.</li>\n<li><em>blocks</em> <code>Array</code>: Blocks the post should consist of.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: The post object.</li>\n</ul>\n<h3>saveEditedWidgetAreas</h3>\n<p>Converts all the blocks from edited widget areas into widgets, and submits a batch request to save everything at once.</p>\n<p>Creates a snackbar notice on either success or error.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Function</code>: An action creator.</li>\n</ul>\n<h3>saveWidgetArea</h3>\n<p>Converts all the blocks from a widget area specified by ID into widgets, and submits a batch request to save everything at once.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>widgetAreaId</em> <code>string</code>: ID of the widget area to process.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Function</code>: An action creator.</li>\n</ul>\n<h3>saveWidgetAreas</h3>\n<p>Converts all the blocks from specified widget areas into widgets, and submits a batch request to save everything at once.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>widgetAreas</em> <code>Object[]</code>: Widget areas to save.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Function</code>: An action creator.</li>\n</ul>\n<h3>setIsInserterOpened</h3>\n<p>Returns an action object used to open/close the inserter.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>boolean|Object</code>: Whether the inserter should be opened (true) or closed (false). To specify an insertion point, use an object.</li>\n<li><em>value.rootClientId</em> <code>string</code>: The root client ID to insert at.</li>\n<li><em>value.insertionIndex</em> <code>number</code>: The index to insert at.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>setIsListViewOpened</h3>\n<p>Returns an action object used to open/close the list view.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>isOpen</em> <code>boolean</code>: A boolean representing whether the list view should be opened or closed.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>setIsWidgetAreaOpen</h3>\n<p>Sets the open state of the widget area.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>clientId</em> <code>string</code>: The clientId of the widget area.</li>\n<li><em>isOpen</em> <code>boolean</code>: Whether the widget area should be opened.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action.</li>\n</ul>\n<h3>setWidgetAreasOpenState</h3>\n<p>Sets the open state of all the widget areas.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>widgetAreasOpenState</em> <code>Object</code>: The open states of all the widget areas.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action.</li>\n</ul>\n<h3>setWidgetIdForClientId</h3>\n<p>Sets the clientId stored for a particular widgetId.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>clientId</em> <code>number</code>: Client id.</li>\n<li><em>widgetId</em> <code>number</code>: Widget id.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action.</li>\n</ul>\n<h3>unlockWidgetSaving</h3>\n<p>Returns an action object used to signal that widget saving is unlocked.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as widgetStore } from '@wordpress/edit-widgets';\nimport { useDispatch } from '@wordpress/data';\n\nconst ExampleComponent = () =&gt; {\n    const { unlockWidgetSaving } = useDispatch( widgetStore );\n    return (\n        &lt;Button onClick={ () =&gt; unlockWidgetSaving( 'lockName' ) }&gt;\n            { __( 'Unlock Widget Saving' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>lockName</em> <code>string</code>: The lock name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated actions|../../../packages/edit-widgets/src/store/actions.js) --></p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134606,
    "menu_order": 346,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-141747",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141747",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 5,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141747/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 158956,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141747/revisions/158956"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134606"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=141747"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}