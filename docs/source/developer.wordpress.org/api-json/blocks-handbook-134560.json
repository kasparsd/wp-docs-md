{
    "id": 134560,
    "date": "2021-03-09T08:38:23",
    "date_gmt": "2021-03-09T08:38:23",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-element/"
    },
    "modified": "2025-07-08T10:15:59",
    "modified_gmt": "2025-07-08T10:15:59",
    "slug": "packages-element",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-element/",
    "title": {
        "rendered": "@wordpress/element"
    },
    "content": {
        "rendered": "<p>Element is a package that builds on top of <a href=\"https://reactjs.org/\">React</a> and provide a set of utilities to work with React components and React elements.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/element --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>Why React?</h2>\n<p>At the risk of igniting debate surrounding any single &#8220;best&#8221; front-end framework, the choice to use any tool should be motivated specifically to serve the requirements of the system. In modeling the concept of a <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/blocks/README.md\">block</a>, we observe the following technical requirements:</p>\n<ul>\n<li>An understanding of a block in terms of its underlying values (in the <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/blocks/README.md#example\">random image example</a>, a category)</li>\n<li>A means to describe the UI of a block given these values</li>\n</ul>\n<p>At its most basic, React provides a simple input / output mechanism. <strong>Given a set of inputs (&#8220;props&#8221;), a developer describes the output to be shown on the page.</strong> This is most elegantly observed in its <a href=\"https://reactjs.org/docs/components-and-props.html#functional-and-class-components\">function components</a>. React serves the role of reconciling the desired output with the current state of the page.</p>\n<p>The offerings of any framework necessarily become more complex as these requirements increase; many front-end frameworks prescribe ideas around page routing, retrieving and updating data, and managing layout. React is not immune to this, but the introduced complexity is rarely caused by React itself, but instead managing an arrangement of supporting tools. By moving these concerns out of sight to the internals of the system (WordPress core code), we can minimize the responsibilities of plugin authors to a small, clear set of touch points.</p>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>Children</h3>\n<p>Object that provides utilities for dealing with React children.</p>\n<h3>cloneElement</h3>\n<p>Creates a copy of an element with extended props.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>element</em> <code>Element</code>: Element</li>\n<li><em>props</em> <code>?Object</code>: Props to apply to cloned element</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Element</code>: Cloned element.</li>\n</ul>\n<h3>Component</h3>\n<p>A base class to create WordPress Components (Refs, state and lifecycle hooks)</p>\n<h3>concatChildren</h3>\n<p>Concatenate two or more React children objects.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>childrenArguments</em> <code>...?Object</code>: Array of children arguments (array of arrays/strings/objects) to concatenate.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: The concatenated value.</li>\n</ul>\n<h3>createContext</h3>\n<p>Creates a context object containing two components: a provider and consumer.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>defaultValue</em> <code>Object</code>: A default data stored in the context.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Context object.</li>\n</ul>\n<h3>createElement</h3>\n<p>Returns a new element of given type. Type can be either a string tag name or another function which itself returns an element.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>type</em> <code>?(string|Function)</code>: Tag name or element creator</li>\n<li><em>props</em> <code>Object</code>: Element properties, either attribute set to apply to DOM node or values to pass through to element creator</li>\n<li><em>children</em> <code>...Element</code>: Descendant elements</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Element</code>: Element.</li>\n</ul>\n<h3>createInterpolateElement</h3>\n<p>This function creates an interpolated element from a passed in string with specific tags matching how the string should be converted to an element via the conversion map value.</p>\n<p><em>Usage</em></p>\n<p>For example, for the given string:</p>\n<p>&#8220;This is a <span>string</span> with <a>a link</a> and a self-closing<br />\n tag&#8221;</p>\n<p>You would have something like this as the conversionMap value:</p>\n<pre><code class=\"language-js\">{\n    span: &lt;span /&gt;,\n    a: &lt;a href={ 'https://github.com' } /&gt;,\n    CustomComponentB: &lt;CustomComponent /&gt;,\n}\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>interpolatedString</em> <code>string</code>: The interpolation string to be parsed.</li>\n<li><em>conversionMap</em> <code>Record&lt;string, Element&gt;</code>: The map used to convert the string to a react element.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Element</code>: A wp element.</li>\n</ul>\n<h3>createPortal</h3>\n<p>Creates a portal into which a component can be rendered.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://github.com/facebook/react/issues/10309#issuecomment-318433235\">https://github.com/facebook/react/issues/10309#issuecomment-318433235</a></li>\n</ul>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>child</em> <code>import('react').ReactElement</code>: Any renderable child, such as an element, string, or fragment.</li>\n<li><em>container</em> <code>HTMLElement</code>: DOM node into which element should be rendered.</li>\n</ul>\n<h3>createRef</h3>\n<p>Returns an object tracking a reference to a rendered element via its <code>current</code> property as either a DOMElement or Element, dependent upon the type of element rendered with the ref attribute.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Ref object.</li>\n</ul>\n<h3>createRoot</h3>\n<p>Creates a new React root for the target DOM node.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react-dom/client/createRoot\">https://react.dev/reference/react-dom/client/createRoot</a></li>\n</ul>\n<p><em>Changelog</em></p>\n<p><code>6.2.0</code> Introduced in WordPress core.</p>\n<h3>findDOMNode</h3>\n<p>Finds the dom node of a React component.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>component</em> <code>import('react').ComponentType</code>: Component&#8217;s instance.</li>\n</ul>\n<h3>flushSync</h3>\n<p>Forces React to flush any updates inside the provided callback synchronously.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>callback</em> <code>Function</code>: Callback to run synchronously.</li>\n</ul>\n<h3>forwardRef</h3>\n<p>Component enhancer used to enable passing a ref to its wrapped component. Pass a function argument which receives <code>props</code> and <code>ref</code> as its arguments, returning an element using the forwarded ref. The return value is a new component which forwards its ref.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>forwarder</em> <code>Function</code>: Function passed <code>props</code> and <code>ref</code>, expected to return an element.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Component</code>: Enhanced component.</li>\n</ul>\n<h3>Fragment</h3>\n<p>A component which renders its children without any wrapping element.</p>\n<h3>hydrate</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WordPress 6.2.0. Use <code>hydrateRoot</code> instead.\n</p></blockquote>\n<p>Hydrates a given element into the target DOM node.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react-dom/hydrate\">https://react.dev/reference/react-dom/hydrate</a></li>\n</ul>\n<h3>hydrateRoot</h3>\n<p>Creates a new React root for the target DOM node and hydrates it with a pre-generated markup.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react-dom/client/hydrateRoot\">https://react.dev/reference/react-dom/client/hydrateRoot</a></li>\n</ul>\n<p><em>Changelog</em></p>\n<p><code>6.2.0</code> Introduced in WordPress core.</p>\n<h3>isEmptyElement</h3>\n<p>Checks if the provided WP element is empty.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>element</em> <code>*</code>: WP element to check.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True when an element is considered empty.</li>\n</ul>\n<h3>isValidElement</h3>\n<p>Checks if an object is a valid React Element.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>objectToCheck</em> <code>Object</code>: The object to be checked.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: true if objectToTest is a valid React Element and false otherwise.</li>\n</ul>\n<h3>lazy</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/lazy\">https://react.dev/reference/react/lazy</a></li>\n</ul>\n<h3>memo</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/memo\">https://react.dev/reference/react/memo</a></li>\n</ul>\n<h3>Platform</h3>\n<p>Component used to detect the current Platform being used. Use Platform.OS === &#8216;web&#8217; to detect if running on web environment.</p>\n<p>This is the same concept as the React Native implementation.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://reactnative.dev/docs/platform-specific-code#platform-module\">https://reactnative.dev/docs/platform-specific-code#platform-module</a> Here is an example of how to use the select method:</li>\n</ul>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { Platform } from '@wordpress/element';\n\nconst placeholderLabel = Platform.select( {\n    native: __( 'Add media' ),\n    web: __(\n        'Drag images, upload new ones or select files from your library.'\n    ),\n} );\n</code></pre>\n<h3>PureComponent</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/PureComponent\">https://react.dev/reference/react/PureComponent</a></li>\n</ul>\n<h3>RawHTML</h3>\n<p>Component used to render unescaped HTML.</p>\n<p>Note: The <code>renderElement</code> serializer will remove the <code>div</code> wrapper unless non-children props are present; typically when preparing a block for saving.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-jsx\">import { RawHTML } from '@wordpress/element';\n\nconst Component = () =&gt; (\n    &lt;RawHTML&gt;\n        &lt;h3&gt;Hello world&lt;/h3&gt;\n    &lt;/RawHTML&gt;\n);\n// Edit: &lt;div&gt;&lt;h3&gt;Hello world&lt;/h3&gt;&lt;/div&gt;\n// save: &lt;h3&gt;Hello world&lt;/h3&gt;\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>props</em> <code>RawHTMLProps</code>: Children should be a string of HTML or an array of strings. Other props will be passed through to the div wrapper.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>JSX.Element</code>: Dangerously-rendering component.</li>\n</ul>\n<h3>render</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WordPress 6.2.0. Use <code>createRoot</code> instead.\n</p></blockquote>\n<p>Renders a given element into the target DOM node.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react-dom/render\">https://react.dev/reference/react-dom/render</a></li>\n</ul>\n<h3>renderToString</h3>\n<p>Serializes a React element to string.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>element</em> <code>import('react').ReactNode</code>: Element to serialize.</li>\n<li><em>context</em> <code>[Object]</code>: Context object.</li>\n<li><em>legacyContext</em> <code>[Object]</code>: Legacy context object.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Serialized element.</li>\n</ul>\n<h3>startTransition</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/startTransition\">https://react.dev/reference/react/startTransition</a></li>\n</ul>\n<h3>StrictMode</h3>\n<p>Component that activates additional checks and warnings for its descendants.</p>\n<h3>Suspense</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/Suspense\">https://react.dev/reference/react/Suspense</a></li>\n</ul>\n<h3>switchChildrenNodeName</h3>\n<p>Switches the nodeName of all the elements in the children object.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>children</em> <code>?Object</code>: Children object.</li>\n<li><em>nodeName</em> <code>string</code>: Node name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?Object</code>: The updated children object.</li>\n</ul>\n<h3>unmountComponentAtNode</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WordPress 6.2.0. Use <code>root.unmount()</code> instead.\n</p></blockquote>\n<p>Removes any mounted element from the target DOM node.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react-dom/unmountComponentAtNode\">https://react.dev/reference/react-dom/unmountComponentAtNode</a></li>\n</ul>\n<h3>useCallback</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useCallback\">https://react.dev/reference/react/useCallback</a></li>\n</ul>\n<h3>useContext</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useContext\">https://react.dev/reference/react/useContext</a></li>\n</ul>\n<h3>useDebugValue</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useDebugValue\">https://react.dev/reference/react/useDebugValue</a></li>\n</ul>\n<h3>useDeferredValue</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useDeferredValue\">https://react.dev/reference/react/useDeferredValue</a></li>\n</ul>\n<h3>useEffect</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useEffect\">https://react.dev/reference/react/useEffect</a></li>\n</ul>\n<h3>useId</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useId\">https://react.dev/reference/react/useId</a></li>\n</ul>\n<h3>useImperativeHandle</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useImperativeHandle\">https://react.dev/reference/react/useImperativeHandle</a></li>\n</ul>\n<h3>useInsertionEffect</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useInsertionEffect\">https://react.dev/reference/react/useInsertionEffect</a></li>\n</ul>\n<h3>useLayoutEffect</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useLayoutEffect\">https://react.dev/reference/react/useLayoutEffect</a></li>\n</ul>\n<h3>useMemo</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useMemo\">https://react.dev/reference/react/useMemo</a></li>\n</ul>\n<h3>useReducer</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useReducer\">https://react.dev/reference/react/useReducer</a></li>\n</ul>\n<h3>useRef</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useRef\">https://react.dev/reference/react/useRef</a></li>\n</ul>\n<h3>useState</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useState\">https://react.dev/reference/react/useState</a></li>\n</ul>\n<h3>useSyncExternalStore</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useSyncExternalStore\">https://react.dev/reference/react/useSyncExternalStore</a></li>\n</ul>\n<h3>useTransition</h3>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useTransition\">https://react.dev/reference/react/useTransition</a></li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 279,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134560",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134560",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 27,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134560/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 159029,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134560/revisions/159029"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134560"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}