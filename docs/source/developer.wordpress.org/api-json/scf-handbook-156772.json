{
    "id": 156772,
    "date": "2025-02-20T08:04:06",
    "date_gmt": "2025-02-20T08:04:06",
    "guid": {
        "rendered": "https://developer.wordpress.org/secure-custom-fields/getting-started/installation/"
    },
    "modified": "2025-06-23T10:16:17",
    "modified_gmt": "2025-06-23T10:16:17",
    "slug": "installation",
    "status": "publish",
    "type": "scf-handbook",
    "link": "https://developer.wordpress.org/secure-custom-fields/welcome/installation/",
    "title": {
        "rendered": "Installing Secure Custom Fields"
    },
    "content": {
        "rendered": "<p>This guide walks you through installing Secure Custom Fields (SCF) on your WordPress site.</p>\n<h2>Requirements</h2>\n<p>Before installing, ensure your site meets these requirements:</p>\n<ul>\n<li>WordPress 6.0 or later</li>\n<li>PHP 7.4 or later</li>\n<li>WordPress memory limit of 40MB or greater (64MB recommended)</li>\n</ul>\n<h2>Installation Methods</h2>\n<h3>Via WordPress Admin (Recommended)</h3>\n<ol>\n<li>Log in to your WordPress admin panel</li>\n<li>Navigate to Plugins <span aria-hidden=\"true\" class=\"wp-exclude-emoji\">\u2192</span> Add New</li>\n<li>Search for &#8220;Secure Custom Fields&#8221;</li>\n<li>Click &#8220;Install Now&#8221;</li>\n<li>Click &#8220;Activate&#8221;</li>\n</ol>\n<h3>Manual Installation</h3>\n<ol>\n<li>Download the latest release from WordPress.org</li>\n<li>Extract the plugin files</li>\n<li>Upload the plugin folder to <code>/wp-content/plugins/</code></li>\n<li>Activate through the WordPress admin interface</li>\n</ol>\n<hr />\n<h3>Composer Installation</h3>\n<p>To install and manage Secure Custom Fields in your WordPress theme or plugin, it is recommended to use Composer.</p>\n<p>This ensures that SCF is properly versioned, loaded automatically, and easy to update.</p>\n<h3>Why integrate <strong>Secure Custom Fields (SCF)</strong> with Composer?</h3>\n<p>Integrating SCF using Composer offers several important advantages for the professional development of WordPress plugins and themes:</p>\n<ul>\n<li><strong>Centralized dependency management:</strong><br />\nComposer allows you to declare, install, and update SCF easily along with other libraries needed in your project.</p>\n</li>\n<li>\n<p><strong>Version control:</strong><br />\nYou can lock a specific version of SCF in your <code>composer.json</code>, ensuring that all development and production environments use exactly the same version, avoiding unexpected errors.</p>\n</li>\n<li>\n<p><strong>Simplified deployment and automation (CI/CD):</strong><br />\nComposer installs SCF automatically during deployment processes (<code>composer install</code>), eliminating the need to manually copy files.</p>\n</li>\n<li>\n<p><strong>Automatic autoloading:</strong><br />\nComposer handles PHP class autoloading. Integrating SCF this way makes your code cleaner, safer, and PSR-4 compliant.</p>\n</li>\n<li>\n<p><strong>Reduced repository size:</strong><br />\nBy installing SCF as an external dependency, you avoid having redundant copies of the plugin in your project, keeping your repository lighter and easier to maintain.</p>\n</li>\n<li>\n<p><strong>License compliance:</strong><br />\nComposer records the licenses of all dependencies used, which is very useful if you distribute your plugins or themes and need to meet legal or auditing requirements.</p>\n</li>\n<li>\n<p><strong>Facilitates project changes:</strong><br />\nBy managing SCF as a dependency, any theme or plugin can change its structure or installation system without affecting its functionality, ensuring greater flexibility and compatibility in development.</p>\n</li>\n</ul>\n<hr />\n<h3>How to Load and Use <strong>Secure Custom Fields (SCF)</strong> with Composer</h3>\n<p>Add the following configuration to your <code>composer.json</code> file:</p>\n<pre><code class=\"language-json\">{\n  \"repositories\": [\n    {\n      \"type\": \"composer\",\n      \"url\": \"https://wpackagist.org\"\n    }\n  ],\n  \"extra\": {\n    \"installer-paths\": {\n      \"vendor/{$name}/\": [\"type:wordpress-plugin\"]\n    }\n  },\n  \"require\": {\n    \"wpackagist-plugin/secure-custom-fields\": \"^6.4\"\n  },\n  \"config\": {\n    \"allow-plugins\": {\n      \"composer/installers\": true\n    }\n  }\n}\n</code></pre>\n<p>Once the configuration is set, run the following command in your terminal to install the dependencies:</p>\n<pre><code class=\"language-shell\">composer install\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-shell\">composer i\n</code></pre>\n<hr />\n<h3>Add the Composer Autoloader</h3>\n<p>To ensure Composer dependencies are loaded correctly, add the following line in your plugin or theme:</p>\n<pre><code class=\"language-php\">require_once plugin_dir_path(dirname(__FILE__)) . 'vendor/autoload.php';\n</code></pre>\n<h3>Load Secure Custom Fields</h3>\n<p>Now you need to manually load the Secure Custom Fields plugin and define its paths. Adjust the paths according to the structure of your plugin or theme:</p>\n<pre><code class=\"language-php\">if (! class_exists('ACF')) {\n    // Define the path and URL to the Secure Custom Fields plugin.\n    define('MY_SCF_PATH', plugin_dir_path(dirname(__FILE__)) . 'vendor/secure-custom-fields/');\n    define('MY_SCF_URL', plugin_dir_url(dirname(__FILE__)) . 'vendor/secure-custom-fields/');\n\n    // Include the plugin main file.\n    require_once MY_SCF_PATH . 'secure-custom-fields.php';\n}\n</code></pre>\n<p>\u26a0\ufe0f <strong>Note:</strong> Replace MY_SCF_PATH and MY_SCF_URL with constants that match your plugin/theme structure if necessary.</p>\n<h3>Done</h3>\n<p>You have successfully installed and integrated Secure Custom Fields via Composer. You can now use it as you would with a normal installation, but with all the benefits of Composer-based dependency management.</p>\n<hr />\n<h3>Optional: Hide SCF Admin Menu and Updates</h3>\n<p>If you want to hide the <strong>Secure Custom Fields (SCF)</strong> admin menu from the WordPress dashboard and prevent the plugin&#8217;s update notifications from appearing, you can use the following code:</p>\n<pre><code class=\"language-php\">// Hide the SCF admin menu item.\nadd_filter( 'acf/settings/show_admin', '__return_false' );\n\n// Hide the SCF Updates menu.\nadd_filter( 'acf/settings/show_updates', '__return_false', 100 );\n</code></pre>\n<h4>What does this do?</h4>\n<ul>\n<li><strong>Hide Admin Menu:</strong><br />\nThe first filter disables the SCF menu in the WordPress admin area, preventing users from accessing SCF field groups or settings.</p>\n</li>\n<li>\n<p><strong>Hide Update Notifications:</strong><br />\nThe second filter disables the SCF update notices, so users won&#8217;t see update prompts for the plugin inside the admin dashboard.</p>\n</li>\n</ul>\n<h4>When should you use it?</h4>\n<ul>\n<li>If you are bundling SCF inside your plugin or theme and want to <strong>control all the custom fields yourself</strong> without allowing clients or users to modify them.</li>\n<li>If you want to <strong>maintain full control</strong> over SCF versions and updates to avoid compatibility issues caused by manual updates.</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> Hiding updates means you are responsible for manually updating SCF when necessary to keep your project secure and compatible, but it also helps avoid potential conflicts between Composer and the built-in updater.\n</p></blockquote>\n<h2>Verify Your Installation</h2>\n<p>After installation:</p>\n<ol>\n<li>Navigate to <strong>Secure Custom Fields</strong> in your WordPress admin menu.</li>\n<li>Verify that you can access all <strong>Secure Custom Fields</strong> plugin features.</li>\n<li>Create a <strong>test field group</strong> to ensure that fields are saved and displayed correctly.</li>\n</ol>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 157290,
    "menu_order": 0,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-156772",
        "scf-handbook",
        "type-scf-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook/156772",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/scf-handbook"
            }
        ],
        "version-history": [
            {
                "count": 3,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook/156772/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 159016,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook/156772/revisions/159016"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook/157290"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=156772"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}