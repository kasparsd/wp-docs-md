{
    "id": 10946,
    "date": "2014-09-16T17:59:39",
    "date_gmt": "2014-09-16T17:59:39",
    "guid": {
        "rendered": "http://developer.wordpress.org/?post_type=plugin-handbook&#038;p=10946"
    },
    "modified": "2025-03-20T00:33:31",
    "modified_gmt": "2025-03-20T00:33:31",
    "slug": "advanced-topics",
    "status": "publish",
    "type": "plugin-handbook",
    "link": "https://developer.wordpress.org/plugins/hooks/advanced-topics/",
    "title": {
        "rendered": "Advanced Topics"
    },
    "content": {
        "rendered": "\n<h2 class=\"wp-block-heading\">Removing Actions and Filters</h2>\n\n\n\n<p>Sometimes you want to remove a callback function from a hook that another plugin, theme or even WordPress Core has registered.</p>\n\n\n\n<p>To remove a callback function from a hook, you need to call <code>remove_action()</code> or&nbsp;<code>remove_filter()</code>, depending whether the callback function was added as an Action or a Filter.</p>\n\n\n\n<p>The parameters passed to&nbsp;<code>remove_action()</code> / <code>remove_filter()</code> must be identical to the parameters passed to <code>add_action()</code> / <code>add_filter()</code> that registered it, or the removal won&#8217;t work.</p>\n\n\n\n<div class=\"wp-block-wporg-notice is-alert-notice\">\n<div class=\"wp-block-wporg-notice__icon\"></div>\n<div class=\"wp-block-wporg-notice__content\"><br />\nTo successfully remove a callback function you must&nbsp;perform the removal after the callback function was registered. The order of execution is important.<br />\n</div></div>\n\n\n\n\n<h3 class=\"wp-block-heading\">Example</h3>\n\n\n\n<p>Lets say we want to improve the performance of a large theme by removing unnecessary functionality.</p>\n\n\n\n<p>Let&#8217;s analyze the theme&#8217;s code by looking into <code>functions.php</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">function wporg_setup_slider() {\n\t// ...\n}\nadd_action( 'template_redirect', 'wporg_setup_slider', 9 );</code></pre>\n\n\n\n<p>The <code>wporg_setup_slider</code> function is adding a slider that we don&#8217;t need, which probably loads a huge CSS file followed by a JavaScript initialization file which uses a custom written library the size of 1MB. We can can get rid of that.</p>\n\n\n\n<p>Since we want to hook into WordPress after the <code>wporg_setup_slider</code> callback function was registered (<code>functions.php</code> executed) our best chance would be the <code><a href=\"https://developer.wordpress.org/reference/hooks/after_setup_theme/\">after_setup_theme</a></code> hook.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">function wporg_disable_slider() {\n\t// Make sure all parameters match the add_action() call exactly.\n\tremove_action( 'template_redirect', 'wporg_setup_slider', 9 );\n}\n// Make sure we call remove_action() after add_action() has been called.\nadd_action( 'after_setup_theme', 'wporg_disable_slider' );</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Removing All Callbacks</h2>\n\n\n\n<p>You can also remove all of the callback functions associated with a hook by using <code>remove_all_actions()</code> / <code>remove_all_filters()</code>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Determining the Current Hook</h2>\n\n\n\n<p>Sometimes you want to run an Action or a Filter on multiple hooks, but behave differently based on which one is currently calling it.</p>\n\n\n\n<p>You can use the&nbsp;<code>current_action()</code> / <code>current_filter()</code> to determine the current Action / Filter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">function wporg_modify_content( $content ) {\n\tswitch ( current_filter() ) {\n\t\tcase 'the_content':\n\t\t\t// Do something.\n\t\t\tbreak;\n\t\tcase 'the_excerpt':\n\t\t\t// Do something.\n\t\t\tbreak;\n\t}\n\treturn $content;\n}\n\nadd_filter( 'the_content', 'wporg_modify_content' );\nadd_filter( 'the_excerpt', 'wporg_modify_content' );</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Checking How Many Times a Hook Has Run</h2>\n\n\n\n<p>Some hooks are called multiple times in the course of execution, but you may only want your callback function to run once.</p>\n\n\n\n<p>In this situation, you can check how many times the hook has run with the <a href=\"https://developer.wordpress.org/reference/functions/did_action/\" data-type=\"link\" data-id=\"https://developer.wordpress.org/reference/functions/did_action/\">did_action()</a>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">function wporg_custom() {\n   // If save_post has been run more than once, skip the rest of the code.\n   if ( did_action( 'save_post' ) !== 1 ) {\n      return;\n   }\n   // ...\n}\nadd_action( 'save_post', 'wporg_custom' );</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Debugging with the &#8220;all&#8221; Hook</h2>\n\n\n\n<p>If you want a callback function to fire on every single hook, you can register it to the <code>all</code> hook. Sometimes this is useful in debugging situations to help determine when a particular event is happening or when a page is crashing.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">function wporg_debug() {\n\techo '&lt;p&gt;' . current_action() . '&lt;/p&gt;';\n}\nadd_action( 'all', 'wporg_debug' );</code></pre>\n",
        "protected": false
    },
    "author": 12560283,
    "featured_media": 0,
    "parent": 10936,
    "menu_order": 10,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-10946",
        "plugin-handbook",
        "type-plugin-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/10946",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/plugin-handbook"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/users/12560283"
            }
        ],
        "version-history": [
            {
                "count": 14,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/10946/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155817,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/10946/revisions/155817"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/10936"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=10946"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}