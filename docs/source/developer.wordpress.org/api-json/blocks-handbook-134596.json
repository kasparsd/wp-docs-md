{
    "id": 134596,
    "date": "2021-03-09T08:38:24",
    "date_gmt": "2021-03-09T08:38:24",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-rich-text/"
    },
    "modified": "2024-10-30T16:55:17",
    "modified_gmt": "2024-10-30T16:55:17",
    "slug": "packages-rich-text",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-rich-text/",
    "title": {
        "rendered": "@wordpress/rich-text"
    },
    "content": {
        "rendered": "<p>This module contains helper functions to convert HTML or a DOM tree into a rich text value and back, and to modify the value with functions that are similar to <code>String</code> methods, plus some additional ones for formatting.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/rich-text\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>Usage</h2>\n<p>The Rich Text package is designed to aid in the manipulation of plain text strings in order that they can represent complex formatting.</p>\n<p>By using a <code>RichTextValue</code> value object (referred to from here on as <code>value</code>) it is possible to separate text from formatting, thereby affording the ability to easily search and manipulate rich formats.</p>\n<p>Examples of rich formats include:</p>\n<ul>\n<li>bold, italic, superscript (etc)</li>\n<li>links</li>\n<li>unordered/ordered lists</li>\n</ul>\n<h3>The RichTextValue object</h3>\n<p>The value object is comprised of the following:</p>\n<ul>\n<li><code>text</code> &#8211; the string of text to which rich formats are to be applied.</li>\n<li><code>formats</code> &#8211; a sparse array of the same length as <code>text</code> that is filled with <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/format-api/\">formats</a> (e.g. <code>core/link</code>, <code>core/bold</code> etc.) at the positions where the text is formatted.</li>\n<li><code>start</code> &#8211; an index in the <code>text</code> representing the <em>start</em> of the currently active selection.</li>\n<li><code>end</code> &#8211; an index in the <code>text</code> representing the <em>end</em> of the currently active selection.</li>\n</ul>\n<p>You should not attempt to create your own <code>value</code> objects. Rather you should rely on the built in methods of the <code>@wordpress/rich-text</code> package to build these for you.</p>\n<p>It is important to understand how a value represents richly formatted text. Here is an example to illustrate.</p>\n<p>If <code>text</code> is formatted from position 2-5 in bold (<code>core/bold</code>) and from position 2-8 with a link (<code>core/link</code>), then you&#8217;ll find:</p>\n<ul>\n<li>arrays within the sparse array at positions 2-5 that include the <code>core/bold</code> format</li>\n<li>arrays within the sparse array at positions 2-8 that include the <code>core/link</code> format</li>\n</ul>\n<p>Here&#8217;s how that would look:</p>\n<pre><code class=\"language-js\">{\n  text: 'Hello world', // length 11\n  formats: [\n    [], // 0\n    [],\n    [ // 2\n      {\n        type: 'core/bold',\n      },\n      {\n        type: 'core/link',\n      }\n    ],\n    [\n      {\n        type: 'core/bold',\n      },\n      {\n        type: 'core/link',\n      }\n    ],\n    [\n      {\n        type: 'core/bold',\n      },\n      {\n        type: 'core/link',\n      }\n    ],\n    [\n      {\n        type: 'core/bold',\n      },\n      {\n        type: 'core/link',\n      }\n    ],\n    [ // 6\n      {\n        type: 'core/link',\n      }\n    ]\n    [\n      {\n        type: 'core/link',\n      }\n    ],\n    [\n      {\n        type: 'core/link',\n      }\n    ],\n    [], // 9\n    [], // 10\n    [], // 11\n  ]\n}\n</code></pre>\n<h3>Selections</h3>\n<p>Let&#8217;s continue to consider the above example with the text <code>Hello world</code>.</p>\n<p>If, as a user, I make a selection of the word <code>Hello</code> this would result in a value object with <code>start</code> and <code>end</code> as <code>0</code> and <code>5</code> respectively.</p>\n<p>In general, this is useful for knowing which portion of the text is selected. However, we need to consider that selections may also be &#8220;collapsed&#8221;.</p>\n<h4>Collapsed selections</h4>\n<p>A collapsed selection is one where <code>start</code> and <code>end</code> values are <em>identical</em> (e.g. <code>start: 4, end: 4</code>). This happens when no characters are selected, but there is a caret present. This most often occurs when a user places the cursor/caret within a string of text but does not make a selection.</p>\n<p>Given that the selection has no &#8220;range&#8221; (i.e. there is no difference between <code>start</code> and <code>end</code> indices), finding the currently selected portion of text from collapsed values can be challenging.</p>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>applyFormat</h3>\n<p>Apply a format object to a Rich Text value from the given <code>startIndex</code> to the given <code>endIndex</code>. Indices are retrieved from the selection if none are provided.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to modify.</li>\n<li><em>format</em> <code>RichTextFormat</code>: Format to apply.</li>\n<li><em>startIndex</em> <code>[number]</code>: Start index.</li>\n<li><em>endIndex</em> <code>[number]</code>: End index.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new value with the format applied.</li>\n</ul>\n<h3>concat</h3>\n<p>Combine all Rich Text values into one. This is similar to <code>String.prototype.concat</code>.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>values</em> <code>...RichTextValue</code>: Objects to combine.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new value combining all given records.</li>\n</ul>\n<h3>create</h3>\n<p>Create a RichText value from an <code>Element</code> tree (DOM), an HTML string or a plain text string, with optionally a <code>Range</code> object to set the selection. If called without any input, an empty value will be created. The optional functions can be used to filter out content.</p>\n<p>A value will have the following shape, which you are strongly encouraged not to modify without the use of helper functions:</p>\n<pre><code class=\"language-js\">{\n  text: string,\n  formats: Array,\n  replacements: Array,\n  ?start: number,\n  ?end: number,\n}\n</code></pre>\n<p>As you can see, text and formatting are separated. <code>text</code> holds the text, including any replacement characters for objects and lines. <code>formats</code>, <code>objects</code> and <code>lines</code> are all sparse arrays of the same length as <code>text</code>. It holds information about the formatting at the relevant text indices. Finally <code>start</code> and <code>end</code> state which text indices are selected. They are only provided if a <code>Range</code> was given.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>$1</em> <code>[Object]</code>: Optional named arguments.</li>\n<li><em>$1.element</em> <code>[Element]</code>: Element to create value from.</li>\n<li><em>$1.text</em> <code>[string]</code>: Text to create value from.</li>\n<li><em>$1.html</em> <code>[string]</code>: HTML to create value from.</li>\n<li><em>$1.range</em> <code>[Range]</code>: Range to create value from.</li>\n<li><em>$1.&#095;&#095;unstableIsEditableTree</em> <code>[boolean]</code>:</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A rich text value.</li>\n</ul>\n<h3>getActiveFormat</h3>\n<p>Gets the format object by type at the start of the selection. This can be used to get e.g. the URL of a link format at the current selection, but also to check if a format is active at the selection. Returns undefined if there is no format at the selection.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to inspect.</li>\n<li><em>formatType</em> <code>string</code>: Format type to look for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextFormat|undefined</code>: Active format object of the specified type, or undefined.</li>\n</ul>\n<h3>getActiveFormats</h3>\n<p>Gets the all format objects at the start of the selection.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to inspect.</li>\n<li><em>EMPTY_ACTIVE_FORMATS</em> <code>Array</code>: Array to return if there are no active formats.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextFormatList</code>: Active format objects.</li>\n</ul>\n<h3>getActiveObject</h3>\n<p>Gets the active object, if there is any.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to inspect.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextFormat|void</code>: Active object, or undefined.</li>\n</ul>\n<h3>getTextContent</h3>\n<p>Get the textual content of a Rich Text value. This is similar to <code>Element.textContent</code>.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to use.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The text content.</li>\n</ul>\n<h3>insert</h3>\n<p>Insert a Rich Text value, an HTML string, or a plain text string, into a Rich Text value at the given <code>startIndex</code>. Any content between <code>startIndex</code> and <code>endIndex</code> will be removed. Indices are retrieved from the selection if none are provided.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to modify.</li>\n<li><em>valueToInsert</em> <code>RichTextValue|string</code>: Value to insert.</li>\n<li><em>startIndex</em> <code>[number]</code>: Start index.</li>\n<li><em>endIndex</em> <code>[number]</code>: End index.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new value with the value inserted.</li>\n</ul>\n<h3>insertObject</h3>\n<p>Insert a format as an object into a Rich Text value at the given <code>startIndex</code>. Any content between <code>startIndex</code> and <code>endIndex</code> will be removed. Indices are retrieved from the selection if none are provided.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to modify.</li>\n<li><em>formatToInsert</em> <code>RichTextFormat</code>: Format to insert as object.</li>\n<li><em>startIndex</em> <code>[number]</code>: Start index.</li>\n<li><em>endIndex</em> <code>[number]</code>: End index.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new value with the object inserted.</li>\n</ul>\n<h3>isCollapsed</h3>\n<p>Check if the selection of a Rich Text value is collapsed or not. Collapsed means that no characters are selected, but there is a caret present. If there is no selection, <code>undefined</code> will be returned. This is similar to <code>window.getSelection().isCollapsed()</code>.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>props</em> <code>RichTextValue</code>: The rich text value to check.</li>\n<li><em>props.start</em> <code>RichTextValue[ 'start' ]</code>:</li>\n<li><em>props.end</em> <code>RichTextValue[ 'end' ]</code>:</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean | undefined</code>: True if the selection is collapsed, false if not, undefined if there is no selection.</li>\n</ul>\n<h3>isEmpty</h3>\n<p>Check if a Rich Text value is Empty, meaning it contains no text or any objects (such as images).</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to use.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the value is empty, false if not.</li>\n</ul>\n<h3>join</h3>\n<p>Combine an array of Rich Text values into one, optionally separated by <code>separator</code>, which can be a Rich Text value, HTML string, or plain text string. This is similar to <code>Array.prototype.join</code>.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>values</em> <code>Array&lt;RichTextValue&gt;</code>: An array of values to join.</li>\n<li><em>separator</em> <code>[string|RichTextValue]</code>: Separator string or value.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new combined value.</li>\n</ul>\n<h3>registerFormatType</h3>\n<p>Registers a new format provided a unique name and an object defining its behavior.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Format name.</li>\n<li><em>settings</em> <code>WPFormat</code>: Format settings.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>WPFormat|undefined</code>: The format, if it has been successfully registered; otherwise <code>undefined</code>.</li>\n</ul>\n<h3>remove</h3>\n<p>Remove content from a Rich Text value between the given <code>startIndex</code> and <code>endIndex</code>. Indices are retrieved from the selection if none are provided.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to modify.</li>\n<li><em>startIndex</em> <code>[number]</code>: Start index.</li>\n<li><em>endIndex</em> <code>[number]</code>: End index.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new value with the content removed.</li>\n</ul>\n<h3>removeFormat</h3>\n<p>Remove any format object from a Rich Text value by type from the given <code>startIndex</code> to the given <code>endIndex</code>. Indices are retrieved from the selection if none are provided.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to modify.</li>\n<li><em>formatType</em> <code>string</code>: Format type to remove.</li>\n<li><em>startIndex</em> <code>[number]</code>: Start index.</li>\n<li><em>endIndex</em> <code>[number]</code>: End index.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new value with the format applied.</li>\n</ul>\n<h3>replace</h3>\n<p>Search a Rich Text value and replace the match(es) with <code>replacement</code>. This is similar to <code>String.prototype.replace</code>.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: The value to modify.</li>\n<li><em>pattern</em> <code>RegExp|string</code>: A RegExp object or literal. Can also be a string. It is treated as a verbatim string and is not interpreted as a regular expression. Only the first occurrence will be replaced.</li>\n<li><em>replacement</em> <code>Function|string</code>: The match or matches are replaced with the specified or the value returned by the specified function.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new value with replacements applied.</li>\n</ul>\n<h3>RichTextData</h3>\n<p>The RichTextData class is used to instantiate a wrapper around rich text values, with methods that can be used to transform or manipulate the data.</p>\n<ul>\n<li>Create an empty instance: <code>new RichTextData()</code>.</li>\n<li>Create one from an HTML string: <code>RichTextData.fromHTMLString(<br />\n'&lt;em&gt;hello&lt;/em&gt;' )</code>.</li>\n<li>Create one from a wrapper HTMLElement: <code>RichTextData.fromHTMLElement(<br />\ndocument.querySelector( 'p' ) )</code>.</li>\n<li>Create one from plain text: <code>RichTextData.fromPlainText( '1\\n2' )</code>.</li>\n<li>Create one from a rich text value: <code>new RichTextData( { text: '...',<br />\nformats: [ ... ] } )</code>.</li>\n</ul>\n<h3>RichTextValue</h3>\n<p>An object which represents a formatted string. See main <code>@wordpress/rich-text</code> documentation for more information.</p>\n<h3>slice</h3>\n<p>Slice a Rich Text value from <code>startIndex</code> to <code>endIndex</code>. Indices are retrieved from the selection if none are provided. This is similar to <code>String.prototype.slice</code>.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to modify.</li>\n<li><em>startIndex</em> <code>[number]</code>: Start index.</li>\n<li><em>endIndex</em> <code>[number]</code>: End index.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new extracted value.</li>\n</ul>\n<h3>split</h3>\n<p>Split a Rich Text value in two at the given <code>startIndex</code> and <code>endIndex</code>, or split at the given separator. This is similar to <code>String.prototype.split</code>. Indices are retrieved from the selection if none are provided.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>:</li>\n<li><em>string</em> <code>[number|string]</code>: Start index, or string at which to split.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt;RichTextValue&gt;|undefined</code>: An array of new values.</li>\n</ul>\n<h3>store</h3>\n<p>Store definition for the rich-text namespace.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\">https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore</a></li>\n</ul>\n<p><em>Type</em></p>\n<ul>\n<li><code>Object</code></li>\n</ul>\n<h3>toggleFormat</h3>\n<p>Toggles a format object to a Rich Text value at the current selection.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>value</em> <code>RichTextValue</code>: Value to modify.</li>\n<li><em>format</em> <code>RichTextFormat</code>: Format to apply or remove.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RichTextValue</code>: A new value with the format applied or removed.</li>\n</ul>\n<h3>toHTMLString</h3>\n<p>Create an HTML string from a Rich Text value.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>$1</em> <code>Object</code>: Named arguments.</li>\n<li><em>$1.value</em> <code>RichTextValue</code>: Rich text value.</li>\n<li><em>$1.preserveWhiteSpace</em> <code>[boolean]</code>: Preserves newlines if true.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: HTML string.</li>\n</ul>\n<h3>unregisterFormatType</h3>\n<p>Unregisters a format.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Format name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>WPFormat|undefined</code>: The previous format value, if it has been successfully unregistered; otherwise <code>undefined</code>.</li>\n</ul>\n<h3>useAnchor</h3>\n<p>This hook, to be used in a format type&#8217;s Edit component, returns the active element that is formatted, or a virtual element for the selection range if no format is active. The returned value is meant to be used for positioning UI, e.g. by passing it to the <code>Popover</code> component via the <code>anchor</code> prop.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>$1</em> <code>Object</code>: Named parameters.</li>\n<li><em>$1.editableContentElement</em> <code>HTMLElement|null</code>: The element containing the editable content.</li>\n<li><em>$1.settings</em> <code>WPFormat=</code>: The format type&#8217;s settings.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Element|VirtualAnchorElement|undefined|null</code>: The active element or selection range.</li>\n</ul>\n<h3>useAnchorRef</h3>\n<p>This hook, to be used in a format type&#8217;s Edit component, returns the active element that is formatted, or the selection range if no format is active. The returned value is meant to be used for positioning UI, e.g. by passing it to the <code>Popover</code> component.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>$1</em> <code>Object</code>: Named parameters.</li>\n<li><em>$1.ref</em> <code>RefObject&lt;HTMLElement&gt;</code>: React ref of the element containing the editable content.</li>\n<li><em>$1.value</em> <code>RichTextValue</code>: Value to check for selection.</li>\n<li><em>$1.settings</em> <code>WPFormat</code>: The format type&#8217;s settings.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Element|Range</code>: The active element or selection range.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 317,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134596",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134596",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 25,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134596/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155347,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134596/revisions/155347"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134596"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}