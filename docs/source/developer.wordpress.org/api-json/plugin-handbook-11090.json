{
    "id": 11090,
    "date": "2014-09-24T19:23:46",
    "date_gmt": "2014-09-24T19:23:46",
    "guid": {
        "rendered": "http://developer.wordpress.org/?post_type=plugin-handbook&#038;p=11090"
    },
    "modified": "2022-11-17T06:08:52",
    "modified_gmt": "2022-11-17T06:08:52",
    "slug": "roles-and-capabilities",
    "status": "publish",
    "type": "plugin-handbook",
    "link": "https://developer.wordpress.org/plugins/users/roles-and-capabilities/",
    "title": {
        "rendered": "Roles and Capabilities"
    },
    "content": {
        "rendered": "\n<p>Roles and capabilities are two important aspects of WordPress that allow you to control user privileges.</p>\n\n\n\n<p>WordPress stores the Roles and their Capabilities in the <code>options</code> table under the <code>user_roles</code> key.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Roles</h2>\n\n\n\n<p>A role defines a set of capabilities for a user. For example, what the user may see and do in his dashboard.</p>\n\n\n\n<p><strong>By default, WordPress have six roles:</strong></p>\n\n\n\n<ul class=\"wp-block-list\"><li>Super Admin</li><li>Administrator</li><li>Editor</li><li>Author</li><li>Contributor</li><li>Subscriber</li></ul>\n\n\n\n<p>More roles can be added and the default roles can be removed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"405\" height=\"142\" src=\"https://i0.wp.com/developer.wordpress.org/files/2014/09/wp-roles.png?resize=405%2C142&#038;ssl=1\" alt=\"\" class=\"wp-image-26187\" srcset=\"https://i0.wp.com/developer.wordpress.org/files/2014/09/wp-roles.png?w=405&amp;ssl=1 405w, https://i0.wp.com/developer.wordpress.org/files/2014/09/wp-roles.png?resize=300%2C105&amp;ssl=1 300w\" sizes=\"auto, (max-width: 405px) 100vw, 405px\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">Adding Roles</h3>\n\n\n\n<p>Add new roles and assign capabilities to them with <a href=\"https://developer.wordpress.org/reference/functions/add_role/\" rel=\"function\">add_role()</a> .</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">function wporg_simple_role() {\n\tadd_role(\n\t\t'simple_role',\n\t\t'Simple Role',\n\t\tarray(\n\t\t\t'read'         =&gt; true,\n\t\t\t'edit_posts'   =&gt; true,\n\t\t\t'upload_files' =&gt; true,\n\t\t),\n\t);\n}\n\n// Add the simple_role.\nadd_action( 'init', 'wporg_simple_role' );</code></pre>\n\n\n\n<div class=\"wp-block-wporg-notice is-alert-notice\">\n<div class=\"wp-block-wporg-notice__icon\"></div>\n<div class=\"wp-block-wporg-notice__content\"><br />\nAfter the first call to <a href=\"https://developer.wordpress.org/reference/functions/add_role/\" rel=\"function\">add_role()</a> , the Role and it&#8217;s Capabilities will be stored in the database!</p>\n<p>Sequential calls will do nothing: including altering the capabilities list, which might not be the behavior that you&#8217;re expecting.<br />\n</div></div>\n\n\n\n\n<div class=\"wp-block-wporg-notice is-info-notice\">\n<div class=\"wp-block-wporg-notice__icon\"></div>\n<div class=\"wp-block-wporg-notice__content\"><br />\nTo alter the capabilities list in bulk: remove the role using <a href=\"https://developer.wordpress.org/reference/functions/remove_role/\" rel=\"function\">remove_role()</a>  and add it again using <a href=\"https://developer.wordpress.org/reference/functions/add_role/\" rel=\"function\">add_role()</a>  with the new capabilities.</p>\n<p>Make sure to do it only if the capabilities differ from what you&#8217;re expecting (i.e. condition this) or you&#8217;ll degrade performance considerably!<br />\n</div></div>\n\n\n\n\n<h3 class=\"wp-block-heading\">Removing Roles</h3>\n\n\n\n<p>Remove roles with <a href=\"https://developer.wordpress.org/reference/functions/remove_role/\" rel=\"function\">remove_role()</a> .</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">function wporg_simple_role_remove() {\n\tremove_role( 'simple_role' );\n}\n\n// Remove the simple_role.\nadd_action( 'init', 'wporg_simple_role_remove' );</code></pre>\n\n\n\n<div class=\"wp-block-wporg-notice is-alert-notice\">\n<div class=\"wp-block-wporg-notice__icon\"></div>\n<div class=\"wp-block-wporg-notice__content\"><br />\nAfter the first call to <a href=\"https://developer.wordpress.org/reference/functions/remove_role/\" rel=\"function\">remove_role()</a> , the Role and it&#8217;s Capabilities will be removed from the database!</p>\n<p>Sequential calls will do nothing.<br />\n</div></div>\n\n\n\n\n<div class=\"wp-block-wporg-notice is-info-notice\">\n<div class=\"wp-block-wporg-notice__icon\"></div>\n<div class=\"wp-block-wporg-notice__content\"><br />\nIf you&#8217;re removing the default roles:</p>\n<ul>\n<li>We advise <strong>against</strong> removing the Administrator and Super Admin roles!</li>\n<li>Make sure to keep the code in your plugin/theme as future WordPress updates may add these roles again.</li>\n<li>Run<br />\n<code>update_option('default_role', YOUR_NEW_DEFAULT_ROLE)</code><br />\nsince you&#8217;ll be deleting <code>subscriber</code> which is WP&#8217;s default role.</li>\n</ul>\n<p></div></div>\n\n\n\n\n<h2 class=\"wp-block-heading\">Capabilities</h2>\n\n\n\n<p>Capabilities define what a <strong>role</strong> can and can not do: edit posts, publish posts, etc.</p>\n\n\n\n<div class=\"wp-block-wporg-notice is-info-notice\">\n<div class=\"wp-block-wporg-notice__icon\"></div>\n<div class=\"wp-block-wporg-notice__content\"><br />\nCustom post types can require a certain set of Capabilities.<br />\n</div></div>\n\n\n\n\n<h3 class=\"wp-block-heading\">Adding Capabilities</h3>\n\n\n\n<p>You may define new capabilities for a role.</p>\n\n\n\n<p>Use <a href=\"https://developer.wordpress.org/reference/functions/get_role/\" rel=\"function\">get_role()</a>  to get the role object, then use the <code>add_cap()</code> method of that object to add a new capability.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">function wporg_simple_role_caps() {\n\t// Gets the simple_role role object.\n\t$role = get_role( 'simple_role' );\n\n\t// Add a new capability.\n\t$role-&gt;add_cap( 'edit_others_posts', true );\n}\n\n// Add simple_role capabilities, priority must be after the initial role definition.\nadd_action( 'init', 'wporg_simple_role_caps', 11 );</code></pre>\n\n\n\n<div class=\"wp-block-wporg-notice is-info-notice\">\n<div class=\"wp-block-wporg-notice__icon\"></div>\n<div class=\"wp-block-wporg-notice__content\"><br />\nIt&#8217;s possible to add custom capabilities to any role.</p>\n<p>Under the default WordPress admin, they would have no effect, but they can be used for custom admin screen and front-end areas.<br />\n</div></div>\n\n\n\n\n<h3 class=\"wp-block-heading\">Removing Capabilities</h3>\n\n\n\n<p>You may remove capabilities from a role.</p>\n\n\n\n<p>The implementation is similar to Adding Capabilities with the difference being the use of <code>remove_cap()</code> method for the role object.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Using Roles and Capabilities</h2>\n\n\n\n<h3 class=\"wp-block-heading\">Get Role</h3>\n\n\n\n<p>Get the role object including all of it&#8217;s capabilities with <a href=\"https://developer.wordpress.org/reference/functions/get_role/\" rel=\"function\">get_role()</a> .</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">get_role( $role );</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">User Can</h3>\n\n\n\n<p>Check if a user have a specified <strong>role</strong> or <strong>capability</strong> with <a href=\"https://developer.wordpress.org/reference/functions/user_can/\" rel=\"function\">user_can()</a> .</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">user_can( $user, $capability );</code></pre>\n\n\n\n<div class=\"wp-block-wporg-notice is-warning-notice\">\n<div class=\"wp-block-wporg-notice__icon\"></div>\n<div class=\"wp-block-wporg-notice__content\"><br />\nThere is an undocumented, third argument, $args, that may include the object against which the test should be performed.</p>\n<p>E.g. Pass a post ID to test for the capability of that specific post.<br />\n</div></div>\n\n\n\n\n<h3 class=\"wp-block-heading\">Current User Can</h3>\n\n\n\n<p><a href=\"https://developer.wordpress.org/reference/functions/current_user_can/\" rel=\"function\">current_user_can()</a>  is a wrapper function for <a href=\"https://developer.wordpress.org/reference/functions/user_can/\" rel=\"function\">user_can()</a>  using the current user object as the <code>$user</code> parameter.</p>\n\n\n\n<p>Use this in scenarios where back-end and front-end areas should require a certain level of privileges to access and/or modify.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">current_user_can( $capability );</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">Example</h3>\n\n\n\n<p>Here&#8217;s a practical example of adding an Edit link on the in a template file if the user has the proper capability:</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">if ( current_user_can( 'edit_posts' ) ) {\n\tedit_post_link( esc_html__( 'Edit', 'wporg' ), '&lt;p&gt;', '&lt;/p&gt;' );\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Multisite</h2>\n\n\n\n<p>The <a href=\"https://developer.wordpress.org/reference/functions/current_user_can_for_blog/\" rel=\"function\">current_user_can_for_blog()</a>  function is used to test if the current user has a certain <strong>role</strong> or <strong>capability</strong> on a specific blog.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">current_user_can_for_blog( $blog_id, $capability );</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Reference</h2>\n\n\n\n<p>Codex Reference for <a href=\"https://wordpress.org/support/article/roles-and-capabilities/\" target=\"_blank\" rel=\"noopener noreferrer\">User Roles and Capabilities</a>.</p>\n",
        "protected": false
    },
    "author": 12560283,
    "featured_media": 0,
    "parent": 11084,
    "menu_order": 0,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-11090",
        "plugin-handbook",
        "type-plugin-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/11090",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/plugin-handbook"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/users/12560283"
            }
        ],
        "version-history": [
            {
                "count": 35,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/11090/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 144327,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/11090/revisions/144327"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/plugin-handbook/11084"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=11090"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}