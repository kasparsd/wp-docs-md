{
    "id": 134492,
    "date": "2021-03-09T08:38:21",
    "date_gmt": "2021-03-09T08:38:21",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/components/popover/"
    },
    "modified": "2025-07-08T10:16:07",
    "modified_gmt": "2025-07-08T10:16:07",
    "slug": "popover",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/components/popover/",
    "title": {
        "rendered": "Popover"
    },
    "content": {
        "rendered": "<p><code>Popover</code> renders its content in a floating modal. If no explicit anchor is passed via props, it anchors to its parent element by default.</p>\n<p>The behavior of the popover when it exceeds the viewport&#8217;s edges can be controlled via its props.</p>\n<h2>Usage</h2>\n<p>Render a Popover adjacent to its container.</p>\n<p>If a Popover is returned by your component, it will be shown. To hide the popover, simply omit it from your component&#8217;s render value.</p>\n<pre><code class=\"language-jsx\">import { useState } from 'react';\nimport { Button, Popover } from '@wordpress/components';\n\nconst MyPopover = () =&gt; {\n    const [ isVisible, setIsVisible ] = useState( false );\n    const toggleVisible = () =&gt; {\n        setIsVisible( ( state ) =&gt; ! state );\n    };\n\n    return (\n        &lt;Button variant=\"secondary\" onClick={ toggleVisible }&gt;\n            Toggle Popover!\n            { isVisible &amp;&amp; &lt;Popover&gt;Popover is toggled!&lt;/Popover&gt; }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p>In order to pass an explicit anchor, you can use the <code>anchor</code> prop. When doing so, <strong>the anchor element should be stored in local state</strong> rather than a plain React ref to ensure reactive updating when it changes.</p>\n<pre><code class=\"language-jsx\">import { useState } from 'react';\nimport { Button, Popover } from '@wordpress/components';\n\nconst MyPopover = () =&gt; {\n    // Use internal state instead of a ref to make sure that the component\n    // re-renders when the popover's anchor updates.\n    const [ popoverAnchor, setPopoverAnchor ] = useState();\n    const [ isVisible, setIsVisible ] = useState( false );\n    const toggleVisible = () =&gt; {\n        setIsVisible( ( state ) =&gt; ! state );\n    };\n\n    return (\n        &lt;p ref={ setPopoverAnchor }&gt;Popover s anchor&lt;/p&gt;\n        &lt;Button variant=\"secondary\" onClick={ toggleVisible }&gt;\n            Toggle Popover!\n        &lt;/Button&gt;\n        { isVisible &amp;&amp; (\n            &lt;Popover\n                anchor={ popoverAnchor }\n            &gt;\n                Popover is toggled!\n            &lt;/Popover&gt;\n        ) }\n    );\n};\n</code></pre>\n<p>By default Popovers render at the end of the body of your document. If you want Popover elements to render to a specific location on the page, you must render a <code>Popover.Slot</code> further up the element tree:</p>\n<pre><code class=\"language-jsx\">import { createRoot } from 'react-dom/client';\nimport { Popover } from '@wordpress/components';\nimport Content from './Content';\n\nconst app = document.getElementById( 'app' );\nconst root = createRoot( app );\nroot.render(\n    &lt;div&gt;\n        &lt;Content /&gt;\n        &lt;Popover.Slot /&gt;\n    &lt;/div&gt;\n);\n</code></pre>\n<h2>Props</h2>\n<p>The component accepts the following props. Props not included in this set will be applied to the element wrapping Popover content.</p>\n<h3><code>anchor</code>: <code>Element | VirtualElement | null</code></h3>\n<p>The element that should be used by the <code>Popover</code> as its anchor. It can either be an <code>Element</code> or, alternatively, a <code>VirtualElement</code> \u2014 ie. an object with the <code>getBoundingClientRect()</code> and the <code>ownerDocument</code> properties defined.</p>\n<p>The element should be stored in state rather than a plain ref to ensure reactive updating when it changes.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>anchorRect</code>: <code>DomRectWithOwnerDocument</code></h3>\n<p><em>Note: this prop is deprecated. Please use the <code>anchor</code> prop instead.</em></p>\n<p>An object extending a <code>DOMRect</code> with an additional optional <code>ownerDocument</code> property, used to specify a fixed popover position.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>anchorRef</code>: <code>Element | PopoverAnchorRefReference | PopoverAnchorRefTopBottom | Range</code></h3>\n<p><em>Note: this prop is deprecated. Please use the <code>anchor</code> prop instead.</em></p>\n<p>Used to specify a fixed popover position. It can be an <code>Element</code>, a React reference to an <code>element</code>, an object with a <code>top</code> and a <code>bottom</code> properties (both pointing to elements), or a <code>range</code>.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>animate</code>: <code>boolean</code></h3>\n<p>Whether the popover should animate when opening.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>true</code></li>\n</ul>\n<h3><code>children</code>: <code>ReactNode</code></h3>\n<p>The <code>children</code> elements rendered as the popover&#8217;s content.</p>\n<ul>\n<li>Required: Yes</li>\n</ul>\n<h3><code>expandOnMobile</code>: <code>boolean</code></h3>\n<p>Show the popover fullscreen on mobile viewports.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>flip</code>: <code>boolean</code></h3>\n<p>Specifies whether the popover should flip across its axis if there isn&#8217;t space for it in the normal placement.</p>\n<p>When the using a &#8216;top&#8217; placement, the popover will switch to a &#8216;bottom&#8217; placement. When using a &#8216;left&#8217; placement, the popover will switch to a `right&#8217; placement.</p>\n<p>The popover will retain its alignment of &#8216;start&#8217; or &#8216;end&#8217; when flipping.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>true</code></li>\n</ul>\n<h3><code>focusOnMount</code>: <code>'firstElement' | boolean</code></h3>\n<p>By default, the <em>first tabbable element</em> in the popover will receive focus when it mounts. This is the same as setting this prop to <code>\"firstElement\"</code>.</p>\n<p>Specifying a <code>true</code> value will focus the container instead.</p>\n<p>Specifying a <code>false</code> value disables the focus handling entirely (this should only be done when an appropriately accessible substitute behavior exists).</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>\"firstElement\"</code></li>\n</ul>\n<h3><code>onFocusOutside</code>: <code>( event: SyntheticEvent ) =&gt; void</code></h3>\n<p>A callback invoked when the focus leaves the opened popover. This should only be provided in advanced use-cases when a popover should close under specific circumstances (for example, if the new <code>document.activeElement</code> is content of or otherwise controlling popover visibility).</p>\n<p>When not provided, the <code>onClose</code> callback will be called instead.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>getAnchorRect</code>: <code>( fallbackReferenceElement: Element | null ) =&gt; DomRectWithOwnerDocument</code></h3>\n<p><em>Note: this prop is deprecated. Please use the <code>anchor</code> prop instead.</em></p>\n<p>A function returning the same value as the one expected by the <code>anchorRect</code> prop, used to specify a dynamic popover position.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>headerTitle</code>: <code>string</code></h3>\n<p>Used to customize the header text shown when the popover is toggled to fullscreen on mobile viewports (see the <code>expandOnMobile</code> prop).</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>isAlternate</code>: <code>boolean</code></h3>\n<p><em>Note: this prop is deprecated. Please use the <code>variant</code> prop with the <code>'toolbar'</code> values instead.</em></p>\n<p>Used to enable a different visual style for the popover.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>noArrow</code>: <code>boolean</code></h3>\n<p>Used to show/hide the arrow that points at the popover&#8217;s anchor.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>true</code></li>\n</ul>\n<h3><code>offset</code>: <code>number</code></h3>\n<p>The distance (in px) between the anchor and the popover.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>onClose</code>: <code>() =&gt; void</code></h3>\n<p>A callback invoked when the popover should be closed.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>placement</code>: <code>'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'overlay'</code></h3>\n<p>Used to specify the popover&#8217;s position with respect to its anchor.</p>\n<p><code>overlay</code> is a special case that places the popover over the reference element.<br />\nPlease note that other placement related props may not behave as excepted.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>\"bottom-start\"</code></li>\n</ul>\n<h3><code>position</code>: <code>[yAxis] [xAxis] [optionalCorner]</code></h3>\n<p><em>Note: use the <code>placement</code> prop instead when possible.</em></p>\n<p>Legacy way to specify the popover&#8217;s position with respect to its anchor.</p>\n<p>Possible values:</p>\n<ul>\n<li><code>yAxis</code>: <code>'top' | 'middle' | 'bottom'</code></li>\n<li><code>xAxis</code>: <code>'left' | 'center' | 'right'</code></li>\n<li><code>corner</code>: <code>'top' | 'right' | 'bottom' | 'left'</code><br />\n<!-- Break into two separate lists using an HTML comment --></li>\n<li>Required: No</li>\n</ul>\n<h3><code>resize</code>: <code>boolean</code></h3>\n<p>Adjusts the size of the popover to prevent its contents from going out of view when meeting the viewport edges.</p>\n<p><strong>Note:</strong> The <code>resize</code> and <code>shift</code> props are not intended to be used together. Enabling both can cause unexpected behavior.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>true</code></li>\n</ul>\n<h3><code>shift</code>: <code>boolean</code></h3>\n<p>Enables the <code>Popover</code> to shift in order to stay in view when meeting the viewport edges.</p>\n<p><strong>Note:</strong> The <code>shift</code> and <code>resize</code> props are not intended to be used together. If you enable <code>shift</code>, set <code>resize</code> to <code>false</code>.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>false</code></li>\n</ul>\n<h3><code>variant</code>: <code>'toolbar' | 'unstyled'</code></h3>\n<p>Specifies the popover&#8217;s style.</p>\n<p>Leave undefined for the default style. Possible values are:<br />\n&#8211;   <code>unstyled</code>:  The popover is essentially without any visible style, it has no background, border, outline or drop shadow, but the popover contents are still displayed.<br />\n&#8211;   <code>toolbar</code>: A style that has no elevation, but a high contrast with other elements. This matches the style of the <a href=\"https://developer.wordpress.org/block-editor/reference-guide/components/toolbar/\"><code>Toolbar</code> component</a>.<br />\n<!-- Break into two separate lists using an HTML comment --><br />\n&#8211;   Required: No</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134435,
    "menu_order": 191,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134492",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134492",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 21,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134492/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 158831,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134492/revisions/158831"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134435"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134492"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}