{
    "id": 157167,
    "date": "2025-02-21T04:17:10",
    "date_gmt": "2025-02-21T04:17:10",
    "guid": {
        "rendered": "https://developer.wordpress.org/secure-custom-fields/features/api/api-template-file/"
    },
    "modified": "2025-03-10T18:31:03",
    "modified_gmt": "2025-03-10T18:31:03",
    "slug": "api-template-file",
    "status": "publish",
    "type": "scf-handbook",
    "link": "https://developer.wordpress.org/secure-custom-fields/code-reference/api/api-template-file/",
    "title": {
        "rendered": "API Template Global Functions"
    },
    "content": {
        "rendered": "<h2><code>get_field()</code></h2>\n<p>This function will return a custom field value for a specific field name/key + post_id.<br />\nThere is a 3rd parameter to turn on/off formatting. This means that an image field will not use<br />\nits &#8216;return option&#8217; to format the value but return only what was saved in the database</p>\n<ul>\n<li>@since   ACF 3.6</li>\n<li>@param string  $selector     The field name or key.</li>\n<li>@param mixed   $post_id      The post_id of which the value is saved against.</li>\n<li>@param boolean $format_value Whether or not to format the value as described above.</li>\n<li>@param boolean $escape_html  If we&#8217;re formatting the value, make sure it&#8217;s also HTML safe.</li>\n<li>@return mixed</li>\n</ul>\n<h2><code>the_field()</code></h2>\n<p>This function is the same as echo get_field(), but will escape the value for safe HTML output regardless of parameters.</p>\n<ul>\n<li>@since   ACF 1.0.3</li>\n<li>@param string  $selector     The field name or key.</li>\n<li>@param mixed   $post_id      The post_id of which the value is saved against.</li>\n<li>@param boolean $format_value Enable formatting of value. Default true.</li>\n<li>@return void</li>\n</ul>\n<h2><code>_acf_log_escaped_html()</code></h2>\n<p>Logs instances of ACF successfully escaping unsafe HTML.</p>\n<ul>\n<li>@since ACF 6.2.5</li>\n<li>@param string $function The function that resulted in HTML being escaped.</li>\n<li>@param string $selector The selector (field key, name, etc.) passed to that function.</li>\n<li>@param array  $field    The field being queried when HTML was escaped.</li>\n<li>@param mixed  $post_id  The post ID the function was called on.</li>\n<li>@return void</li>\n</ul>\n<h2><code>_acf_get_escaped_html_log()</code></h2>\n<p>Returns an array of instances where HTML was altered due to escaping in the_field or a shortcode.</p>\n<ul>\n<li>@since ACF 6.2.5</li>\n<li>@return array</li>\n</ul>\n<h2><code>_acf_update_escaped_html_log()</code></h2>\n<p>Updates the array of instances where HTML was altered due to escaping in the_field or a shortcode.</p>\n<ul>\n<li>@since ACF 6.2.5</li>\n<li>@param array $escaped The array of instances.</li>\n<li>@return boolean True on success, or false on failure.</li>\n</ul>\n<h2><code>_acf_delete_escaped_html_log()</code></h2>\n<p>Deletes the array of instances where HTML was altered due to escaping in the_field or a shortcode.<br />\nSince 6.2.7, also clears the legacy <code>acf_will_escape_html_log</code> option to clean up.</p>\n<ul>\n<li>@since ACF 6.2.5</li>\n<li>@return boolean True on success, or false on failure.</li>\n</ul>\n<h2><code>get_field_object()</code></h2>\n<p>This function will return an array containing all the field data for a given field_name.</p>\n<ul>\n<li>@since ACF 3.6</li>\n<li>@param string  $selector     The field name or key.</li>\n<li>@param mixed   $post_id      The post_id of which the value is saved against.</li>\n<li>@param boolean $format_value Whether to format the field value.</li>\n<li>@param boolean $load_value   Whether to load the field value.</li>\n<li>@param boolean $escape_html  Should the field return a HTML safe formatted value if $format_value is true.</li>\n<li>@return array|false $field</li>\n</ul>\n<h2><code>acf_maybe_get_field()</code></h2>\n<p>This function will return a field for the given selector.<br />\nIt will also review the field_reference to ensure the correct field is returned which makes it useful for the template API</p>\n<ul>\n<li>@since   ACF 5.2.3</li>\n<li>@param   $selector (mixed) identifier of field. Can be an ID, key, name or post object</li>\n<li>@param $post_id (mixed) the post_id of which the value is saved against</li>\n<li>@param $strict (boolean) if true, return a field only when a field key is found.</li>\n<li>@return  $field (array)</li>\n</ul>\n<h2><code>acf_maybe_get_sub_field()</code></h2>\n<p>This function will attempt to find a sub field</p>\n<ul>\n<li>@since   ACF 5.4.0</li>\n<li>@param   $post_id (int)</li>\n<li>@return $post_id (int)</li>\n</ul>\n<h2><code>get_fields()</code></h2>\n<p>This function will return an array containing all the custom field values for a specific post_id.<br />\nThe function is not very elegant and wastes a lot of PHP memory / SQL queries if you are not using all the values.</p>\n<ul>\n<li>@since   ACF 3.6</li>\n<li>@param mixed   $post_id      The post_id of which the value is saved against.</li>\n<li>@param boolean $format_value Whether or not to format the field value.</li>\n<li>@param boolean $escape_html  Should the field return a HTML safe formatted value if $format_value is true.</li>\n<li>@return array|false Associative array where field name =&gt; field value, or false on failure.</li>\n</ul>\n<h2><code>get_field_objects()</code></h2>\n<p>This function will return an array containing all the custom field objects for a specific post_id.<br />\nThe function is not very elegant and wastes a lot of PHP memory / SQL queries if you are not using all the fields / values.</p>\n<ul>\n<li>@since ACF 3.6</li>\n<li>@param mixed   $post_id      The post_id of which the value is saved against.</li>\n<li>@param boolean $format_value Whether or not to format the field value.</li>\n<li>@param boolean $load_value   Whether or not to load the field value.</li>\n<li>@param boolean $escape_html  Should the field return a HTML safe formatted value if $format_value is true.</li>\n<li>@return array|false Associative array where field name =&gt; field, or false on failure.</li>\n</ul>\n<h2><code>have_rows()</code></h2>\n<p>Checks if a field (such as Repeater or Flexible Content) has any rows of data to loop over.<br />\nThis function is intended to be used in conjunction with the_row() to step through available values.</p>\n<ul>\n<li>@since   ACF 4.3.0</li>\n<li>@param   string $selector The field name or field key.</li>\n<li>@param mixed  $post_id  The post ID where the value is saved. Defaults to the current post.</li>\n<li>@return boolean</li>\n</ul>\n<h2><code>the_row()</code></h2>\n<p>This function will progress the global repeater or flexible content value 1 row</p>\n<ul>\n<li>@since   ACF 4.3.0</li>\n<li>@param   N/A</li>\n<li>@return (array) the current row data</li>\n</ul>\n<h2><code>get_row_sub_field()</code></h2>\n<p>This function is used inside a &#8216;has_sub_field&#8217; while loop to return a sub field object</p>\n<ul>\n<li>@since   ACF 5.3.8</li>\n<li>@param   $selector (string)</li>\n<li>@return (array)</li>\n</ul>\n<h2><code>get_row_sub_value()</code></h2>\n<p>This function is used inside a &#8216;has_sub_field&#8217; while loop to return a sub field value</p>\n<ul>\n<li>@since   ACF 5.3.8</li>\n<li>@param   $selector (string)</li>\n<li>@return (mixed)</li>\n</ul>\n<h2><code>reset_rows()</code></h2>\n<p>This function will find the current loop and unset it from the global array.<br />\nTo be used when loop finishes or a break is used</p>\n<ul>\n<li>@since   ACF 5.0.0</li>\n<li>@param   $hard_reset (boolean) completely wipe the global variable, or just unset the active row</li>\n<li>@return (boolean)</li>\n</ul>\n<h2><code>has_sub_field()</code></h2>\n<p>This function is used inside a while loop to return either true or false (loop again or stop).<br />\nWhen using a repeater or flexible content field, it will loop through the rows until<br />\nthere are none left or a break is detected</p>\n<ul>\n<li>@since   ACF 1.0.3</li>\n<li>@param   $field_name (string) the field name</li>\n<li>@param $post_id (mixed) the post_id of which the value is saved against</li>\n<li>@return (boolean)</li>\n</ul>\n<h2><code>has_sub_fields()</code></h2>\n<p>Alias of has_sub_field</p>\n<h2><code>get_sub_field()</code></h2>\n<p>This function is used inside a &#8216;has_sub_field&#8217; while loop to return a sub field value</p>\n<ul>\n<li>@since ACF 1.0.3</li>\n<li>@param string  $selector     The field name or key.</li>\n<li>@param boolean $format_value Whether or not to format the value as described above.</li>\n<li>@param boolean $escape_html  If we&#8217;re formatting the value, make sure it&#8217;s also HTML safe.</li>\n<li>@return mixed</li>\n</ul>\n<h2><code>the_sub_field()</code></h2>\n<p>This function is the same as echo get_sub_field(), but will escape the value for safe HTML output.</p>\n<ul>\n<li>@since   ACF 1.0.3</li>\n<li>@param string  $field_name   The field name.</li>\n<li>@param boolean $format_value Enable formatting of value. When false, the field value will be escaped at this level with <code>acf_esc_html</code>. Default true.</li>\n<li>@return void</li>\n</ul>\n<h2><code>get_sub_field_object()</code></h2>\n<p>This function is used inside a &#8216;has_sub_field&#8217; while loop to return a sub field object</p>\n<ul>\n<li>@since ACF 3.5.8.1</li>\n<li>@param string  $selector     The field name or key.</li>\n<li>@param boolean $format_value Whether to format the field value.</li>\n<li>@param boolean $load_value   Whether to load the field value.</li>\n<li>@param boolean $escape_html  Should the field return a HTML safe formatted value.</li>\n<li>@return mixed</li>\n</ul>\n<h2><code>get_row_layout()</code></h2>\n<p>This function will return a string representation of the current row layout within a &#8216;have_rows&#8217; loop</p>\n<ul>\n<li>@since   ACF 3.0.6</li>\n<li>@return mixed</li>\n</ul>\n<h2><code>acf_shortcode()</code></h2>\n<p>This function is used to add basic shortcode support for the ACF plugin<br />\neg. [acf field=&#8221;heading&#8221; post_id=&#8221;123&#8243; format_value=&#8221;1&#8243;]</p>\n<ul>\n<li>@since ACF 1.1.1</li>\n<li>@param array $atts The shortcode attributes.</li>\n<li>@return string|void</li>\n</ul>\n<h2><code>update_field()</code></h2>\n<p>This function will update a value in the database</p>\n<ul>\n<li>@since   ACF 3.1.9</li>\n<li>@param string $selector The field name or key.</li>\n<li>@param mixed  $value    The value to save in the database.</li>\n<li>@param mixed  $post_id  The post_id of which the value is saved against.</li>\n<li>@return boolean</li>\n</ul>\n<h2><code>update_sub_field()</code></h2>\n<p>This function will update a value of a sub field in the database</p>\n<ul>\n<li>@since   ACF 5.0.0</li>\n<li>@param   $selector (mixed) the sub field name or key, or an array of ancestors</li>\n<li>@param $value (mixed) the value to save in the database</li>\n<li>@param $post_id (mixed) the post_id of which the value is saved against</li>\n<li>@return  boolean</li>\n</ul>\n<h2><code>delete_field()</code></h2>\n<p>This function will remove a value from the database</p>\n<ul>\n<li>@since   ACF 3.1.9</li>\n<li>@param   $selector (string) the field name or key</li>\n<li>@param $post_id (mixed) the post_id of which the value is saved against</li>\n<li>@return  boolean</li>\n</ul>\n<h2><code>delete_sub_field()</code></h2>\n<p>This function will delete a value of a sub field in the database</p>\n<ul>\n<li>@since   ACF 5.0.0</li>\n<li>@param   $selector (mixed) the sub field name or key, or an array of ancestors</li>\n<li>@param $value (mixed) the value to save in the database</li>\n<li>@param $post_id (mixed) the post_id of which the value is saved against</li>\n<li>@return (boolean)</li>\n</ul>\n<h2><code>add_row()</code></h2>\n<p>This function will add a row of data to a field</p>\n<ul>\n<li>@since   ACF 5.2.3</li>\n<li>@param   $selector (string)</li>\n<li>@param $row (array)</li>\n<li>@param $post_id (mixed)</li>\n<li>@return (boolean)</li>\n</ul>\n<h2><code>add_sub_row()</code></h2>\n<p>This function will add a row of data to a field</p>\n<ul>\n<li>@since   ACF 5.2.3</li>\n<li>@param   $selector (string)</li>\n<li>@param $row (array)</li>\n<li>@param $post_id (mixed)</li>\n<li>@return (boolean)</li>\n</ul>\n<h2><code>update_row()</code></h2>\n<p>This function will update a row of data to a field</p>\n<ul>\n<li>@since   ACF 5.2.3</li>\n<li>@param   $selector (string)</li>\n<li>@param $i (int)</li>\n<li>@param $row (array)</li>\n<li>@param $post_id (mixed)</li>\n<li>@return (boolean)</li>\n</ul>\n<h2><code>update_sub_row()</code></h2>\n<p>This function will add a row of data to a field</p>\n<ul>\n<li>@since   ACF 5.2.3</li>\n<li>@param   $selector (string)</li>\n<li>@param $row (array)</li>\n<li>@param $post_id (mixed)</li>\n<li>@return (boolean)</li>\n</ul>\n<h2><code>delete_row()</code></h2>\n<p>This function will delete a row of data from a field</p>\n<ul>\n<li>@since   ACF 5.2.3</li>\n<li>@param   $selector (string)</li>\n<li>@param $i (int)</li>\n<li>@param $post_id (mixed)</li>\n<li>@return (boolean)</li>\n</ul>\n<h2><code>delete_sub_row()</code></h2>\n<p>This function will add a row of data to a field</p>\n<ul>\n<li>@since   ACF 5.2.3</li>\n<li>@param   $selector (string)</li>\n<li>@param $row (array)</li>\n<li>@param $post_id (mixed)</li>\n<li>@return (boolean)</li>\n</ul>\n<h2><code>create_field()</code></h2>\n<p>Deprecated Functions</p>\n<ul>\n<li>These functions are outdated</li>\n<li>@since   ACF 1.0.0</li>\n<li>@param   n/a</li>\n<li>@return n/a</li>\n</ul>\n<hr />\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 156769,
    "menu_order": 0,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-157167",
        "scf-handbook",
        "type-scf-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook/157167",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/scf-handbook"
            }
        ],
        "version-history": [
            {
                "count": 3,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook/157167/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 157384,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook/157167/revisions/157384"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/scf-handbook/156769"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=157167"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}