{
    "id": 134414,
    "date": "2021-03-09T08:38:19",
    "date_gmt": "2021-03-09T08:38:19",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-templates/"
    },
    "modified": "2024-10-30T16:55:56",
    "modified_gmt": "2024-10-30T16:55:56",
    "slug": "block-templates",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-templates/",
    "title": {
        "rendered": "Templates"
    },
    "content": {
        "rendered": "<p>A block template is defined as a list of block items. Such blocks can have predefined attributes, placeholder content, and be static or dynamic. Block templates allow specifying a default initial state for an editor session.</p>\n<p>The scope of templates include:</p>\n<ul>\n<li>Setting a default state dynamically on the client. (like <code>defaultBlock</code>)</li>\n<li>Registered as a default for a given post type.</li>\n</ul>\n<p>Planned additions:</p>\n<ul>\n<li>Saved and assigned to pages as &#8220;page templates&#8221;.</li>\n<li>Defined in a <code>template.php</code> file or pulled from a custom post type (<code>wp_templates</code>) that is site specific.</li>\n<li>As the equivalent of the theme hierarchy.</li>\n</ul>\n<h2>API</h2>\n<p>Templates can be declared in JS or in PHP as an array of blockTypes (block name and optional attributes).</p>\n<p>The first example in PHP creates a template for posts that includes an image block to start, you can add as many or as few blocks to your template as needed.</p>\n<p>PHP example:</p>\n<pre><code class=\"language-php\">&lt;?php\nfunction myplugin_register_template() {\n    $post_type_object = get_post_type_object( 'post' );\n    $post_type_object-&gt;template = array(\n        array( 'core/image' ),\n    );\n}\nadd_action( 'init', 'myplugin_register_template' );\n</code></pre>\n<p>The following example in JavaScript creates a new block using <a href=\"https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/inner-blocks/README.md\">InnerBlocks</a> and templates, when inserted creates a set of blocks based off the template.</p>\n<pre><code class=\"language-js\">const el = React.createElement;\nconst { registerBlockType } = wp.blocks;\nconst { InnerBlocks } = wp.blockEditor;\n\nconst BLOCKS_TEMPLATE = [\n    [ 'core/image', {} ],\n    [ 'core/paragraph', { placeholder: 'Image Details' } ],\n];\n\nregisterBlockType( 'myplugin/template', {\n    title: 'My Template Block',\n    category: 'widgets',\n    edit: ( props ) =&gt; {\n        return el( InnerBlocks, {\n            template: BLOCKS_TEMPLATE,\n            templateLock: false,\n        } );\n    },\n    save: ( props ) =&gt; {\n        return el( InnerBlocks.Content, {} );\n    },\n} );\n</code></pre>\n<p>See the <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/metabox/#step-4-finishing-touches\">Meta Block Tutorial</a> for a full example of a template in use.</p>\n<h2>Block attributes</h2>\n<p>To find a comprehensive list of all block attributes that you can define in a template, consult the block&#8217;s <code>block.json</code> file, and look at the <code>attributes</code> and <code>supports</code> values.</p>\n<p>For example, <a href=\"https://github.com/WordPress/gutenberg/blob/c62ccd80c7c6abb85740cf8745439029bf0f4d35/packages/block-library/src/heading/block.json#L5-L25\">packages/block-library/src/heading/block.json</a> shows that the block has a <code>level</code> attribute, and supports the <code>anchor</code> parameter.</p>\n<p>If you don&#8217;t have the Gutenberg plugin installed, you can find <code>block.json</code> files inside <code>wp-includes/blocks/heading/block.json</code>.</p>\n<h2>Custom post types</h2>\n<p>A custom post type can register its own template during registration:</p>\n<pre><code class=\"language-php\">function myplugin_register_book_post_type() {\n    $args = array(\n        'public' =&gt; true,\n        'label'  =&gt; 'Books',\n        'show_in_rest' =&gt; true,\n        'template' =&gt; array(\n            array( 'core/image', array(\n                'align' =&gt; 'left',\n            ) ),\n            array( 'core/heading', array(\n                'placeholder' =&gt; 'Add Author...',\n            ) ),\n            array( 'core/paragraph', array(\n                'placeholder' =&gt; 'Add Description...',\n            ) ),\n        ),\n    );\n    register_post_type( 'book', $args );\n}\nadd_action( 'init', 'myplugin_register_book_post_type' );\n</code></pre>\n<h2>Locking</h2>\n<p>Sometimes the intention might be to lock the template on the UI so that the blocks presented cannot be manipulated. This is achieved with a <code>template_lock</code> property.</p>\n<pre><code class=\"language-php\">function myplugin_register_template() {\n    $post_type_object = get_post_type_object( 'post' );\n    $post_type_object-&gt;template = array(\n        array( 'core/paragraph', array(\n            'placeholder' =&gt; 'Add Description...',\n        ) ),\n    );\n    $post_type_object-&gt;template_lock = 'all';\n}\nadd_action( 'init', 'myplugin_register_template' );\n</code></pre>\n<p><em>Options:</em></p>\n<ul>\n<li><code>contentOnly</code> \u2014 prevents all operations. Additionally, the block types that don&#8217;t have content are hidden from the list view and can&#8217;t gain focus within the block list. Unlike the other lock types, this is not overridable by children.</li>\n<li><code>all</code> \u2014 prevents all operations. It is not possible to insert new blocks, move existing blocks, or delete blocks.</li>\n<li><code>insert</code> \u2014 prevents inserting or removing blocks, but allows moving existing blocks.</li>\n</ul>\n<p>Lock settings can be inherited by InnerBlocks. If <code>templateLock</code> is not set in an InnerBlocks area, the locking of the parent InnerBlocks area is used. If the block is a top level block, the locking configuration of the current post type is used.</p>\n<h2>Individual block locking</h2>\n<p>Alongside template level locking, you can lock individual blocks; you can do this using a <code>lock</code> attribute on the attributes level. Block-level lock takes priority over the <code>templateLock</code> feature. Currently, you can lock moving and removing blocks.</p>\n<pre><code class=\"language-js\">attributes: {\n  // Prevent a block from being moved or removed.\n  lock: {\n    remove: true,\n    move: true,\n  }\n}\n</code></pre>\n<p><em>Options:</em></p>\n<ul>\n<li><code>remove</code> \u2014 Locks the ability of a block from being removed.</li>\n<li><code>move</code> \u2014 Locks the ability of a block from being moved.</li>\n</ul>\n<p>You can use this with <code>templateLock</code> to lock all blocks except a single block by using <code>false</code> in <code>remove</code> or <code>move</code>.</p>\n<pre><code class=\"language-php\">$template = array(\n    array( 'core/image', array(\n        'align' =&gt; 'left',\n    ) ),\n    array( 'core/heading', array(\n        'placeholder' =&gt; 'Add Author...',\n    ) ),\n    // Allow a Paragraph block to be moved or removed.\n    array( 'core/paragraph', array(\n        'placeholder' =&gt; 'Add Description...',\n        'lock' =&gt; array(\n            'move'   =&gt; false,\n            'remove' =&gt; false,\n        ),\n    ) ),\n);\n</code></pre>\n<h2>Nested templates</h2>\n<p>Container blocks like the columns blocks also support templates. This is achieved by assigning a nested template to the block.</p>\n<pre><code class=\"language-php\">$template = array(\n    array( 'core/paragraph', array(\n        'placeholder' =&gt; 'Add a root-level paragraph',\n    ) ),\n    array( 'core/columns', array(), array(\n        array( 'core/column', array(), array(\n            array( 'core/image', array() ),\n        ) ),\n        array( 'core/column', array(), array(\n            array( 'core/paragraph', array(\n                'placeholder' =&gt; 'Add a inner paragraph'\n            ) ),\n        ) ),\n    ) )\n);\n</code></pre>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134406,
    "menu_order": 72,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134414",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134414",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 15,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134414/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 151300,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134414/revisions/151300"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134406"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134414"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}