{
    "id": 141748,
    "date": "2022-07-26T12:54:48",
    "date_gmt": "2022-07-26T12:54:48",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-keyboard-shortcuts/"
    },
    "modified": "2025-01-07T18:34:07",
    "modified_gmt": "2025-01-07T18:34:07",
    "slug": "data-core-keyboard-shortcuts",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-keyboard-shortcuts/",
    "title": {
        "rendered": "The Keyboard Shortcuts Data"
    },
    "content": {
        "rendered": "<p>Namespace: <code>core/keyboard-shortcuts</code>.</p>\n<h2>Selectors</h2>\n<p><!-- START TOKEN(Autogenerated selectors|../../../packages/keyboard-shortcuts/src/store/selectors.js) --></p>\n<h3>getAllShortcutKeyCombinations</h3>\n<p>Returns the shortcuts that include aliases for a given shortcut name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { createInterpolateElement } from '@wordpress/element';\nimport { sprintf } from '@wordpress/i18n';\n\nconst ExampleComponent = () =&gt; {\n    const allShortcutKeyCombinations = useSelect(\n        ( select ) =&gt;\n            select( keyboardShortcutsStore ).getAllShortcutKeyCombinations(\n                'core/editor/next-region'\n            ),\n        []\n    );\n\n    return (\n        allShortcutKeyCombinations.length &gt; 0 &amp;&amp; (\n            &lt;ul&gt;\n                { allShortcutKeyCombinations.map(\n                    ( { character, modifier }, index ) =&gt; (\n                        &lt;li key={ index }&gt;\n                            { createInterpolateElement(\n                                sprintf(\n                                    'Character: &lt;code&gt;%s&lt;/code&gt; / Modifier: &lt;code&gt;%s&lt;/code&gt;',\n                                    character,\n                                    modifier\n                                ),\n                                {\n                                    code: &lt;code /&gt;,\n                                }\n                            ) }\n                        &lt;/li&gt;\n                    )\n                ) }\n            &lt;/ul&gt;\n        )\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global state.</li>\n<li><em>name</em> <code>string</code>: Shortcut name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>WPShortcutKeyCombination[]</code>: Key combinations.</li>\n</ul>\n<h3>getAllShortcutRawKeyCombinations</h3>\n<p>Returns the raw representation of all the keyboard combinations of a given shortcut name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { createInterpolateElement } from '@wordpress/element';\nimport { sprintf } from '@wordpress/i18n';\n\nconst ExampleComponent = () =&gt; {\n    const allShortcutRawKeyCombinations = useSelect(\n        ( select ) =&gt;\n            select( keyboardShortcutsStore ).getAllShortcutRawKeyCombinations(\n                'core/editor/next-region'\n            ),\n        []\n    );\n\n    return (\n        allShortcutRawKeyCombinations.length &gt; 0 &amp;&amp; (\n            &lt;ul&gt;\n                { allShortcutRawKeyCombinations.map(\n                    ( shortcutRawKeyCombination, index ) =&gt; (\n                        &lt;li key={ index }&gt;\n                            { createInterpolateElement(\n                                sprintf(\n                                    ' &lt;code&gt;%s&lt;/code&gt;',\n                                    shortcutRawKeyCombination\n                                ),\n                                {\n                                    code: &lt;code /&gt;,\n                                }\n                            ) }\n                        &lt;/li&gt;\n                    )\n                ) }\n            &lt;/ul&gt;\n        )\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global state.</li>\n<li><em>name</em> <code>string</code>: Shortcut name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string[]</code>: Shortcuts.</li>\n</ul>\n<h3>getCategoryShortcuts</h3>\n<p>Returns the shortcut names list for a given category name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () =&gt; {\n    const categoryShortcuts = useSelect(\n        ( select ) =&gt;\n            select( keyboardShortcutsStore ).getCategoryShortcuts( 'block' ),\n        []\n    );\n\n    return (\n        categoryShortcuts.length &gt; 0 &amp;&amp; (\n            &lt;ul&gt;\n                { categoryShortcuts.map( ( categoryShortcut ) =&gt; (\n                    &lt;li key={ categoryShortcut }&gt;{ categoryShortcut }&lt;/li&gt;\n                ) ) }\n            &lt;/ul&gt;\n        )\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global state.</li>\n<li><em>name</em> <code>string</code>: Category name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string[]</code>: Shortcut names.</li>\n</ul>\n<h3>getShortcutAliases</h3>\n<p>Returns the aliases for a given shortcut name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { createInterpolateElement } from '@wordpress/element';\nimport { sprintf } from '@wordpress/i18n';\nconst ExampleComponent = () =&gt; {\n    const shortcutAliases = useSelect(\n        ( select ) =&gt;\n            select( keyboardShortcutsStore ).getShortcutAliases(\n                'core/editor/next-region'\n            ),\n        []\n    );\n\n    return (\n        shortcutAliases.length &gt; 0 &amp;&amp; (\n            &lt;ul&gt;\n                { shortcutAliases.map( ( { character, modifier }, index ) =&gt; (\n                    &lt;li key={ index }&gt;\n                        { createInterpolateElement(\n                            sprintf(\n                                'Character: &lt;code&gt;%s&lt;/code&gt; / Modifier: &lt;code&gt;%s&lt;/code&gt;',\n                                character,\n                                modifier\n                            ),\n                            {\n                                code: &lt;code /&gt;,\n                            }\n                        ) }\n                    &lt;/li&gt;\n                ) ) }\n            &lt;/ul&gt;\n        )\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global state.</li>\n<li><em>name</em> <code>string</code>: Shortcut name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>WPShortcutKeyCombination[]</code>: Key combinations.</li>\n</ul>\n<h3>getShortcutDescription</h3>\n<p>Returns the shortcut description given its name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nconst ExampleComponent = () =&gt; {\n    const shortcutDescription = useSelect(\n        ( select ) =&gt;\n            select( keyboardShortcutsStore ).getShortcutDescription(\n                'core/editor/next-region'\n            ),\n        []\n    );\n\n    return shortcutDescription ? (\n        &lt;div&gt;{ shortcutDescription }&lt;/div&gt;\n    ) : (\n        &lt;div&gt;{ __( 'No description.' ) }&lt;/div&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global state.</li>\n<li><em>name</em> <code>string</code>: Shortcut name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?string</code>: Shortcut description.</li>\n</ul>\n<h3>getShortcutKeyCombination</h3>\n<p>Returns the main key combination for a given shortcut name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { createInterpolateElement } from '@wordpress/element';\nimport { sprintf } from '@wordpress/i18n';\nconst ExampleComponent = () =&gt; {\n    const { character, modifier } = useSelect(\n        ( select ) =&gt;\n            select( keyboardShortcutsStore ).getShortcutKeyCombination(\n                'core/editor/next-region'\n            ),\n        []\n    );\n\n    return (\n        &lt;div&gt;\n            { createInterpolateElement(\n                sprintf(\n                    'Character: &lt;code&gt;%s&lt;/code&gt; / Modifier: &lt;code&gt;%s&lt;/code&gt;',\n                    character,\n                    modifier\n                ),\n                {\n                    code: &lt;code /&gt;,\n                }\n            ) }\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global state.</li>\n<li><em>name</em> <code>string</code>: Shortcut name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>WPShortcutKeyCombination?</code>: Key combination.</li>\n</ul>\n<h3>getShortcutRepresentation</h3>\n<p>Returns a string representing the main key combination for a given shortcut name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { sprintf } from '@wordpress/i18n';\n\nconst ExampleComponent = () =&gt; {\n    const { display, raw, ariaLabel } = useSelect( ( select ) =&gt; {\n        return {\n            display: select( keyboardShortcutsStore ).getShortcutRepresentation(\n                'core/editor/next-region'\n            ),\n            raw: select( keyboardShortcutsStore ).getShortcutRepresentation(\n                'core/editor/next-region',\n                'raw'\n            ),\n            ariaLabel: select(\n                keyboardShortcutsStore\n            ).getShortcutRepresentation(\n                'core/editor/next-region',\n                'ariaLabel'\n            ),\n        };\n    }, [] );\n\n    return (\n        &lt;ul&gt;\n            &lt;li&gt;{ sprintf( 'display string: %s', display ) }&lt;/li&gt;\n            &lt;li&gt;{ sprintf( 'raw string: %s', raw ) }&lt;/li&gt;\n            &lt;li&gt;{ sprintf( 'ariaLabel string: %s', ariaLabel ) }&lt;/li&gt;\n        &lt;/ul&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Global state.</li>\n<li><em>name</em> <code>string</code>: Shortcut name.</li>\n<li><em>representation</em> <code>keyof FORMATTING_METHODS</code>: Type of representation (display, raw, ariaLabel).</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?string</code>: Shortcut representation.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated selectors|../../../packages/keyboard-shortcuts/src/store/selectors.js) --></p>\n<h2>Actions</h2>\n<p><!-- START TOKEN(Autogenerated actions|../../../packages/keyboard-shortcuts/src/store/actions.js) --></p>\n<h3>registerShortcut</h3>\n<p>Returns an action object used to register a new keyboard shortcut.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { useEffect } from 'react';\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\nconst ExampleComponent = () =&gt; {\n    const { registerShortcut } = useDispatch( keyboardShortcutsStore );\n\n    useEffect( () =&gt; {\n        registerShortcut( {\n            name: 'custom/my-custom-shortcut',\n            category: 'my-category',\n            description: __( 'My custom shortcut' ),\n            keyCombination: {\n                modifier: 'primary',\n                character: 'j',\n            },\n        } );\n    }, [] );\n\n    const shortcut = useSelect(\n        ( select ) =&gt;\n            select( keyboardShortcutsStore ).getShortcutKeyCombination(\n                'custom/my-custom-shortcut'\n            ),\n        []\n    );\n\n    return shortcut ? (\n        &lt;p&gt;{ __( 'Shortcut is registered.' ) }&lt;/p&gt;\n    ) : (\n        &lt;p&gt;{ __( 'Shortcut is not registered.' ) }&lt;/p&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>config</em> <code>WPShortcutConfig</code>: Shortcut config.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: action.</li>\n</ul>\n<h3>unregisterShortcut</h3>\n<p>Returns an action object used to unregister a keyboard shortcut.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { useEffect } from 'react';\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\nconst ExampleComponent = () =&gt; {\n    const { unregisterShortcut } = useDispatch( keyboardShortcutsStore );\n\n    useEffect( () =&gt; {\n        unregisterShortcut( 'core/editor/next-region' );\n    }, [] );\n\n    const shortcut = useSelect(\n        ( select ) =&gt;\n            select( keyboardShortcutsStore ).getShortcutKeyCombination(\n                'core/editor/next-region'\n            ),\n        []\n    );\n\n    return shortcut ? (\n        &lt;p&gt;{ __( 'Shortcut is not unregistered.' ) }&lt;/p&gt;\n    ) : (\n        &lt;p&gt;{ __( 'Shortcut is unregistered.' ) }&lt;/p&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Shortcut name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: action.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated actions|../../../packages/keyboard-shortcuts/src/store/actions.js) --></p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134606,
    "menu_order": 346,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-141748",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141748",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 6,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141748/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155925,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141748/revisions/155925"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134606"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=141748"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}