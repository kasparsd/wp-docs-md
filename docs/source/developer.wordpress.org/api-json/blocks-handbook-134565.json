{
    "id": 134565,
    "date": "2021-03-09T08:38:23",
    "date_gmt": "2021-03-09T08:38:23",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-hooks/"
    },
    "modified": "2024-10-30T16:55:23",
    "modified_gmt": "2024-10-30T16:55:23",
    "slug": "packages-hooks",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-hooks/",
    "title": {
        "rendered": "@wordpress/hooks"
    },
    "content": {
        "rendered": "<p>A lightweight &amp; efficient EventManager for JavaScript.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/hooks --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h3>Usage</h3>\n<p>In your JavaScript project, use hooks as follows:</p>\n<pre><code class=\"language-javascript\">import { createHooks } from '@wordpress/hooks';\n\nmyObject.hooks = createHooks();\nmyObject.hooks.addAction(); //etc...\n</code></pre>\n<h4>The global instance</h4>\n<p>In the above example, we are creating a custom instance of the <code>Hooks</code> object and registering hooks there. The package also creates a default global instance that&#8217;s accessible through the <code>defaultHooks</code> named exports, and its methods are also separately exported one-by-one.</p>\n<p>In the WordPress context, that enables API functions to be called via the global <code>wp.hooks</code> object, like <code>wp.hooks.addAction()</code>, etc.</p>\n<p>One notable difference between the JS and PHP hooks API is that in the JS version, <code>addAction()</code> and <code>addFilter()</code> also need to include a namespace as the second argument. Namespace uniquely identifies a callback in the form <code>vendor/plugin/function</code>.</p>\n<h3>API Usage</h3>\n<ul>\n<li><code>createHooks()</code></li>\n<li><code>addAction( 'hookName', 'namespace', callback, priority )</code></li>\n<li><code>addFilter( 'hookName', 'namespace', callback, priority )</code></li>\n<li><code>removeAction( 'hookName', 'namespace' )</code></li>\n<li><code>removeFilter( 'hookName', 'namespace' )</code></li>\n<li><code>removeAllActions( 'hookName' )</code></li>\n<li><code>removeAllFilters( 'hookName' )</code></li>\n<li><code>doAction( 'hookName', arg1, arg2, moreArgs, finalArg )</code></li>\n<li><code>doActionAsync( 'hookName', arg1, arg2, moreArgs, finalArg )</code></li>\n<li><code>applyFilters( 'hookName', content, arg1, arg2, moreArgs, finalArg )</code></li>\n<li><code>applyFiltersAsync( 'hookName', content, arg1, arg2, moreArgs, finalArg )</code></li>\n<li><code>doingAction( 'hookName' )</code></li>\n<li><code>doingFilter( 'hookName' )</code></li>\n<li><code>didAction( 'hookName' )</code></li>\n<li><code>didFilter( 'hookName' )</code></li>\n<li><code>hasAction( 'hookName', 'namespace' )</code></li>\n<li><code>hasFilter( 'hookName', 'namespace' )</code></li>\n<li><code>actions</code></li>\n<li><code>filters</code></li>\n<li><code>defaultHooks</code></li>\n</ul>\n<h3>Events on action/filter add or remove</h3>\n<p>Whenever an action or filter is added or removed, a matching <code>hookAdded</code> or <code>hookRemoved</code> action is triggered.</p>\n<ul>\n<li><code>hookAdded</code> action is triggered when <code>addFilter()</code> or <code>addAction()</code> method is called, passing values for <code>hookName</code>, <code>functionName</code>, <code>callback</code> and <code>priority</code>.</li>\n<li><code>hookRemoved</code> action is triggered when <code>removeFilter()</code> or <code>removeAction()</code> method is called, passing values for <code>hookName</code> and <code>functionName</code>.</li>\n</ul>\n<h3>The <code>all</code> hook</h3>\n<p>In non-minified builds developers can register a filter or action that will be called on <em>all</em> hooks, for example: <code>addAction( 'all', 'namespace', callbackFunction );</code>. Useful for debugging, the code supporting the <code>all</code> hook is stripped from the production code for performance reasons.</p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 283,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134565",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134565",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 14,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134565/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155345,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134565/revisions/155345"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134565"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}