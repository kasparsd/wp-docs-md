{
    "id": 134533,
    "date": "2021-03-09T08:38:22",
    "date_gmt": "2021-03-09T08:38:22",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-library/"
    },
    "modified": "2024-10-30T16:55:31",
    "modified_gmt": "2024-10-30T16:55:31",
    "slug": "packages-block-library",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-library/",
    "title": {
        "rendered": "@wordpress/block-library"
    },
    "content": {
        "rendered": "<p>Block library for the WordPress editor.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/block-library --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>registerCoreBlocks</h3>\n<p>Function to register core blocks provided by the block editor.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { registerCoreBlocks } from '@wordpress/block-library';\n\nregisterCoreBlocks();\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blocks</em> <code>Array</code>: An optional array of the core blocks being registered.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Registering individual blocks</h2>\n<ol>\n<li>When you only care about registering the block when file gets imported:\n<pre><code class=\"language-js\">import '@wordpress/block-library/build-module/verse/init';\n</code></pre>\n</li>\n<li>When you want to use the reference to the block after it gets automatically registered:\n<pre><code class=\"language-js\">import verseBlock from '@wordpress/block-library/build-module/verse/init';\n</code></pre>\n</li>\n<li>When you need a full control over when the block gets registered:\n<pre><code class=\"language-js\">import { init } from '@wordpress/block-library/build-module/verse';\n\nconst verseBlock = init();\n</code></pre>\n</li>\n</ol>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n<h3>Adding new blocks</h3>\n<p>\u26a0\ufe0f Adding new blocks to this package <strong>requires</strong> additional steps!</p>\n<ol>\n<li>Do not forget to register a new core block in the <a href=\"https://github.com/WordPress/gutenberg/blob/trunk/packages/block-library/src/index.js\"><code>index.js</code></a> file of this package. For example, if you were to add the new core block called <code>core/blinking-paragraph</code>, you would have to add something like:\n<pre><code class=\"language-js\">// packages/block-library/src/index.js\nimport * as blinkingParagraph from './blinking-paragraph';\n</code></pre>\n<p>Then add <code>blinkingParagraph</code> to the list in the <code>getAllBlocks()</code> function.</p>\n<p>If it&#8217;s experimental, add the following property to <code>block.json</code>:</p>\n<pre><code class=\"language-json\">{\n    \"__experimental\": \"true\"\n}\n</code></pre>\n</li>\n<li>Register the block in the <code>gutenberg_reregister_core_block_types()</code> function of the <a href=\"https://github.com/WordPress/gutenberg/blob/trunk/lib/blocks.php\"><code>lib/blocks.php</code></a> file. Add it to the <code>block_folders</code> array if it&#8217;s a <a href=\"https://developer.wordpress.org/block-editor/getting-started/glossary/#static-block\">static block</a> or to the <code>block_names</code> array if it&#8217;s a <a href=\"https://developer.wordpress.org/block-editor/getting-started/glossary/#dynamic-block\">dynamic block</a>.</p>\n</li>\n<li>\n<p>Add <code>init.js</code> file to the directory of the new block:</p>\n<pre><code class=\"language-js\">/**\n * Internal dependencies\n */\nimport { init } from './';\n\nexport default init();\n</code></pre>\n<p>This file is used when using the option to register individual block from the <code>@wordpress/block-library</code> package.</p>\n</li>\n<li>\n<p>If the block exposes a script module on the front end, it must be included in the package&#8217;s <code>package.json</code> file in the <code>wpScriptModules</code> object. This will include the script module when it&#8217;s bundled for use in WordPress. See <a href=\"../README.md\">the packages README for more details.</a>:</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"@wordpress/block-library\",\n    \"wpScriptModuleExports\": {\n        \"./blinking-paragraph/view\": \"./build-module/blinking-paragraph/view.js\",\n        \"./image/view\": \"./build-module/image/view.js\"\n        // Add any new script modules here.\n    }\n}\n</code></pre>\n<p>For every dynamic block, you need to manually enqueue the view script module in <code>render_callback</code> of the block, example:</p>\n<pre><code class=\"language-php\">function render_block_core_blinking_paragraph( $attributes, $content ) {\n    $should_load_view_script = ! empty( $attributes['isInteractive'] );\n    if ( $should_load_view_script ) {\n        wp_enqueue_script_module( '@wordpress/block-library/blinking-paragraph' );\n    }\n\n    return $content;\n}\n</code></pre>\n</li>\n</ol>\n<h3>Naming convention for PHP functions</h3>\n<p>All PHP function names declared within the subdirectories of the <code>packages/block-library/src/</code> directory should start with one of the following prefixes:</p>\n<ul>\n<li><code>block_core_&lt;directory_name&gt;</code></li>\n<li><code>render_block_core_&lt;directory_name&gt;</code></li>\n<li><code>register_block_core_&lt;directory_name&gt;</code></li>\n</ul>\n<p>In this context, <code>&lt;directory_name&gt;</code> represents the name of the directory where the corresponding <code>.php</code> file is located.<br />\nThe directory name is converted to lowercase, and any characters except for letters and digits are replaced with underscores.</p>\n<h4>Example:</h4>\n<p>For the PHP functions declared in the <code>packages/block-library/src/my-block/index.php</code> file, the correct prefixes would be:</p>\n<ul>\n<li><code>block_core_my_block</code></li>\n<li><code>render_block_core_my_block</code></li>\n<li><code>register_block_core_my_block</code></li>\n</ul>\n<h4>Using plugin-specific prefixes/suffixes</h4>\n<p>Unlike in <a href=\"https://github.com/WordPress/gutenberg/blob/trunk/lib/README.md\">PHP code in the /lib directory</a>, you should generally avoid applying plugin-specific prefixes/suffixes such as <code>gutenberg_</code> to functions and other code in block PHP files.</p>\n<p>There are times, however, when blocks may need to use Gutenberg functions even when a Core-equivalent exists, for example, where a Gutenberg function relies on code that is only available in the plugin.</p>\n<p>In such cases, you can use the corresponding Core <code>wp_</code> function in the block PHP code, and add its name to <a href=\"https://github.com/WordPress/gutenberg/blob/trunk/tools/webpack/blocks.js#L30\">a list of prefixed functions in the Webpack configuration file</a>.</p>\n<p>At build time, Webpack will search for <code>wp_</code> functions in that list and replace them with their <code>gutenberg_</code> equivalents. This process ensures that the plugin calls the <code>gutenberg_</code> functions, but the block will still call the Core <code>wp_</code> function when updates are back ported.</p>\n<p>Webpack assumes that, prefixes aside, the functions&#8217; names are identical: <code>wp_get_something_useful()</code> will be replaced with <code>gutenberg_get_something_useful()</code>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 246,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134533",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134533",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 20,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134533/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155614,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134533/revisions/155614"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134533"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}