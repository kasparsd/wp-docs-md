{
    "id": 150297,
    "date": "2023-11-28T18:10:01",
    "date_gmt": "2023-11-28T18:10:01",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/getting-started/fundamentals/javascript-in-the-block-editor/"
    },
    "modified": "2025-02-22T02:34:07",
    "modified_gmt": "2025-02-22T02:34:07",
    "slug": "javascript-in-the-block-editor",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/getting-started/fundamentals/javascript-in-the-block-editor/",
    "title": {
        "rendered": "Working with JavaScript for the Block Editor"
    },
    "content": {
        "rendered": "<p>Developing blocks for the Block Editor often involves using modern JavaScript (ESNext and JSX), and most examples here in the Block Editor Handbook are written in these syntaxes.</p>\n<p>However, this form of JavaScript must be transformed into a browser-compatible format, necessitating a build step. This process transforms, bundles, and optimizes JavaScript source code and related assets into a format suitable for production environments.</p>\n<h2>JavaScript with a build process</h2>\n<p>Using a build process for block development unlocks the full potential of modern JavaScript, facilitating the use of ESNext and JSX.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview#standardization_process\">ESNext</a> refers to JavaScript&#8217;s most recent syntax and features. <a href=\"https://react.dev/learn/writing-markup-with-jsx\">JSX</a> is a syntax extension developed by the React project that enables you to write JavaScript that resembles HTML.</p>\n<p>Since browsers cannot directly execute ESNext and JSX, these syntaxes must be transformed into browser-compatible JavaScript.</p>\n<p><a href=\"https://webpack.js.org/concepts/why-webpack/\">webpack</a> is a pluggable tool that processes and bundles JavaScript for browser compatibility. <a href=\"https://babeljs.io/\">Babel</a>, a plugin for webpack, converts ESNext and JSX into standard JavaScript.</p>\n<p>Configuring webpack and Babel can be challenging, so it&#8217;s recommended that you use the <a href=\"https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/\"><code>@wordpress/scripts</code></a> package. This tool simplifies development by preconfiguring both, so you rarely need to write custom webpack or Babel configurations.</p>\n<p>For an introduction, refer to the <a href=\"https://developer.wordpress.org/block-editor/getting-started/devenv/get-started-with-wp-scripts/\">Get started with wp-scripts</a> guide.</p>\n<h3>An overview of <code>wp-scripts</code></h3>\n<p>The diagram below provides an overview of the build process when using the <code>wp-scripts</code> package. It&#8217;s designed to work out of the box with <a href=\"https://developer.wordpress.org/block-editor/getting-started/devenv/get-started-with-wp-scripts/#basic-usage\">standard configurations</a> for development and production environments.</p>\n<p><a href=\"https://i0.wp.com/developer.wordpress.org/files/2023/11/build-process.png?ssl=1\" title=\"Open Build Process diagram image\"><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/developer.wordpress.org/files/2023/11/build-process.png?ssl=1\" alt=\"Open Build Process diagram image\" /></a></p>\n<ul>\n<li><strong>Production Mode (<code>npm run build</code>):</strong> In this mode, <code>wp-scripts</code> compiles your JavaScript, minifying the output to reduce file size and improve loading times in the browser. This is ideal for deploying your code to a live site.</p>\n</li>\n<li>\n<p><strong>Development Mode (<code>npm start</code>):</strong> This mode is tailored for active development. It skips minification for easier debugging, generates source maps for better error tracking, and watches your source files for changes. When a change is detected, it automatically rebuilds the affected files, allowing you to see updates in real-time.</p>\n</li>\n</ul>\n<p>The <code>wp-scripts</code> package also facilitates the use of JavaScript modules, allowing code distribution across multiple files and resulting in a streamlined bundle after the build process. The <a href=\"https://github.com/WordPress/block-development-examples/tree/trunk/plugins/data-basics-59c8f8\">block-development-example</a> GitHub repository provides some good examples.</p>\n<div class=\"callout callout-tip\">\n    In most situations, no customization will be needed, but you can provide a <a href=\"https://developer.wordpress.org/block-editor/reference-guides/packages/packages-scripts/#provide-your-own-webpack-config\"><code>webpack.config.js</code></a> when using <code>wp-scripts</code> to modify the build process to suit your needs.\n</div>\n<h2>JavaScript without a build process</h2>\n<p>Integrating JavaScript into your WordPress projects without a build process can be the most straightforward approach in specific scenarios. This is particularly true for projects that don&#8217;t leverage JSX or other advanced JavaScript features requiring compilation.</p>\n<p>When you opt out of a build process, you interact directly with WordPress&#8217;s <a href=\"https://developer.wordpress.org/block-editor/reference-guides/packages/\">JavaScript APIs</a> through the global <code>wp</code> object. This means that all the methods and packages provided by WordPress are readily available, but with one caveat: you must manually manage script dependencies. This is done by adding <a href=\"https://developer.wordpress.org/block-editor/contributors/code/scripts/\">the handle</a> of each corresponding package to the dependency array of your enqueued JavaScript file.</p>\n<p>For example, suppose you&#8217;re creating a script that registers a new block <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/\">variation</a> using the <code>registerBlockVariation</code> function from the <a href=\"https://developer.wordpress.org/block-editor/reference-guide/packages/packages-blocks/\"><code>blocks</code></a> package. You must include <code>wp-blocks</code> in your script&#8217;s dependency array. This guarantees that the <code>wp.blocks.registerBlockVariation</code> method is available and defined by the time your script executes.</p>\n<p>In the following example, the <code>wp-blocks</code> dependency is defined when enqueuing the <code>variations.js</code> file.</p>\n<pre><code class=\"language-php\">function example_enqueue_block_variations() {\n    wp_enqueue_script(\n        'example-enqueue-block-variations',\n        get_template_directory_uri() . '/assets/js/variations.js',\n        array( 'wp-blocks' ),\n        wp_get_theme()-&gt;get( 'Version' ),\n        false\n    );\n}\nadd_action( 'enqueue_block_editor_assets', 'example_enqueue_block_variations' );\n</code></pre>\n<p>Then in the <code>variations.js</code> file, you can register a new variation for the Media &amp; Text block like so:</p>\n<pre><code class=\"language-js\">wp.blocks.registerBlockVariation(\n    'core/media-text',\n    {\n        name: 'media-text-custom',\n        title: 'Media &amp; Text Custom',\n        attributes: {\n            align: 'wide',\n            backgroundColor: 'tertiary'\n        },\n    }\n);\n</code></pre>\n<p>For scripts that need to run in the Block Editor, make sure you use the <a href=\"https://developer.wordpress.org/reference/hooks/enqueue_block_editor_assets/\"><code>enqueue_block_editor_assets</code></a> hook coupled with the standard <a href=\"https://developer.wordpress.org/reference/functions/wp_enqueue_script/\"><code>wp_enqueue_script</code></a> function.</p>\n<p>Refer to <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/enqueueing-assets-in-the-editor/\">Enqueueing assets in the Editor</a> for more information.</p>\n<div class=\"callout callout-tip\">\n    Open your browser&#8217;s dev tools and try running <code>wp.data.select('core/editor').getBlocks()</code> in the console when editing a post or when using the Site Editor. This command will return all available blocks.\n</div>\n<h2>Additional resources</h2>\n<ul>\n<li><a href=\"https://developer.wordpress.org/block-editor/reference-guides/packages/\">Package reference</a></li>\n<li><a href=\"https://developer.wordpress.org/block-editor/getting-started/devenv/get-started-with-wp-scripts/\">Get started with wp-scripts</a></li>\n<li><a href=\"https://developer.wordpress.org/block-editor/how-to-guides/enqueueing-assets-in-the-editor/\">Enqueueing assets in the Editor</a></li>\n<li><a href=\"https://developer.wordpress.org/block-editor/contributors/code/scripts/\">WordPress package handles</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">JavaScript reference</a> | MDN Web Docs</li>\n<li><a href=\"https://github.com/WordPress/block-development-examples\">block-development-examples</a> | GitHub repository</li>\n<li><a href=\"https://github.com/wptrainingteam/block-theme-examples\">block-theme-examples</a> | GitHub repository</li>\n<li><a href=\"https://developer.wordpress.org/news/2023/04/how-webpack-and-wordpress-packages-interact/\">How webpack and WordPress packages interact</a> | Developer Blog</li>\n<li><a href=\"https://excalidraw.com/#json=4aNG9JUti3pMnsfoga35b,ihEAI8p5dwkpjWr6gQmjuw\">Build process diagram</a></li>\n</ul>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 150294,
    "menu_order": 17,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-150297",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/150297",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 12,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/150297/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 157339,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/150297/revisions/157339"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/150294"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=150297"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}