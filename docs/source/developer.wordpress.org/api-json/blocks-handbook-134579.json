{
    "id": 134579,
    "date": "2021-03-09T08:38:23",
    "date_gmt": "2021-03-09T08:38:23",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-media-utils/"
    },
    "modified": "2025-02-15T02:34:11",
    "modified_gmt": "2025-02-15T02:34:11",
    "slug": "packages-media-utils",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-media-utils/",
    "title": {
        "rendered": "@wordpress/media-utils"
    },
    "content": {
        "rendered": "<p>The media utils package provides a set of artifacts to abstract media functionality that may be useful in situations where there is a need to deal with media uploads or with the media library, e.g., artifacts that extend or implement a block-editor.<br />\nThis package is meant to be used by the WordPress core. It may not work as expected outside WordPress usages.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/media-utils --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>Attachment</h3>\n<p>Undocumented declaration.</p>\n<h3>MediaUpload</h3>\n<p>Undocumented declaration.</p>\n<h3>privateApis</h3>\n<p>Private @wordpress/media-utils APIs.</p>\n<h3>RestAttachment</h3>\n<p>Undocumented declaration.</p>\n<h3>transformAttachment</h3>\n<p>Transforms an attachment object from the REST API shape into the shape expected by the block editor and other consumers.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>attachment</em> <code>RestAttachment</code>: REST API attachment object.</li>\n</ul>\n<h3>uploadMedia</h3>\n<p>Upload a media file when the file upload button is activated or when adding a file to the editor via drag &amp; drop.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>$0</em> <code>UploadMediaArgs</code>: Parameters object passed to the function.</li>\n<li><em>$0.allowedTypes</em> <code>UploadMediaArgs[ 'allowedTypes' ]</code>: Array with the types of media that can be uploaded, if unset all types are allowed.</li>\n<li><em>$0.additionalData</em> <code>UploadMediaArgs[ 'additionalData' ]</code>: Additional data to include in the request.</li>\n<li><em>$0.filesList</em> <code>UploadMediaArgs[ 'filesList' ]</code>: List of files.</li>\n<li><em>$0.maxUploadFileSize</em> <code>UploadMediaArgs[ 'maxUploadFileSize' ]</code>: Maximum upload size in bytes allowed for the site.</li>\n<li><em>$0.onError</em> <code>UploadMediaArgs[ 'onError' ]</code>: Function called when an error happens.</li>\n<li><em>$0.onFileChange</em> <code>UploadMediaArgs[ 'onFileChange' ]</code>: Function called each time a file or a temporary representation of the file is available.</li>\n<li><em>$0.wpAllowedMimeTypes</em> <code>UploadMediaArgs[ 'wpAllowedMimeTypes' ]</code>: List of allowed mime types and file extensions.</li>\n<li><em>$0.signal</em> <code>UploadMediaArgs[ 'signal' ]</code>: Abort signal.</li>\n<li><em>$0.multiple</em> <code>UploadMediaArgs[ 'multiple' ]</code>: Whether to allow multiple files to be uploaded.</li>\n</ul>\n<h3>validateFileSize</h3>\n<p>Verifies whether the file is within the file upload size limits for the site.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>file</em> <code>File</code>: File object.</li>\n<li><em>maxUploadFileSize</em> <code>number</code>: Maximum upload size in bytes allowed for the site.</li>\n</ul>\n<h3>validateMimeType</h3>\n<p>Verifies if the caller (e.g. a block) supports this mime type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>file</em> <code>File</code>: File object.</li>\n<li><em>allowedTypes</em> <code>string[]</code>: List of allowed mime types.</li>\n</ul>\n<h3>validateMimeTypeForUser</h3>\n<p>Verifies if the user is allowed to upload this mime type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>file</em> <code>File</code>: File object.</li>\n<li><em>wpAllowedMimeTypes</em> <code>Record&lt; string, string &gt; | null</code>: List of allowed mime types and file extensions.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Usage</h2>\n<h3>uploadMedia</h3>\n<p>Media upload util is a function that allows the invokers to upload files to the WordPress media library.<br />\nAs an example, provided that <code>myFiles</code> is an array of file objects, <code>handleFileChange</code> on onFileChange is a function that receives an array of objects containing the description of WordPress media items and <code>handleFileError</code> is a function that receives an object describing a possible error, the following code uploads a file to the WordPress media library:</p>\n<pre><code class=\"language-js\">wp.mediaUtils.utils.uploadMedia( {\n    filesList: myFiles,\n    onFileChange: handleFileChange,\n    onError: handleFileError,\n} );\n</code></pre>\n<p>The following code uploads a file named foo.txt with foo as content to the media library and alerts its URL:</p>\n<pre><code class=\"language-js\">wp.mediaUtils.utils.uploadMedia( {\n    filesList: [ new File( [ 'foo' ], 'foo.txt', { type: 'text/plain' } ) ],\n    onFileChange: ( [ fileObj ] ) =&gt; alert( fileObj.url ),\n    onError: console.error,\n} );\n</code></pre>\n<p>Beware that first onFileChange is called with temporary blob URLs and then with the final URL&#8217;s this allows to show the result in an optimistic UI as if the upload was already completed. E.g.: when uploading an image, one can show the image right away in the UI even before the upload is complete.</p>\n<h3>MediaUpload</h3>\n<p>Media upload component provides a UI button that allows users to open the WordPress media library. It is normally used in conjunction with the filter <code>editor.MediaUpload</code>.<br />\nThe component follows the interface specified in <a href=\"https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-upload/README.md\">https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-upload/README.md</a>, and more details regarding its usage can be checked there.</p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 298,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134579",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134579",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 12,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134579/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 156333,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134579/revisions/156333"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134579"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}