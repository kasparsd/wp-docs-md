{
    "id": 141751,
    "date": "2022-07-26T12:54:48",
    "date_gmt": "2022-07-26T12:54:48",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-rich-text/"
    },
    "modified": "2025-01-07T18:34:07",
    "modified_gmt": "2025-01-07T18:34:07",
    "slug": "data-core-rich-text",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core-rich-text/",
    "title": {
        "rendered": "Rich Text"
    },
    "content": {
        "rendered": "<p>Namespace: <code>core/rich-text</code>.</p>\n<h2>Selectors</h2>\n<p><!-- START TOKEN(Autogenerated selectors|../../../packages/rich-text/src/store/selectors.js) --></p>\n<h3>getFormatType</h3>\n<p>Returns a format type by name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __, sprintf } from '@wordpress/i18n';\nimport { store as richTextStore } from '@wordpress/rich-text';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () =&gt; {\n   const { getFormatType } = useSelect(\n       ( select ) =&gt; select( richTextStore ),\n       []\n   );\n\n   const boldFormat = getFormatType( 'core/bold' );\n\n   return boldFormat ? (\n       &lt;ul&gt;\n           { Object.entries( boldFormat )?.map( ( [ key, value ] ) =&gt; (\n               &lt;li&gt;\n                   { key } : { value }\n               &lt;/li&gt;\n          ) ) }\n      &lt;/ul&gt;\n   ) : (\n       __( 'Not Found' )\n   ;\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Data state.</li>\n<li><em>name</em> <code>string</code>: Format type name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?Object</code>: Format type.</li>\n</ul>\n<h3>getFormatTypeForBareElement</h3>\n<p>Gets the format type, if any, that can handle a bare element (without a data-format-type attribute), given the tag name of this element.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __, sprintf } from '@wordpress/i18n';\nimport { store as richTextStore } from '@wordpress/rich-text';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () =&gt; {\n    const { getFormatTypeForBareElement } = useSelect(\n        ( select ) =&gt; select( richTextStore ),\n        []\n    );\n\n    const format = getFormatTypeForBareElement( 'strong' );\n\n    return format &amp;&amp; &lt;p&gt;{ sprintf( __( 'Format name: %s' ), format.name ) }&lt;/p&gt;;\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Data state.</li>\n<li><em>bareElementTagName</em> <code>string</code>: The tag name of the element to find a format type for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?Object</code>: Format type.</li>\n</ul>\n<h3>getFormatTypeForClassName</h3>\n<p>Gets the format type, if any, that can handle an element, given its classes.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __, sprintf } from '@wordpress/i18n';\nimport { store as richTextStore } from '@wordpress/rich-text';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () =&gt; {\n    const { getFormatTypeForClassName } = useSelect(\n        ( select ) =&gt; select( richTextStore ),\n        []\n    );\n\n    const format = getFormatTypeForClassName( 'has-inline-color' );\n\n    return format &amp;&amp; &lt;p&gt;{ sprintf( __( 'Format name: %s' ), format.name ) }&lt;/p&gt;;\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Data state.</li>\n<li><em>elementClassName</em> <code>string</code>: The classes of the element to find a format type for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?Object</code>: Format type.</li>\n</ul>\n<h3>getFormatTypes</h3>\n<p>Returns all the available format types.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __, sprintf } from '@wordpress/i18n';\nimport { store as richTextStore } from '@wordpress/rich-text';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () =&gt; {\n    const { getFormatTypes } = useSelect(\n        ( select ) =&gt; select( richTextStore ),\n        []\n    );\n\n    const availableFormats = getFormatTypes();\n\n    return availableFormats ? (\n        &lt;ul&gt;\n            { availableFormats?.map( ( format ) =&gt; (\n                &lt;li&gt;{ format.name }&lt;/li&gt;\n            ) ) }\n        &lt;/ul&gt;\n    ) : (\n        __( 'No Formats available' )\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>Object</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: Format types.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated selectors|../../../packages/rich-text/src/store/selectors.js) --></p>\n<h2>Actions</h2>\n<p><!-- START TOKEN(Autogenerated actions|../../../packages/rich-text/src/store/actions.js) --></p>\n<p>Nothing to document.</p>\n<p><!-- END TOKEN(Autogenerated actions|../../../packages/rich-text/src/store/actions.js) --></p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134606,
    "menu_order": 351,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-141751",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141751",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 5,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141751/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 156129,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/141751/revisions/156129"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134606"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=141751"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}