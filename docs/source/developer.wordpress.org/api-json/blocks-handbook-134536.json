{
    "id": 134536,
    "date": "2021-03-09T08:38:22",
    "date_gmt": "2021-03-09T08:38:22",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-blocks/"
    },
    "modified": "2024-11-28T03:04:12",
    "modified_gmt": "2024-11-28T03:04:12",
    "slug": "packages-blocks",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-blocks/",
    "title": {
        "rendered": "@wordpress/blocks"
    },
    "content": {
        "rendered": "<p>&#8220;Block&#8221; is the abstract term used to describe units of markup that, composed together, form the content or layout of a webpage. The idea combines concepts of what in WordPress today we achieve with shortcodes, custom HTML, and embed discovery into a single consistent API and user experience.</p>\n<p>For more context, refer to <a href=\"https://make.wordpress.org/design/2017/01/25/what-are-little-blocks-made-of/\"><em>What Are Little Blocks Made Of?</em></a> from the <a href=\"https://make.wordpress.org/design/\">Make WordPress Design</a> blog.</p>\n<div class=\"callout callout-alert\">\n<a href=\"https://developer.wordpress.org/block-editor/getting-started/create-block/\">Learn how to create your first block</a> for the WordPress block editor. From setting up your development environment, tools, and getting comfortable with the new development model, this tutorial covers all you need to know to get started with creating blocks.\n</div>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/blocks --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>cloneBlock</h3>\n<p>Given a block object, returns a copy of the block object, optionally merging new attributes and/or replacing its inner blocks.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>block</em> <code>Object</code>: Block instance.</li>\n<li><em>mergeAttributes</em> <code>Object</code>: Block attributes.</li>\n<li><em>newInnerBlocks</em> <code>?Array</code>: Nested blocks.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: A cloned block.</li>\n</ul>\n<h3>createBlock</h3>\n<p>Returns a block object given its type and attributes.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Block name.</li>\n<li><em>attributes</em> <code>Object</code>: Block attributes.</li>\n<li><em>innerBlocks</em> <code>?Array</code>: Nested blocks.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Block object.</li>\n</ul>\n<h3>createBlocksFromInnerBlocksTemplate</h3>\n<p>Given an array of InnerBlocks templates or Block Objects, returns an array of created Blocks from them. It handles the case of having InnerBlocks as Blocks by converting them to the proper format to continue recursively.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>innerBlocksOrTemplate</em> <code>Array</code>: Nested blocks or InnerBlocks templates.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object[]</code>: Array of Block objects.</li>\n</ul>\n<h3>doBlocksMatchTemplate</h3>\n<p>Checks whether a list of blocks matches a template by comparing the block names.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blocks</em> <code>Array</code>: Block list.</li>\n<li><em>template</em> <code>Array</code>: Block template.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the list of blocks matches a templates.</li>\n</ul>\n<h3>findTransform</h3>\n<p>Given an array of transforms, returns the highest-priority transform where the predicate function returns a truthy value. A higher-priority transform is one with a lower priority value (i.e. first in priority order). Returns null if the transforms set is empty or the predicate function returns a falsey value for all entries.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>transforms</em> <code>Object[]</code>: Transforms to search.</li>\n<li><em>predicate</em> <code>Function</code>: Function returning true on matching transform.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?Object</code>: Highest-priority transform candidate.</li>\n</ul>\n<h3>getBlockAttributes</h3>\n<p>Returns the block attributes of a registered block node given its type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockTypeOrName</em> <code>string|Object</code>: Block type or name.</li>\n<li><em>innerHTML</em> <code>string|Node</code>: Raw block content.</li>\n<li><em>attributes</em> <code>?Object</code>: Known block attributes (from delimiters).</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: All block attributes.</li>\n</ul>\n<h3>getBlockAttributesNamesByRole</h3>\n<p>Filter block attributes by <code>role</code> and return their names.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Block attribute&#8217;s name.</li>\n<li><em>role</em> <code>string</code>: The role of a block attribute.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string[]</code>: The attribute names that have the provided role.</li>\n</ul>\n<h3>getBlockBindingsSource</h3>\n<p>Returns a registered block bindings source by its name.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Block bindings source name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?Object</code>: Block bindings source.</li>\n</ul>\n<p><em>Changelog</em></p>\n<p><code>6.7.0</code> Introduced in WordPress core.</p>\n<h3>getBlockBindingsSources</h3>\n<p>Returns all registered block bindings sources.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: Block bindings sources.</li>\n</ul>\n<p><em>Changelog</em></p>\n<p><code>6.7.0</code> Introduced in WordPress core.</p>\n<h3>getBlockContent</h3>\n<p>Given a block object, returns the Block&#8217;s Inner HTML markup.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>block</em> <code>Object</code>: Block instance.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: HTML.</li>\n</ul>\n<h3>getBlockDefaultClassName</h3>\n<p>Returns the block&#8217;s default classname from its name.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: The block name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The block&#8217;s default class.</li>\n</ul>\n<h3>getBlockFromExample</h3>\n<p>Create a block object from the example API.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>:</li>\n<li><em>example</em> <code>Object</code>:</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: block.</li>\n</ul>\n<h3>getBlockMenuDefaultClassName</h3>\n<p>Returns the block&#8217;s default menu item classname from its name.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: The block name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The block&#8217;s default menu item class.</li>\n</ul>\n<h3>getBlockSupport</h3>\n<p>Returns the block support value for a feature, if defined.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>nameOrType</em> <code>(string|Object)</code>: Block name or type object</li>\n<li><em>feature</em> <code>string</code>: Feature to retrieve</li>\n<li><em>defaultSupports</em> <code>*</code>: Default value to return if not explicitly defined</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?*</code>: Block support value</li>\n</ul>\n<h3>getBlockTransforms</h3>\n<p>Returns normal block transforms for a given transform direction, optionally for a specific block by name, or an empty array if there are no transforms. If no block name is provided, returns transforms for all blocks. A normal transform object includes <code>blockName</code> as a property.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>direction</em> <code>string</code>: Transform direction (&#8220;to&#8221;, &#8220;from&#8221;).</li>\n<li><em>blockTypeOrName</em> <code>string|Object</code>: Block type or name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: Block transforms for direction.</li>\n</ul>\n<h3>getBlockType</h3>\n<p>Returns a registered block type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Block name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?Object</code>: Block type.</li>\n</ul>\n<h3>getBlockTypes</h3>\n<p>Returns all registered blocks.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: Block settings.</li>\n</ul>\n<h3>getChildBlockNames</h3>\n<p>Returns an array with the child blocks of a given block.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: Name of block (example: \u201clatest-posts\u201d).</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: Array of child block names.</li>\n</ul>\n<h3>getDefaultBlockName</h3>\n<p>Retrieves the default block name.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?string</code>: Block name.</li>\n</ul>\n<h3>getFreeformContentHandlerName</h3>\n<p>Retrieves name of block handling non-block content, or undefined if no handler has been defined.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?string</code>: Block name.</li>\n</ul>\n<h3>getGroupingBlockName</h3>\n<p>Retrieves name of block used for handling grouping interactions.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?string</code>: Block name.</li>\n</ul>\n<h3>getPhrasingContentSchema</h3>\n<p>Undocumented declaration.</p>\n<h3>getPossibleBlockTransformations</h3>\n<p>Returns an array of block types that the set of blocks received as argument can be transformed into.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blocks</em> <code>Array</code>: Blocks array.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: Block types that the blocks argument can be transformed to.</li>\n</ul>\n<h3>getSaveContent</h3>\n<p>Given a block type containing a save render implementation and attributes, returns the static markup to be saved.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockTypeOrName</em> <code>string|Object</code>: Block type or name.</li>\n<li><em>attributes</em> <code>Object</code>: Block attributes.</li>\n<li><em>innerBlocks</em> <code>?Array</code>: Nested blocks.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Save content.</li>\n</ul>\n<h3>getSaveElement</h3>\n<p>Given a block type containing a save render implementation and attributes, returns the enhanced element to be saved or string when raw HTML expected.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockTypeOrName</em> <code>string|Object</code>: Block type or name.</li>\n<li><em>attributes</em> <code>Object</code>: Block attributes.</li>\n<li><em>innerBlocks</em> <code>?Array</code>: Nested blocks.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object|string</code>: Save element or raw HTML string.</li>\n</ul>\n<h3>getUnregisteredTypeHandlerName</h3>\n<p>Retrieves name of block handling unregistered block types, or undefined if no handler has been defined.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?string</code>: Block name.</li>\n</ul>\n<h3>hasBlockSupport</h3>\n<p>Returns true if the block defines support for a feature, or false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>nameOrType</em> <code>(string|Object)</code>: Block name or type object.</li>\n<li><em>feature</em> <code>string</code>: Feature to test.</li>\n<li><em>defaultSupports</em> <code>boolean</code>: Whether feature is supported by default if not explicitly defined.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether block supports feature.</li>\n</ul>\n<h3>hasChildBlocks</h3>\n<p>Returns a boolean indicating if a block has child blocks or not.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: Name of block (example: \u201clatest-posts\u201d).</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if a block contains child blocks and false otherwise.</li>\n</ul>\n<h3>hasChildBlocksWithInserterSupport</h3>\n<p>Returns a boolean indicating if a block has at least one child block with inserter support.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: Block type name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if a block contains at least one child blocks with inserter support and false otherwise.</li>\n</ul>\n<h3>isReusableBlock</h3>\n<p>Determines whether or not the given block is a reusable block. This is a special block type that is used to point to a global block stored via the API.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockOrType</em> <code>Object</code>: Block or Block Type to test.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the given block is a reusable block.</li>\n</ul>\n<h3>isTemplatePart</h3>\n<p>Determines whether or not the given block is a template part. This is a special block type that allows composing a page template out of reusable design elements.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockOrType</em> <code>Object</code>: Block or Block Type to test.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the given block is a template part.</li>\n</ul>\n<h3>isUnmodifiedBlock</h3>\n<p>Determines whether the block&#8217;s attributes are equal to the default attributes which means the block is unmodified.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>block</em> <code>WPBlock</code>: Block Object</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the block is an unmodified block.</li>\n</ul>\n<h3>isUnmodifiedDefaultBlock</h3>\n<p>Determines whether the block is a default block and its attributes are equal to the default attributes which means the block is unmodified.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>block</em> <code>WPBlock</code>: Block Object</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the block is an unmodified default block.</li>\n</ul>\n<h3>isValidBlockContent</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> Use validateBlock instead to avoid data loss.\n</p></blockquote>\n<p>Returns true if the parsed block is valid given the input content. A block is considered valid if, when serialized with assumed attributes, the content matches the original value.</p>\n<p>Logs to console in development environments when invalid.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockTypeOrName</em> <code>string|Object</code>: Block type.</li>\n<li><em>attributes</em> <code>Object</code>: Parsed block attributes.</li>\n<li><em>originalBlockContent</em> <code>string</code>: Original block content.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether block is valid.</li>\n</ul>\n<h3>isValidIcon</h3>\n<p>Function that checks if the parameter is a valid icon.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>icon</em> <code>*</code>: Parameter to be checked.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the parameter is a valid icon and false otherwise.</li>\n</ul>\n<h3>normalizeIconObject</h3>\n<p>Function that receives an icon as set by the blocks during the registration and returns a new icon object that is normalized so we can rely on just on possible icon structure in the codebase.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>icon</em> <code>WPBlockTypeIconRender</code>: Render behavior of a block type icon; one of a Dashicon slug, an element, or a component.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>WPBlockTypeIconDescriptor</code>: Object describing the icon.</li>\n</ul>\n<h3>parse</h3>\n<p>Utilizes an optimized token-driven parser based on the Gutenberg grammar spec defined through a parsing expression grammar to take advantage of the regular cadence provided by block delimiters &#8212; composed syntactically through HTML comments &#8212; which, given a general HTML document as an input, returns a block list array representation.</p>\n<p>This is a recursive-descent parser that scans linearly once through the input document. Instead of directly recursing it utilizes a trampoline mechanism to prevent stack overflow. This initial pass is mainly interested in separating and isolating the blocks serialized in the document and manifestly not in the content within the blocks.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/\">https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/</a></li>\n</ul>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>content</em> <code>string</code>: The post content.</li>\n<li><em>options</em> <code>ParseOptions</code>: Extra options for handling block parsing.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: Block list.</li>\n</ul>\n<h3>parseWithAttributeSchema</h3>\n<p>Given a block&#8217;s raw content and an attribute&#8217;s schema returns the attribute&#8217;s value depending on its source.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>innerHTML</em> <code>string|Node</code>: Block&#8217;s raw content.</li>\n<li><em>attributeSchema</em> <code>Object</code>: Attribute&#8217;s schema.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>*</code>: Attribute value.</li>\n</ul>\n<h3>pasteHandler</h3>\n<p>Converts an HTML string to known blocks. Strips everything else.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>options</em> <code>Object</code>:</li>\n<li><em>options.HTML</em> <code>[string]</code>: The HTML to convert.</li>\n<li><em>options.plainText</em> <code>[string]</code>: Plain text version.</li>\n<li><em>options.mode</em> <code>[string]</code>: Handle content as blocks or inline content. _ &#8216;AUTO&#8217;: Decide based on the content passed. _ &#8216;INLINE&#8217;: Always handle as inline content, and return string. &#042; &#8216;BLOCKS&#8217;: Always handle as blocks, and return array of blocks.</li>\n<li><em>options.tagName</em> <code>[Array]</code>: The tag into which content will be inserted.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array|string</code>: A list of blocks or a string, depending on <code>handlerMode</code>.</li>\n</ul>\n<h3>privateApis</h3>\n<p>Undocumented declaration.</p>\n<h3>rawHandler</h3>\n<p>Converts an HTML string to known blocks.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>$1</em> <code>Object</code>:</li>\n<li><em>$1.HTML</em> <code>string</code>: The HTML to convert.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: A list of blocks.</li>\n</ul>\n<h3>registerBlockBindingsSource</h3>\n<p>Registers a new block bindings source with an object defining its behavior. Once registered, the source is available to be connected to the supported block attributes.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { _x } from '@wordpress/i18n';\nimport { registerBlockBindingsSource } from '@wordpress/blocks';\n\nregisterBlockBindingsSource( {\n    name: 'plugin/my-custom-source',\n    label: _x( 'My Custom Source', 'block bindings source' ),\n    usesContext: [ 'postType' ],\n    getValues: getSourceValues,\n    setValues: updateMyCustomValuesInBatch,\n    canUserEditValue: () =&gt; true,\n} );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>source</em> <code>Object</code>: Properties of the source to be registered.</li>\n<li><em>source.name</em> <code>string</code>: The unique and machine-readable name.</li>\n<li><em>source.label</em> <code>[string]</code>: Human-readable label. Optional when it is defined in the server.</li>\n<li><em>source.usesContext</em> <code>[Array]</code>: Optional array of context needed by the source only in the editor.</li>\n<li><em>source.getValues</em> <code>[Function]</code>: Optional function to get the values from the source.</li>\n<li><em>source.setValues</em> <code>[Function]</code>: Optional function to update multiple values connected to the source.</li>\n<li><em>source.canUserEditValue</em> <code>[Function]</code>: Optional function to determine if the user can edit the value.</li>\n</ul>\n<p><em>Changelog</em></p>\n<p><code>6.7.0</code> Introduced in WordPress core.</p>\n<h3>registerBlockCollection</h3>\n<p>Registers a new block collection to group blocks in the same namespace in the inserter.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __ } from '@wordpress/i18n';\nimport { registerBlockCollection, registerBlockType } from '@wordpress/blocks';\n\n// Register the collection.\nregisterBlockCollection( 'my-collection', {\n    title: __( 'Custom Collection' ),\n} );\n\n// Register a block in the same namespace to add it to the collection.\nregisterBlockType( 'my-collection/block-name', {\n    title: __( 'My First Block' ),\n    edit: () =&gt; &lt;div&gt;{ __( 'Hello from the editor!' ) }&lt;/div&gt;,\n    save: () =&gt; &lt;div&gt;'Hello from the saved content!&lt;/div&gt;,\n} );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>namespace</em> <code>string</code>: The namespace to group blocks by in the inserter; corresponds to the block namespace.</li>\n<li><em>settings</em> <code>Object</code>: The block collection settings.</li>\n<li><em>settings.title</em> <code>string</code>: The title to display in the block inserter.</li>\n<li><em>settings.icon</em> <code>[Object]</code>: The icon to display in the block inserter.</li>\n</ul>\n<h3>registerBlockStyle</h3>\n<p>Registers a new block style for the given block types.</p>\n<p>For more information on connecting the styles with CSS <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/#styles\">the official documentation</a>.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __ } from '@wordpress/i18n';\nimport { registerBlockStyle } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;Button\n            onClick={ () =&gt; {\n                registerBlockStyle( 'core/quote', {\n                    name: 'fancy-quote',\n                    label: __( 'Fancy Quote' ),\n                } );\n            } }\n        &gt;\n            { __( 'Add a new block style for core/quote' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockNames</em> <code>string|Array</code>: Name of blocks e.g. \u201ccore/latest-posts\u201d or <code>[\"core/group\", \"core/columns\"]</code>.</li>\n<li><em>styleVariation</em> <code>Object</code>: Object containing <code>name</code> which is the class name applied to the block and <code>label</code> which identifies the variation to the user.</li>\n</ul>\n<h3>registerBlockType</h3>\n<p>Registers a new block provided a unique name and an object defining its behavior. Once registered, the block is made available as an option to any editor interface where blocks are implemented.</p>\n<p>For more in-depth information on registering a custom block see the <a href=\"https://developer.wordpress.org/block-editor/getting-started/create-block/\">Create a block tutorial</a>.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\n\nregisterBlockType( 'namespace/block-name', {\n    title: __( 'My First Block' ),\n    edit: () =&gt; &lt;div&gt;{ __( 'Hello from the editor!' ) }&lt;/div&gt;,\n    save: () =&gt; &lt;div&gt;Hello from the saved content!&lt;/div&gt;,\n} );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockNameOrMetadata</em> <code>string|Object</code>: Block type name or its metadata.</li>\n<li><em>settings</em> <code>Object</code>: Block settings.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>WPBlockType | undefined</code>: The block, if it has been successfully registered; otherwise <code>undefined</code>.</li>\n</ul>\n<h3>registerBlockVariation</h3>\n<p>Registers a new block variation for the given block type.</p>\n<p>For more information on block variations see <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/\">the official documentation </a>.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __ } from '@wordpress/i18n';\nimport { registerBlockVariation } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;Button\n            onClick={ () =&gt; {\n                registerBlockVariation( 'core/embed', {\n                    name: 'custom',\n                    title: __( 'My Custom Embed' ),\n                    attributes: { providerNameSlug: 'custom' },\n                } );\n            } }\n        &gt;\n            __( 'Add a custom variation for core/embed' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: Name of the block (example: \u201ccore/columns\u201d).</li>\n<li><em>variation</em> <code>WPBlockVariation</code>: Object describing a block variation.</li>\n</ul>\n<h3>serialize</h3>\n<p>Takes a block or set of blocks and returns the serialized post content.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blocks</em> <code>Array</code>: Block(s) to serialize.</li>\n<li><em>options</em> <code>WPBlockSerializationOptions</code>: Serialization options.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The post content.</li>\n</ul>\n<h3>serializeRawBlock</h3>\n<p>Serializes a block node into the native HTML-comment-powered block format. CAVEAT: This function is intended for re-serializing blocks as parsed by valid parsers and skips any validation steps. This is NOT a generic serialization function for in-memory blocks. For most purposes, see the following functions available in the <code>@wordpress/blocks</code> package:</p>\n<p><em>Related</em></p>\n<ul>\n<li>serializeBlock</li>\n<li>serialize For more on the format of block nodes as returned by valid parsers:</li>\n<li><code>@wordpress/block-serialization-default-parser</code> package</li>\n<li><code>@wordpress/block-serialization-spec-parser</code> package</li>\n</ul>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>rawBlock</em> <code>WPRawBlock</code>: A block node as returned by a valid parser.</li>\n<li><em>options</em> <code>[Options]</code>: Serialization options.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: An HTML string representing a block.</li>\n</ul>\n<h3>setCategories</h3>\n<p>Sets the block categories.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __ } from '@wordpress/i18n';\nimport { store as blocksStore, setCategories } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () =&gt; {\n    // Retrieve the list of current categories.\n    const blockCategories = useSelect(\n        ( select ) =&gt; select( blocksStore ).getCategories(),\n        []\n    );\n\n    return (\n        &lt;Button\n            onClick={ () =&gt; {\n                // Add a custom category to the existing list.\n                setCategories( [\n                    ...blockCategories,\n                    { title: 'Custom Category', slug: 'custom-category' },\n                ] );\n            } }\n        &gt;\n            { __( 'Add a new custom block category' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>categories</em> <code>WPBlockCategory[]</code>: Block categories.</li>\n</ul>\n<h3>setDefaultBlockName</h3>\n<p>Assigns the default block name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { setDefaultBlockName } from '@wordpress/blocks';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;Button onClick={ () =&gt; setDefaultBlockName( 'core/heading' ) }&gt;\n            { __( 'Set the default block to Heading' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Block name.</li>\n</ul>\n<h3>setFreeformContentHandlerName</h3>\n<p>Assigns name of block for handling non-block content.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: Block name.</li>\n</ul>\n<h3>setGroupingBlockName</h3>\n<p>Assigns name of block for handling block grouping interactions.</p>\n<p>This function lets you select a different block to group other blocks in instead of the default <code>core/group</code> block. This function must be used in a component or when the DOM is fully loaded. See <a href=\"https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/\">https://developer.wordpress.org/block-editor/reference-guides/packages/packages-dom-ready/</a></p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { setGroupingBlockName } from '@wordpress/blocks';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;Button onClick={ () =&gt; setGroupingBlockName( 'core/columns' ) }&gt;\n            { __( 'Wrap in columns' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Block name.</li>\n</ul>\n<h3>setUnregisteredTypeHandlerName</h3>\n<p>Assigns name of block handling unregistered block types.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: Block name.</li>\n</ul>\n<h3>store</h3>\n<p>Store definition for the blocks namespace.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\">https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore</a></li>\n</ul>\n<p><em>Type</em></p>\n<ul>\n<li><code>Object</code></li>\n</ul>\n<h3>switchToBlockType</h3>\n<p>Switch one or more blocks into one or more blocks of the new block type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blocks</em> <code>Array|Object</code>: Blocks array or block object.</li>\n<li><em>name</em> <code>string</code>: Block name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?Array</code>: Array of blocks or null.</li>\n</ul>\n<h3>synchronizeBlocksWithTemplate</h3>\n<p>Synchronize a block list with a block template.</p>\n<p>Synchronizing a block list with a block template means that we loop over the blocks keep the block as is if it matches the block at the same position in the template (If it has the same name) and if doesn&#8217;t match, we create a new block based on the template. Extra blocks not present in the template are removed.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blocks</em> <code>Array</code>: Block list.</li>\n<li><em>template</em> <code>Array</code>: Block template.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array</code>: Updated Block list.</li>\n</ul>\n<h3>unregisterBlockBindingsSource</h3>\n<p>Unregisters a block bindings source by providing its name.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { unregisterBlockBindingsSource } from '@wordpress/blocks';\n\nunregisterBlockBindingsSource( 'plugin/my-custom-source' );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: The name of the block bindings source to unregister.</li>\n</ul>\n<p><em>Changelog</em></p>\n<p><code>6.7.0</code> Introduced in WordPress core.</p>\n<h3>unregisterBlockStyle</h3>\n<p>Unregisters a block style for the given block.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __ } from '@wordpress/i18n';\nimport { unregisterBlockStyle } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;Button\n            onClick={ () =&gt; {\n                unregisterBlockStyle( 'core/quote', 'plain' );\n            } }\n        &gt;\n            { __( 'Remove the \"Plain\" block style for core/quote' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: Name of block (example: \u201ccore/latest-posts\u201d).</li>\n<li><em>styleVariationName</em> <code>string</code>: Name of class applied to the block.</li>\n</ul>\n<h3>unregisterBlockType</h3>\n<p>Unregisters a block.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __ } from '@wordpress/i18n';\nimport { unregisterBlockType } from '@wordpress/blocks';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;Button\n            onClick={ () =&gt; unregisterBlockType( 'my-collection/block-name' ) }\n        &gt;\n            { __( 'Unregister my custom block.' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Block name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>WPBlockType | undefined</code>: The previous block value, if it has been successfully unregistered; otherwise <code>undefined</code>.</li>\n</ul>\n<h3>unregisterBlockVariation</h3>\n<p>Unregisters a block variation defined for the given block type.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __ } from '@wordpress/i18n';\nimport { unregisterBlockVariation } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;Button\n            onClick={ () =&gt; {\n                unregisterBlockVariation( 'core/embed', 'youtube' );\n            } }\n        &gt;\n            { __( 'Remove the YouTube variation from core/embed' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: Name of the block (example: \u201ccore/columns\u201d).</li>\n<li><em>variationName</em> <code>string</code>: Name of the variation defined for the block.</li>\n</ul>\n<h3>updateCategory</h3>\n<p>Updates a category.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { __ } from '@wordpress/i18n';\nimport { updateCategory } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () =&gt; {\n    return (\n        &lt;Button\n            onClick={ () =&gt; {\n                updateCategory( 'text', { title: __( 'Written Word' ) } );\n            } }\n        &gt;\n            { __( 'Update Text category title' ) }\n        &lt;/Button&gt;\n    );\n};\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>slug</em> <code>string</code>: Block category slug.</li>\n<li><em>category</em> <code>WPBlockCategory</code>: Object containing the category properties that should be updated.</li>\n</ul>\n<h3>validateBlock</h3>\n<p>Returns an object with <code>isValid</code> property set to <code>true</code> if the parsed block is valid given the input content. A block is considered valid if, when serialized with assumed attributes, the content matches the original value. If block is invalid, this function returns all validations issues as well.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>block</em> <code>WPBlock</code>: block object.</li>\n<li><em>blockTypeOrName</em> <code>[WPBlockType|string]</code>: Block type or name, inferred from block if not given.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>[boolean,Array&lt;LoggerItem&gt;]</code>: validation results.</li>\n</ul>\n<h3>withBlockContentContext</h3>\n<blockquote><p>\n  <strong>Deprecated</strong>\n</p></blockquote>\n<p>A Higher Order Component used to inject BlockContent using context to the wrapped component.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>OriginalComponent</em> <code>Component</code>: The component to enhance.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Component</code>: The same component.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 249,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134536",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134536",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 45,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134536/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155904,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134536/revisions/155904"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134536"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}