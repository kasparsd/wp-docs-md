{
    "id": 145829,
    "date": "2023-03-28T04:02:41",
    "date_gmt": "2023-03-28T04:02:41",
    "guid": {
        "rendered": "https://developer.wordpress.org/advanced-administration/server/wordpress-in-directory/"
    },
    "modified": "2024-09-24T06:09:48",
    "modified_gmt": "2024-09-24T06:09:48",
    "slug": "wordpress-in-directory",
    "status": "publish",
    "type": "adv-admin-handbook",
    "link": "https://developer.wordpress.org/advanced-administration/server/wordpress-in-directory/",
    "title": {
        "rendered": "Giving WordPress Its Own Directory"
    },
    "content": {
        "rendered": "Many people want WordPress to power their website&#8217;s root (e.g. https://example.com) but they don&#8217;t want all of the WordPress files cluttering up their root directory. WordPress allows you to install it into a subdirectory, but have your website served from the website root.\n\nAs of <a href=\"https://wordpress.org/documentation/wordpress-version/version-3-5/\">Version 3.5</a>, Multisite users may use all of the functionality listed below. If you are running a version of WordPress older than 3.5, please update before installing a Multisite WordPress install on a subdirectory.\n\n<strong>Note to theme/plugin developers:</strong> this will not separate your code from WordPress. Themes and plugins will still reside under <code>wp-content</code> folder.\n\n<h2>Moving a Root install to its own directory</h2>\n\nLet&#8217;s say you&#8217;ve installed WordPress at <code>example.com</code>. Now you have two different methods to move WordPress installations into subdirectory:\n\n<ol>\n<li>Without change of SITE-URL (remains <code>example.com</code>)</li>\n<li>With change in SITE-URL (it will redirect to <code>example.com/subdirectory</code>)</li>\n</ol>\n\n<h2>Method I (Without URL change)</h2>\n\n<ol>\n<li>After Installing WordPress in the root folder, move EVERYTHING from the root folder into subdirectory.</li>\n<li>Create a <code>.htaccess</code> file in the root folder, and put this content inside (just change <code>example.com</code> and <code>my_subdir</code>):</li>\n</ol>\n\n<pre><code>&lt;IfModule mod_rewrite.c&gt;\nRewriteEngine on\nRewriteCond %{HTTP_HOST} ^(www.)?example.com$\nRewriteCond %{REQUEST_URI} !^/my_subdir/\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ /my_subdir/$1\nRewriteCond %{HTTP_HOST} ^(www.)?example.com$\nRewriteRule ^(/)?$ my_subdir/index.php [L] \n&lt;/IfModule&gt;\n</code></pre>\n\nThat&#8217;s all \ud83d\ude42\n\n<h2>Method II (With URL change)</h2>\n\n<h3>Moving process</h3>\n\n<em>(p.s. If you&#8217;ve already installed WP in subdirectory, some steps might be already done automatically).</em>\n\n<ol>\n<li>Create the new location for the core WordPress files to be stored\u2014we will use <code>/wordpress</code> in our examples. On Linux, use <code>mkdir wordpress</code> from your <code>www</code> directory. You&#8217;ll probably want to use <code>chown apache:apache</code> on the <code>wordpress</code> directory you created.</li>\n<li>Go to the <a href=\"https://wordpress.org/documentation/article/administration-screens/#settings-configuration-settings\">General</a> screen.</li>\n<li>In <strong>WordPress address (URL):</strong> set the address of your main WordPress core files. Example: `https://example.com/wordpress`.</li>\n<li>In <strong>Site address (URL):</strong> set root directory&#8217;s URL. Example: `https://example.com`.</li>\n<li>Click <strong>Save Changes</strong>. Do not worry about the errors that happen now! Continue reading.</li>\n<li>Now move your WordPress core files (from root directory) to the subdirectory.</li>\n<li>Copy (NOT MOVE!) the <code>index.php</code> and <code>.htaccess</code> files from the WordPress directory into the root directory of your site (Blog address). The <code>.htaccess</code> file is invisible, so you may have to set your FTP client to <a href=\"https://developer.wordpress.org/advanced-administration/server/file-permissions/#Unhide_the_hidden_files\">show hidden files</a>. If you are not using <a href=\"https://wordpress.org/documentation/article/using-permalinks/#using-pretty-permalinks\">pretty permalinks</a>, then you may not have a .<code>htaccess</code> file. <em><strong>If you are running WordPress on a Windows (IIS) server</strong> and are using pretty permalinks, you&#8217;ll have a <code>web.config</code> rather than a <code>.htaccess</code> file in your WordPress directory. For the <code>index.php</code> file the instructions remain the same, copy (don&#8217;t move) the index.php file to your root directory. The <code>web.config</code> file, must be treated differently than the <code>.htaccess</code> file so you must MOVE (DON&#8217;T COPY) the <code>web.config</code> file to your root directory.</em></li>\n<li>Open your root directory&#8217;s <code>index.php</code> file in a <a href=\"https://wordpress.org/documentation/article/glossary#text-editor\">text editor</a>.</li>\n<li>Change the following and save the file. Change the line that says:<code>require dirname( __FILE__ ) . '/wp-blog-header.php';</code>to the following, using your directory name for the WordPress core files: <code>require dirname( __FILE__ ) . '/wordpress/wp-blog-header.php';</code>.</li>\n<li>Login to the new location. It might now be `https://example.com/wordpress/wp-admin/`.</li>\n<li>If you have set up <a href=\"https://wordpress.org/documentation/article/using-permalinks/\">Permalinks</a>, go to the <a href=\"https://wordpress.org/documentation/article/administration-screens/#permalinks\">Permalinks Screen</a> and update your Permalink structure. WordPress will automatically update your <code>.htaccess</code> file if it has the appropriate file permissions. If WordPress can&#8217;t write to your <code>.htaccess</code> file, it will display the new rewrite rules to you, which you should manually copy into your <code>.htaccess</code> file (in the same directory as the main <code>index.php</code> file).</li>\n</ol>\n\n<h3>.htaccess modification</h3>\n\nIn some cases, some people like to install separate versions in a subdirectory (such as <code>/2010</code>, <code>/2011</code>, <code>/latest</code> and etc..), and want that website (by default) used the latest version, then Install WordPress in a subdirectory, such as <code>/my_subdir</code> and in your root folder&#8217;s .htaccess file add the following (just change the words as you need):\n\n<pre><code>RewriteEngine On\nRewriteCond %{HTTP_HOST} ^(www.)?example.com$\nRewriteRule ^(/)?$ my_subdir\\[L\\]\n</code></pre>\n\nNow when users to go your root domain (<code>example.com</code>), it will automatically redirect to the subdirectory you specified.\n\nNote: This code comes from Site 5&#8217;s post here: <a href=\"https://qa.site5.com/advanced/how-to-redirect-your-domain-to-a-subfolder-using-htaccess/\">How to Redirect Your Domain to a Subfolder Using .htaccess</a>.\n\n<h2>Moving Specific WordPress Folders</h2>\n\nThe following links explains how to change specific directories within WordPress:\n\n<ul>\n<li><a href=\"https://wordpress.org/documentation/article/editing-wp-config-php/#moving-wp-content-folder\">Moving wp-content folder</a></li>\n<li><a href=\"https://wordpress.org/documentation/article/editing-wp-config-php/#moving-plugin-folder\">Moving Plugin Folder</a></li>\n<li><a href=\"https://wordpress.org/documentation/article/editing-wp-config-php/#moving-themes-folder\">Moving Themes Folder</a></li>\n<li><a href=\"https://wordpress.org/documentation/article/editing-wp-config-php/#moving-uploads-folder\">Moving Uploads Folder</a></li>\n</ul>\n\n<h2>See also</h2>\n\n<ul>\n<li><a href=\"https://caddy.community/t/using-caddy-to-give-wordpress-its-own-directory/13185\">Using Caddy to give WordPress its own directory</a></li>\n</ul>\n\n<h2>Changelog</h2>\n\n<ul>\n<li>2022-09-11: Original content from <a href=\"https://wordpress.org/documentation/article/giving-wordpress-its-own-directory/\">Giving WordPress Its Own Directory</a>.</li>\n</ul>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 145826,
    "menu_order": 3,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-145829",
        "adv-admin-handbook",
        "type-adv-admin-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/adv-admin-handbook/145829",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/adv-admin-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/adv-admin-handbook"
            }
        ],
        "version-history": [
            {
                "count": 5,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/adv-admin-handbook/145829/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155287,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/adv-admin-handbook/145829/revisions/155287"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/adv-admin-handbook/145826"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=145829"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}