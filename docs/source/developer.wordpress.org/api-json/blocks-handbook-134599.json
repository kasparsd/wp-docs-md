{
    "id": 134599,
    "date": "2021-03-09T08:38:24",
    "date_gmt": "2021-03-09T08:38:24",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-shortcode/"
    },
    "modified": "2025-07-08T10:15:55",
    "modified_gmt": "2025-07-08T10:15:55",
    "slug": "packages-shortcode",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-shortcode/",
    "title": {
        "rendered": "@wordpress/shortcode"
    },
    "content": {
        "rendered": "<p>Shortcode module for WordPress.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/shortcode --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>attrs</h3>\n<p>Parse shortcode attributes.</p>\n<p>Shortcodes accept many types of attributes. These can chiefly be divided into named and numeric attributes:</p>\n<p>Named attributes are assigned on a key/value basis, while numeric attributes are treated as an array.</p>\n<p>Named attributes can be formatted as either <code>name=\"value\"</code>, <code>name='value'</code>, or <code>name=value</code>. Numeric attributes can be formatted as <code>\"value\"</code> or just <code>value</code>.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>text</em> <code>string</code>: Serialised shortcode attributes.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>import('./types').ShortcodeAttrs</code>: Parsed shortcode attributes.</li>\n</ul>\n<h3>default</h3>\n<p>Creates a shortcode instance.</p>\n<p>To access a raw representation of a shortcode, pass an <code>options</code> object, containing a <code>tag</code> string, a string or object of <code>attrs</code>, a string indicating the <code>type</code> of the shortcode (&#8216;single&#8217;, &#8216;self-closing&#8217;, or &#8216;closed&#8217;), and a <code>content</code> string.</p>\n<p><em>Type</em></p>\n<ul>\n<li><code>import('./types').shortcode</code>Shortcode instance.</li>\n</ul>\n<h3>fromMatch</h3>\n<p>Generate a Shortcode Object from a RegExp match.</p>\n<p>Accepts a <code>match</code> object from calling <code>regexp.exec()</code> on a <code>RegExp</code> generated by <code>regexp()</code>. <code>match</code> can also be set to the <code>arguments</code> from a callback passed to <code>regexp.replace()</code>.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>match</em> <code>import('./types').Match</code>: Match array.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>InstanceType&lt;import('./types').shortcode&gt;</code>: Shortcode instance.</li>\n</ul>\n<h3>next</h3>\n<p>Find the next matching shortcode.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>tag</em> <code>string</code>: Shortcode tag.</li>\n<li><em>text</em> <code>string</code>: Text to search.</li>\n<li><em>index</em> <code>number</code>: Index to start search from.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>import('./types').ShortcodeMatch | undefined</code>: Matched information.</li>\n</ul>\n<h3>regexp</h3>\n<p>Generate a RegExp to identify a shortcode.</p>\n<p>The base regex is functionally equivalent to the one found in <code>get_shortcode_regex()</code> in <code>wp-includes/shortcodes.php</code>.</p>\n<p>Capture groups:</p>\n<ol>\n<li>An extra <code>[</code> to allow for escaping shortcodes with double <code>[[]]</code></li>\n<li>The shortcode name</li>\n<li>The shortcode argument list</li>\n<li>The self closing <code>/</code></li>\n<li>The content of a shortcode when it wraps some content.</li>\n<li>The closing tag.</li>\n<li>An extra <code>]</code> to allow for escaping shortcodes with double <code>[[]]</code></li>\n</ol>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>tag</em> <code>string</code>: Shortcode tag.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RegExp</code>: Shortcode RegExp.</li>\n</ul>\n<h3>replace</h3>\n<p>Replace matching shortcodes in a block of text.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>tag</em> <code>string</code>: Shortcode tag.</li>\n<li><em>text</em> <code>string</code>: Text to search.</li>\n<li><em>callback</em> <code>import('./types').ReplaceCallback</code>: Function to process the match and return replacement string.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Text with shortcodes replaced.</li>\n</ul>\n<h3>string</h3>\n<p>Generate a string from shortcode parameters.</p>\n<p>Creates a shortcode instance and returns a string.</p>\n<p>Accepts the same <code>options</code> as the <code>shortcode()</code> constructor, containing a <code>tag</code> string, a string or object of <code>attrs</code>, a boolean indicating whether to format the shortcode using a <code>single</code> tag, and a <code>content</code> string.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>options</em> <code>Object</code>:</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: String representation of the shortcode.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 323,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134599",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134599",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 12,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134599/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155915,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134599/revisions/155915"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134599"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}