{
    "id": 134540,
    "date": "2021-03-09T08:38:22",
    "date_gmt": "2021-03-09T08:38:22",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-core-data/"
    },
    "modified": "2025-01-06T18:49:13",
    "modified_gmt": "2025-01-06T18:49:13",
    "slug": "packages-core-data",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-core-data/",
    "title": {
        "rendered": "@wordpress/core-data"
    },
    "content": {
        "rendered": "<p>Core Data is a <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/data/README.md\">data module</a> intended to simplify access to and manipulation of core WordPress entities. It registers its own store and provides a number of selectors which resolve data from the WordPress REST API automatically, along with dispatching action creators to manipulate data. Core data is shipped with <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/core-data/src/entity-types/README.md\"><code>TypeScript definitions for WordPress data types</code></a>.</p>\n<p>Used in combination with features of the data module such as <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/data/README.md#subscribe-function\"><code>subscribe</code></a> or <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/data/README.md#higher-order-components\">higher-order components</a>, it enables a developer to easily add data into the logic and display of their plugin.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/core-data --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<h2>Example</h2>\n<p>Below is an example of a component which simply renders a list of authors:</p>\n<pre><code class=\"language-jsx\">const { useSelect } = wp.data;\n\nfunction MyAuthorsListBase() {\n    const authors = useSelect( ( select ) =&gt; {\n        return select( 'core' ).getUsers( { who: 'authors' } );\n    }, [] );\n\n    if ( ! authors ) {\n        return null;\n    }\n\n    return (\n        &lt;ul&gt;\n            { authors.map( ( author ) =&gt; (\n                &lt;li key={ author.id }&gt;{ author.name }&lt;/li&gt;\n            ) ) }\n        &lt;/ul&gt;\n    );\n}\n</code></pre>\n<h2>What&#8217;s an entity?</h2>\n<p>An entity represents a data source. Each item within the entity is called an entity record. Available entities are defined in <code>rootEntitiesConfig</code> at ./src/entities.js.</p>\n<p>As of right now, the default entities defined by this package map to the <a href=\"https://developer.wordpress.org/rest-api/reference/\">REST API handbook</a>, though there is nothing in the design that prevents it from being used to interact with any other API.</p>\n<p>What follows is a description of some of the properties of <code>rootEntitiesConfig</code>.</p>\n<h3>Connecting the entity with the data source</h3>\n<h4>baseURL</h4>\n<ul>\n<li>Type: string.</li>\n<li>Example: <code>'/wp/v2/users'</code>.</li>\n</ul>\n<p>This property maps the entity to a given endpoint, taking its relative URL as value.</p>\n<h4>baseURLParams</h4>\n<ul>\n<li>Type: <code>object</code>.</li>\n<li>Example: <code>{ context: 'edit' }</code>.</li>\n</ul>\n<p>Additional parameters to the request, added as a query string. Each property will be converted into a field/value pair. For example, given the <code>baseURL: '/wp/v2/users'</code> and the <code>baseURLParams: { context: 'edit' }</code> the URL would be <code>/wp/v2/users?context=edit</code>.</p>\n<h4>key</h4>\n<ul>\n<li>Type: <code>string</code>.</li>\n<li>Example: <code>'slug'</code>.</li>\n</ul>\n<p>The entity engine aims to convert the API response into a number of entity records. Responses can come in different shapes, which are processed differently.</p>\n<p>Responses that represent a single object map to a single entity record. For example:</p>\n<pre><code class=\"language-json\">{\n    \"title\": \"...\",\n    \"description\": \"...\",\n    \"...\": \"...\"\n}\n</code></pre>\n<p>Responses that represent a collection shaped as an array, map to as many entity records as elements of the array. For example:</p>\n<pre><code class=\"language-json\">[\n    { \"id\": 1, \"name\": \"...\", \"...\": \"...\" },\n    { \"id\": 2, \"name\": \"...\", \"...\": \"...\" },\n    { \"id\": 3, \"name\": \"...\", \"...\": \"...\" }\n]\n</code></pre>\n<p>There are also cases in which a response represents a collection shaped as an object, whose key is one of the property&#8217;s values. Each of the nested objects should be its own entity record. For this case not to be confused with single object/entities, the entity configuration must provide the property key that holds the value acting as the object key. In the following example, the <code>slug</code> property&#8217;s value is acting as the object key, hence the entity config must declare <code>key: 'slug'</code> for each nested object to be processed as an individual entity record:</p>\n<pre><code class=\"language-json\">{\n    \"publish\": { \"slug\": \"publish\", \"name\": \"Published\", \"...\": \"...\" },\n    \"draft\": { \"slug\": \"draft\", \"name\": \"Draft\", \"...\": \"...\" },\n    \"future\": { \"slug\": \"future\", \"name\": \"Future\", \"...\": \"...\" }\n}\n</code></pre>\n<h3>Interacting with entity records</h3>\n<p>Entity records are unique. For entities that are collections, it&#8217;s assumed that each record has an <code>id</code> property which serves as an identifier to manage it. If the entity defines a <code>key</code>, that property would be used as its identifier instead of the assumed <code>id</code>.</p>\n<h4>name</h4>\n<ul>\n<li>Type: <code>string</code>.</li>\n<li>Example: <code>user</code>.</li>\n</ul>\n<p>The name of the entity. To be used in the utilities that interact with it (selectors, actions, hooks).</p>\n<h4>kind</h4>\n<ul>\n<li>Type: <code>string</code>.</li>\n<li>Example: <code>root</code>.</li>\n</ul>\n<p>Entities can be grouped by <code>kind</code>. To be used in the utilities that interact with them (selectors, actions, hooks).</p>\n<p>The package provides general methods to interact with the entities (<code>getEntityRecords</code>, <code>getEntityRecord</code>, etc.) by leveraging the <code>kind</code> and <code>name</code> properties:</p>\n<pre><code class=\"language-js\">// Get the record collection for the user entity.\nwp.data.select( 'core' ).getEntityRecords( 'root', 'user' );\n\n// Get a single record for the user entity.\nwp.data.select( 'core' ).getEntityRecord( 'root', 'user', recordId );\n</code></pre>\n<h4>plural</h4>\n<ul>\n<li>Type: <code>string</code>.</li>\n<li>Example: <code>statuses</code>.</li>\n</ul>\n<p>In addition to the general utilities (<code>getEntityRecords</code>, <code>getEntityRecord</code>, etc.), the package dynamically creates nicer-looking methods to interact with the entity records of the <code>root</code> kind, both the collection and single records. Compare the general and nicer-looking methods as follows:</p>\n<pre><code class=\"language-js\">// Collection\nwp.data.select( 'core' ).getEntityRecords( 'root', 'user' );\nwp.data.select( 'core' ).getUsers();\n\n// Single record\nwp.data.select( 'core' ).getEntityRecord( 'root', 'user', recordId );\nwp.data.select( 'core' ).getUser( recordId );\n</code></pre>\n<p>Sometimes, the pluralized form of an entity is not regular (it is not formed by adding a <code>-s</code> suffix). The <code>plural</code> property of the entity config allows to declare an alternative pluralized form for the dynamic methods created for the entity. For example, given the <code>status</code> entity that declares the <code>statuses</code> plural, there are the following methods created for it:</p>\n<pre><code class=\"language-js\">// Collection\nwp.data.select( 'core' ).getStatuses();\n\n// Single record\nwp.data.select( 'core' ).getStatus( recordId );\n</code></pre>\n<h2>Actions</h2>\n<p>The following set of dispatching action creators are available on the object returned by <code>wp.data.dispatch( 'core' )</code>:</p>\n<p><!-- START TOKEN(Autogenerated actions|src/actions.js) --></p>\n<h3>addEntities</h3>\n<p>Returns an action object used in adding new entities.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>entities</em> <code>Array</code>: Entities received.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>deleteEntityRecord</h3>\n<p>Action triggered to delete an entity record.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the deleted entity.</li>\n<li><em>name</em> <code>string</code>: Name of the deleted entity.</li>\n<li><em>recordId</em> <code>number|string</code>: Record ID of the deleted entity.</li>\n<li><em>query</em> <code>?Object</code>: Special query parameters for the DELETE API call.</li>\n<li><em>options</em> <code>[Object]</code>: Delete options.</li>\n<li><em>options.&#095;&#095;unstableFetch</em> <code>[Function]</code>: Internal use only. Function to call instead of <code>apiFetch()</code>. Must return a promise.</li>\n<li><em>options.throwOnError</em> <code>[boolean]</code>: If false, this action suppresses all the exceptions. Defaults to false.</li>\n</ul>\n<h3>editEntityRecord</h3>\n<p>Returns an action object that triggers an edit to an entity record.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the edited entity record.</li>\n<li><em>name</em> <code>string</code>: Name of the edited entity record.</li>\n<li><em>recordId</em> <code>number|string</code>: Record ID of the edited entity record.</li>\n<li><em>edits</em> <code>Object</code>: The edits.</li>\n<li><em>options</em> <code>Object</code>: Options for the edit.</li>\n<li><em>options.undoIgnore</em> <code>[boolean]</code>: Whether to ignore the edit in undo history or not.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveDefaultTemplateId</h3>\n<p>Returns an action object used to set the template for a given query.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>query</em> <code>Object</code>: The lookup query.</li>\n<li><em>templateId</em> <code>string</code>: The resolved template id.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveEntityRecords</h3>\n<p>Returns an action object used in signalling that entity records have been received.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the received entity record.</li>\n<li><em>name</em> <code>string</code>: Name of the received entity record.</li>\n<li><em>records</em> <code>Array|Object</code>: Records received.</li>\n<li><em>query</em> <code>?Object</code>: Query Object.</li>\n<li><em>invalidateCache</em> <code>?boolean</code>: Should invalidate query caches.</li>\n<li><em>edits</em> <code>?Object</code>: Edits to reset.</li>\n<li><em>meta</em> <code>?Object</code>: Meta information about pagination.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveNavigationFallbackId</h3>\n<p>Returns an action object signalling that the fallback Navigation Menu id has been received.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>fallbackId</em> <code>integer</code>: the id of the fallback Navigation Menu</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveRevisions</h3>\n<p>Action triggered to receive revision items.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the received entity record revisions.</li>\n<li><em>name</em> <code>string</code>: Name of the received entity record revisions.</li>\n<li><em>recordKey</em> <code>number|string</code>: The key of the entity record whose revisions you want to fetch.</li>\n<li><em>records</em> <code>Array|Object</code>: Revisions received.</li>\n<li><em>query</em> <code>?Object</code>: Query Object.</li>\n<li><em>invalidateCache</em> <code>?boolean</code>: Should invalidate query caches.</li>\n<li><em>meta</em> <code>?Object</code>: Meta information about pagination.</li>\n</ul>\n<h3>receiveThemeSupports</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WP 5.9, this is not useful anymore, use the selector directly.\n</p></blockquote>\n<p>Returns an action object used in signalling that the index has been received.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveUploadPermissions</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WP 5.9, use receiveUserPermission instead.\n</p></blockquote>\n<p>Returns an action object used in signalling that Upload permissions have been received.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>hasUploadPermissions</em> <code>boolean</code>: Does the user have permission to upload files?</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>redo</h3>\n<p>Action triggered to redo the last undone edit to an entity record, if any.</p>\n<h3>saveEditedEntityRecord</h3>\n<p>Action triggered to save an entity record&#8217;s edits.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the entity.</li>\n<li><em>name</em> <code>string</code>: Name of the entity.</li>\n<li><em>recordId</em> <code>Object</code>: ID of the record.</li>\n<li><em>options</em> <code>Object=</code>: Saving options.</li>\n</ul>\n<h3>saveEntityRecord</h3>\n<p>Action triggered to save an entity record.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the received entity.</li>\n<li><em>name</em> <code>string</code>: Name of the received entity.</li>\n<li><em>record</em> <code>Object</code>: Record to be saved.</li>\n<li><em>options</em> <code>Object</code>: Saving options.</li>\n<li><em>options.isAutosave</em> <code>[boolean]</code>: Whether this is an autosave.</li>\n<li><em>options.&#095;&#095;unstableFetch</em> <code>[Function]</code>: Internal use only. Function to call instead of <code>apiFetch()</code>. Must return a promise.</li>\n<li><em>options.throwOnError</em> <code>[boolean]</code>: If false, this action suppresses all the exceptions. Defaults to false.</li>\n</ul>\n<h3>undo</h3>\n<p>Action triggered to undo the last edit to an entity record, if any.</p>\n<p><!-- END TOKEN(Autogenerated actions|src/actions.js) --></p>\n<h2>Selectors</h2>\n<p>The following selectors are available on the object returned by <code>wp.data.select( 'core' )</code>:</p>\n<p><!-- START TOKEN(Autogenerated selectors|src/selectors.ts) --></p>\n<h3>canUser</h3>\n<p>Returns whether the current user can perform the given action on the given REST resource.</p>\n<p>Calling this may trigger an OPTIONS request to the REST API via the <code>canUser()</code> resolver.</p>\n<p><a href=\"https://developer.wordpress.org/rest-api/reference/\">https://developer.wordpress.org/rest-api/reference/</a></p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>action</em> <code>string</code>: Action to check. One of: &#8216;create&#8217;, &#8216;read&#8217;, &#8216;update&#8217;, &#8216;delete&#8217;.</li>\n<li><em>resource</em> <code>string | EntityResource</code>: Entity resource to check. Accepts entity object <code>{ kind: 'root', name: 'media', id: 1 }</code> or REST base as a string &#8211; <code>media</code>.</li>\n<li><em>id</em> <code>EntityRecordKey</code>: Optional ID of the rest resource to check.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean | undefined</code>: Whether or not the user can perform the action, or <code>undefined</code> if the OPTIONS request is still being made.</li>\n</ul>\n<h3>canUserEditEntityRecord</h3>\n<p>Returns whether the current user can edit the given entity.</p>\n<p>Calling this may trigger an OPTIONS request to the REST API via the <code>canUser()</code> resolver.</p>\n<p><a href=\"https://developer.wordpress.org/rest-api/reference/\">https://developer.wordpress.org/rest-api/reference/</a></p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record&#8217;s id.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean | undefined</code>: Whether or not the user can edit, or <code>undefined</code> if the OPTIONS request is still being made.</li>\n</ul>\n<h3>getAuthors</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since 11.3. Callers should use <code>select( 'core' ).getUsers({ who: 'authors' })</code> instead.\n</p></blockquote>\n<p>Returns all available authors.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional object of query parameters to include with request. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/users/\">Users page</a> in the REST API Handbook and see the arguments for <a href=\"https://developer.wordpress.org/rest-api/reference/users/#list-users\">List Users</a> and <a href=\"https://developer.wordpress.org/rest-api/reference/users/#retrieve-a-user\">Retrieve a User</a>.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ET.User[]</code>: Authors list.</li>\n</ul>\n<h3>getAutosave</h3>\n<p>Returns the autosave for the post and author.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>postType</em> <code>string</code>: The type of the parent post.</li>\n<li><em>postId</em> <code>EntityRecordKey</code>: The id of the parent post.</li>\n<li><em>authorId</em> <code>EntityRecordKey</code>: The id of the author.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord | undefined</code>: The autosave for the post and author.</li>\n</ul>\n<h3>getAutosaves</h3>\n<p>Returns the latest autosaves for the post.</p>\n<p>May return multiple autosaves since the backend stores one autosave per author for each post.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>postType</em> <code>string</code>: The type of the parent post.</li>\n<li><em>postId</em> <code>EntityRecordKey</code>: The id of the parent post.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt; | undefined</code>: An array of autosaves for the post, or undefined if there is none.</li>\n</ul>\n<h3>getBlockPatternCategories</h3>\n<p>Retrieve the list of registered block pattern categories.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt;</code>: Block pattern category list.</li>\n</ul>\n<h3>getBlockPatterns</h3>\n<p>Retrieve the list of registered block patterns.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt;</code>: Block pattern list.</li>\n</ul>\n<h3>getCurrentTheme</h3>\n<p>Return the current theme.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: The current theme.</li>\n</ul>\n<h3>getCurrentThemeGlobalStylesRevisions</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WordPress 6.5.0. Callers should use <code>select( 'core' ).getRevisions( 'root', 'globalStyles', ${ recordKey } )</code> instead, where <code>recordKey</code> is the id of the global styles parent post.\n</p></blockquote>\n<p>Returns the revisions of the current global styles theme.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; object &gt; | null</code>: The current global styles.</li>\n</ul>\n<h3>getCurrentUser</h3>\n<p>Returns the current user.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ET.User&lt; 'edit' &gt;</code>: Current user object.</li>\n</ul>\n<h3>getDefaultTemplateId</h3>\n<p>Returns the default template use to render a given query.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>query</em> <code>TemplateQuery</code>: Query.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The default template id for the given query.</li>\n</ul>\n<h3>getEditedEntityRecord</h3>\n<p>Returns the specified entity record, merged with its edits.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ET.Updatable&lt; EntityRecord &gt; | false</code>: The entity record, merged with its edits.</li>\n</ul>\n<h3>getEmbedPreview</h3>\n<p>Returns the embed preview for the given URL.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>url</em> <code>string</code>: Embedded URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.</li>\n</ul>\n<h3>getEntitiesByKind</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WordPress 6.0. Use getEntitiesConfig instead\n</p></blockquote>\n<p>Returns the loaded entities for the given kind.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt;</code>: Array of entities with config matching kind.</li>\n</ul>\n<h3>getEntitiesConfig</h3>\n<p>Returns the loaded entities for the given kind.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt;</code>: Array of entities with config matching kind.</li>\n</ul>\n<h3>getEntity</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WordPress 6.0. Use getEntityConfig instead\n</p></blockquote>\n<p>Returns the entity config given its kind and name.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: Entity config</li>\n</ul>\n<h3>getEntityConfig</h3>\n<p>Returns the entity config given its kind and name.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: Entity config</li>\n</ul>\n<h3>getEntityRecord</h3>\n<p>Returns the Entity&#8217;s record object by key. Returns <code>null</code> if the value is not yet received, undefined if the value entity is known to not exist, or the entity object if it exists and is received.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>key</em> <code>EntityRecordKey</code>: Optional record&#8217;s key. If requesting a global record (e.g. site settings), the key can be omitted. If requesting a specific item, the key must always be included.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available &#8220;Retrieve a [Entity kind]&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord | undefined</code>: Record.</li>\n</ul>\n<h3>getEntityRecordEdits</h3>\n<p>Returns the specified entity record&#8217;s edits.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Optional&lt; any &gt;</code>: The entity record&#8217;s edits.</li>\n</ul>\n<h3>getEntityRecordNonTransientEdits</h3>\n<p>Returns the specified entity record&#8217;s non transient edits.</p>\n<p>Transient edits don&#8217;t create an undo level, and are not considered for change detection. They are defined in the entity&#8217;s config.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Optional&lt; any &gt;</code>: The entity record&#8217;s non transient edits.</li>\n</ul>\n<h3>getEntityRecords</h3>\n<p>Returns the Entity&#8217;s records.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord[] | null</code>: Records.</li>\n</ul>\n<h3>getEntityRecordsTotalItems</h3>\n<p>Returns the Entity&#8217;s total available records for a given query (ignoring pagination).</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>number | null</code>: number | null.</li>\n</ul>\n<h3>getEntityRecordsTotalPages</h3>\n<p>Returns the number of available pages for the given query.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>number | null</code>: number | null.</li>\n</ul>\n<h3>getLastEntityDeleteError</h3>\n<p>Returns the specified entity record&#8217;s last delete error.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: The entity record&#8217;s save error.</li>\n</ul>\n<h3>getLastEntitySaveError</h3>\n<p>Returns the specified entity record&#8217;s last save error.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: The entity record&#8217;s save error.</li>\n</ul>\n<h3>getRawEntityRecord</h3>\n<p>Returns the entity&#8217;s record object by key, with its attributes mapped to their raw values.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>key</em> <code>EntityRecordKey</code>: Record&#8217;s key.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord | undefined</code>: Object with the entity&#8217;s raw attributes.</li>\n</ul>\n<h3>getRedoEdit</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since 6.3\n</p></blockquote>\n<p>Returns the next edit from the current undo offset for the entity records edits history, if any.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Optional&lt; any &gt;</code>: The edit.</li>\n</ul>\n<h3>getReferenceByDistinctEdits</h3>\n<p>Returns a new reference when edited values have changed. This is useful in inferring where an edit has been made between states by comparison of the return values using strict equality.</p>\n<p><em>Usage</em></p>\n<pre><code>const hasEditOccurred = (\n   getReferenceByDistinctEdits( beforeState ) !==\n   getReferenceByDistinctEdits( afterState )\n);\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> Editor state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li>A value whose reference will change only when an edit occurs.</li>\n</ul>\n<h3>getRevision</h3>\n<p>Returns a single, specific revision of a parent entity.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordKey</em> <code>EntityRecordKey</code>: The key of the entity record whose revisions you want to fetch.</li>\n<li><em>revisionKey</em> <code>EntityRecordKey</code>: The revision&#8217;s key.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see revisions schema in <a href=\"https://developer.wordpress.org/rest-api/reference/\">the REST API Handbook</a>. Then see the arguments available &#8220;Retrieve a [entity kind]&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RevisionRecord | Record&lt; PropertyKey, never &gt; | undefined</code>: Record.</li>\n</ul>\n<h3>getRevisions</h3>\n<p>Returns an entity&#8217;s revisions.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordKey</em> <code>EntityRecordKey</code>: The key of the entity record whose revisions you want to fetch.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see revisions schema in <a href=\"https://developer.wordpress.org/rest-api/reference/\">the REST API Handbook</a>. Then see the arguments available &#8220;Retrieve a [Entity kind]&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RevisionRecord[] | null</code>: Record.</li>\n</ul>\n<h3>getThemeSupports</h3>\n<p>Return theme supports data in the index.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: Index data.</li>\n</ul>\n<h3>getUndoEdit</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since 6.3\n</p></blockquote>\n<p>Returns the previous edit from the current undo offset for the entity records edits history, if any.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Optional&lt; any &gt;</code>: The edit.</li>\n</ul>\n<h3>getUserPatternCategories</h3>\n<p>Retrieve the registered user pattern categories.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; UserPatternCategory &gt;</code>: User patterns category array.</li>\n</ul>\n<h3>getUserQueryResults</h3>\n<p>Returns all the users returned by a query ID.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>queryID</em> <code>string</code>: Query ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ET.User&lt; 'edit' &gt;[]</code>: Users list.</li>\n</ul>\n<h3>hasEditsForEntityRecord</h3>\n<p>Returns true if the specified entity record has edits, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the entity record has edits or not.</li>\n</ul>\n<h3>hasEntityRecords</h3>\n<p>Returns true if records have been received for the given set of parameters, or false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether entity records have been received.</li>\n</ul>\n<h3>hasFetchedAutosaves</h3>\n<p>Returns true if the REST request for autosaves has completed.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>postType</em> <code>string</code>: The type of the parent post.</li>\n<li><em>postId</em> <code>EntityRecordKey</code>: The id of the parent post.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the REST request was completed. False otherwise.</li>\n</ul>\n<h3>hasRedo</h3>\n<p>Returns true if there is a next edit from the current undo offset for the entity records edits history, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether there is a next edit or not.</li>\n</ul>\n<h3>hasUndo</h3>\n<p>Returns true if there is a previous edit from the current undo offset for the entity records edits history, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether there is a previous edit or not.</li>\n</ul>\n<h3>isAutosavingEntityRecord</h3>\n<p>Returns true if the specified entity record is autosaving, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the entity record is autosaving or not.</li>\n</ul>\n<h3>isDeletingEntityRecord</h3>\n<p>Returns true if the specified entity record is deleting, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the entity record is deleting or not.</li>\n</ul>\n<h3>isPreviewEmbedFallback</h3>\n<p>Determines if the returned preview is an oEmbed link fallback.</p>\n<p>WordPress can be configured to return a simple link to a URL if it is not embeddable. We need to be able to determine if a URL is embeddable or not, based on what we get back from the oEmbed preview API.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>url</em> <code>string</code>: Embedded URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Is the preview for the URL an oEmbed link fallback.</li>\n</ul>\n<h3>isRequestingEmbedPreview</h3>\n<p>Returns true if a request is in progress for embed preview data, or false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>url</em> <code>string</code>: URL the preview would be for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether a request is in progress for an embed preview.</li>\n</ul>\n<h3>isSavingEntityRecord</h3>\n<p>Returns true if the specified entity record is saving, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the entity record is saving or not.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated selectors|src/selectors.ts) --></p>\n<h2>Hooks</h2>\n<p>The following set of react hooks available to import from the <code>@wordpress/core-data</code> package:</p>\n<p><!-- START TOKEN(Autogenerated hooks|src/hooks/index.ts) --></p>\n<h3>useEntityBlockEditor</h3>\n<p>Hook that returns block content getters and setters for the nearest provided entity of the specified type.</p>\n<p>The return value has the shape <code>[ blocks, onInput, onChange ]</code>. <code>onInput</code> is for block changes that don&#8217;t create undo levels or dirty the post, non-persistent changes, and <code>onChange</code> is for persistent changes. They map directly to the props of a <code>BlockEditorProvider</code> and are intended to be used with it, or similar components or hooks.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: The entity kind.</li>\n<li><em>name</em> <code>string</code>: The entity name.</li>\n<li><em>options</em> <code>Object</code>:</li>\n<li><em>options.id</em> <code>[string]</code>: An entity ID to use instead of the context-provided one.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>[unknown[], Function, Function]</code>: The block array and setters.</li>\n</ul>\n<h3>useEntityId</h3>\n<p>Hook that returns the ID for the nearest provided entity of the specified type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: The entity kind.</li>\n<li><em>name</em> <code>string</code>: The entity name.</li>\n</ul>\n<h3>useEntityProp</h3>\n<p>Hook that returns the value and a setter for the specified property of the nearest provided entity of the specified type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: The entity kind.</li>\n<li><em>name</em> <code>string</code>: The entity name.</li>\n<li><em>prop</em> <code>string</code>: The property name.</li>\n<li><em>&#095;id</em> <code>[number|string]</code>: An entity ID to use instead of the context-provided one.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>[*, Function, *]</code>: An array where the first item is the property value, the second is the setter and the third is the full value object from REST API containing more information like <code>raw</code>, <code>rendered</code> and <code>protected</code> props.</li>\n</ul>\n<h3>useEntityRecord</h3>\n<p>Resolves the specified entity record.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { useEntityRecord } from '@wordpress/core-data';\n\nfunction PageTitleDisplay( { id } ) {\n    const { record, isResolving } = useEntityRecord( 'postType', 'page', id );\n\n    if ( isResolving ) {\n        return 'Loading...';\n    }\n\n    return record.title;\n}\n\n// Rendered in the application:\n// &lt;PageTitleDisplay id={ 1 } /&gt;\n</code></pre>\n<p>In the above example, when <code>PageTitleDisplay</code> is rendered into an<br />\napplication, the page and the resolution details will be retrieved from<br />\nthe store state using <code>getEntityRecord()</code>, or resolved if missing.</p>\n<pre><code class=\"language-js\">import { useCallback } from 'react';\nimport { useDispatch } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { TextControl } from '@wordpress/components';\nimport { store as noticeStore } from '@wordpress/notices';\nimport { useEntityRecord } from '@wordpress/core-data';\n\nfunction PageRenameForm( { id } ) {\n    const page = useEntityRecord( 'postType', 'page', id );\n    const { createSuccessNotice, createErrorNotice } =\n        useDispatch( noticeStore );\n\n    const setTitle = useCallback(\n        ( title ) =&gt; {\n            page.edit( { title } );\n        },\n        [ page.edit ]\n    );\n\n    if ( page.isResolving ) {\n        return 'Loading...';\n    }\n\n    async function onRename( event ) {\n        event.preventDefault();\n        try {\n            await page.save();\n            createSuccessNotice( __( 'Page renamed.' ), {\n                type: 'snackbar',\n            } );\n        } catch ( error ) {\n            createErrorNotice( error.message, { type: 'snackbar' } );\n        }\n    }\n\n    return (\n        &lt;form onSubmit={ onRename }&gt;\n            &lt;TextControl\n                __nextHasNoMarginBottom\n                __next40pxDefaultSize\n                label={ __( 'Name' ) }\n                value={ page.editedRecord.title }\n                onChange={ setTitle }\n            /&gt;\n            &lt;button type=\"submit\"&gt;{ __( 'Save' ) }&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n\n// Rendered in the application:\n// &lt;PageRenameForm id={ 1 } /&gt;\n</code></pre>\n<p>In the above example, updating and saving the page title is handled<br />\nvia the <code>edit()</code> and <code>save()</code> mutation helpers provided by<br />\n<code>useEntityRecord()</code>;</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the entity, e.g. <code>root</code> or a <code>postType</code>. See rootEntitiesConfig in ../entities.ts for a list of available kinds.</li>\n<li><em>name</em> <code>string</code>: Name of the entity, e.g. <code>plugin</code> or a <code>post</code>. See rootEntitiesConfig in ../entities.ts for a list of available names.</li>\n<li><em>recordId</em> <code>string | number</code>: ID of the requested entity record.</li>\n<li><em>options</em> <code>Options</code>: Optional hook options.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecordResolution&lt; RecordType &gt;</code>: Entity record data.</li>\n</ul>\n<p><em>Changelog</em></p>\n<p><code>6.1.0</code> Introduced in WordPress core.</p>\n<h3>useEntityRecords</h3>\n<p>Resolves the specified entity records.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { useEntityRecords } from '@wordpress/core-data';\n\nfunction PageTitlesList() {\n    const { records, isResolving } = useEntityRecords( 'postType', 'page' );\n\n    if ( isResolving ) {\n        return 'Loading...';\n    }\n\n    return (\n        &lt;ul&gt;\n            { records.map( ( page ) =&gt; (\n                &lt;li&gt;{ page.title }&lt;/li&gt;\n            ) ) }\n        &lt;/ul&gt;\n    );\n}\n\n// Rendered in the application:\n// &lt;PageTitlesList /&gt;\n</code></pre>\n<p>In the above example, when <code>PageTitlesList</code> is rendered into an<br />\napplication, the list of records and the resolution details will be retrieved from<br />\nthe store state using <code>getEntityRecords()</code>, or resolved if missing.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the entity, e.g. <code>root</code> or a <code>postType</code>. See rootEntitiesConfig in ../entities.ts for a list of available kinds.</li>\n<li><em>name</em> <code>string</code>: Name of the entity, e.g. <code>plugin</code> or a <code>post</code>. See rootEntitiesConfig in ../entities.ts for a list of available names.</li>\n<li><em>queryArgs</em> <code>Record&lt; string, unknown &gt;</code>: Optional HTTP query description for how to fetch the data, passed to the requested API endpoint.</li>\n<li><em>options</em> <code>Options</code>: Optional hook options.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecordsResolution&lt; RecordType &gt;</code>: Entity records data.</li>\n</ul>\n<p><em>Changelog</em></p>\n<p><code>6.1.0</code> Introduced in WordPress core.</p>\n<h3>useResourcePermissions</h3>\n<p>Resolves resource permissions.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { useResourcePermissions } from '@wordpress/core-data';\n\nfunction PagesList() {\n    const { canCreate, isResolving } = useResourcePermissions( {\n        kind: 'postType',\n        name: 'page',\n    } );\n\n    if ( isResolving ) {\n        return 'Loading ...';\n    }\n\n    return (\n        &lt;div&gt;\n            { canCreate ? &lt;button&gt;+ Create a new page&lt;/button&gt; : false }\n            // ...\n        &lt;/div&gt;\n    );\n}\n\n// Rendered in the application:\n// &lt;PagesList /&gt;\n</code></pre>\n<pre><code class=\"language-js\">import { useResourcePermissions } from '@wordpress/core-data';\n\nfunction Page( { pageId } ) {\n    const { canCreate, canUpdate, canDelete, isResolving } =\n        useResourcePermissions( {\n            kind: 'postType',\n            name: 'page',\n            id: pageId,\n        } );\n\n    if ( isResolving ) {\n        return 'Loading ...';\n    }\n\n    return (\n        &lt;div&gt;\n            { canCreate ? &lt;button&gt;+ Create a new page&lt;/button&gt; : false }\n            { canUpdate ? &lt;button&gt;Edit page&lt;/button&gt; : false }\n            { canDelete ? &lt;button&gt;Delete page&lt;/button&gt; : false }\n            // ...\n        &lt;/div&gt;\n    );\n}\n\n// Rendered in the application:\n// &lt;Page pageId={ 15 } /&gt;\n</code></pre>\n<p>In the above example, when <code>PagesList</code> is rendered into an<br />\napplication, the appropriate permissions and the resolution details will be retrieved from<br />\nthe store state using <code>canUser()</code>, or resolved if missing.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>resource</em> <code>string | EntityResource</code>: Entity resource to check. Accepts entity object <code>{ kind: 'root', name: 'media', id: 1 }</code> or REST base as a string &#8211; <code>media</code>.</li>\n<li><em>id</em> <code>IdType</code>: Optional ID of the resource to check, e.g. 10. Note: This argument is discouraged when using an entity object as a resource to check permissions and will be ignored.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ResourcePermissionsResolution&lt; IdType &gt;</code>: Entity records data.</li>\n</ul>\n<p><em>Changelog</em></p>\n<p><code>6.1.0</code> Introduced in WordPress core.</p>\n<p><!-- END TOKEN(Autogenerated hooks|src/hooks/index.ts) --></p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 255,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134540",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134540",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 70,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134540/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 156178,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134540/revisions/156178"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134540"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}