{
    "id": 142028,
    "date": "2022-08-31T16:54:48",
    "date_gmt": "2022-08-31T16:54:48",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/packages-create-block-external-template/"
    },
    "modified": "2025-01-02T12:49:07",
    "modified_gmt": "2025-01-02T12:49:07",
    "slug": "packages-create-block-external-template",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-create-block/packages-create-block-external-template/",
    "title": {
        "rendered": "External Project Templates"
    },
    "content": {
        "rendered": "<p>Are you looking for a way to share your project configuration? Creating an external project template hosted on npm or located in a local directory is possible. These npm packages can provide custom <code>.mustache</code> files that replace default files included in the tool for the WordPress plugin or/and the block. It&#8217;s also possible to override default configuration values used during the scaffolding process.</p>\n<h2>Project Template Configuration</h2>\n<p>Providing the main file (<code>index.js</code> by default) for the package that returns a configuration object is mandatory. Several options allow customizing the scaffolding process.</p>\n<h3><code>pluginTemplatesPath</code></h3>\n<p>This optional field allows overriding file templates related to <strong>the WordPress plugin shell</strong>. The path points to a location with template files ending with the <code>.mustache</code> extension (nested folders are also supported). When not set, the tool uses its own set of templates.</p>\n<p><em>Example:</em></p>\n<pre><code class=\"language-js\">const { join } = require( 'path' );\n\nmodule.exports = {\n    pluginTemplatesPath: join( __dirname, 'plugin-templates' ),\n};\n</code></pre>\n<h3><code>blockTemplatesPath</code></h3>\n<p>This optional field allows overriding file templates related to <strong>the individual block</strong>. The path points to a location with template files ending with the <code>.mustache</code> extension (nested folders are also supported). When not set, the tool uses its own set of templates.</p>\n<p><em>Example:</em></p>\n<pre><code class=\"language-js\">const { join } = require( 'path' );\n\nmodule.exports = {\n    blockTemplatesPath: join( __dirname, 'block-templates' ),\n};\n</code></pre>\n<h3><code>assetsPath</code></h3>\n<p>This setting is useful when your template scaffolds a WordPress plugin that uses static assets like images or fonts, which should not be processed. It provides the path pointing to the location where assets are located. They will be copied to the <code>assets</code> subfolder in the generated plugin.</p>\n<p><em>Example:</em></p>\n<pre><code class=\"language-js\">const { join } = require( 'path' );\n\nmodule.exports = {\n    assetsPath: join( __dirname, 'plugin-assets' ),\n};\n</code></pre>\n<h3><code>defaultValues</code></h3>\n<p>It is possible to override the default template configuration using the <code>defaultValues</code> field.</p>\n<p><em>Example:</em></p>\n<pre><code class=\"language-js\">module.exports = {\n    defaultValues: {\n        slug: 'my-fantastic-block',\n        title: 'My fantastic block',\n        dashicon: 'palmtree',\n        version: '1.2.3',\n    },\n};\n</code></pre>\n<p>The following configurable variables are used with the template files. Template authors can change default values to use when users don&#8217;t provide their data.</p>\n<p><strong>Project</strong>:</p>\n<ul>\n<li><code>wpScripts</code> (default: <code>true</code>) \u2013 enables integration with the <code>@wordpress/scripts</code> package and adds common scripts to the <code>package.json</code>.</li>\n<li><code>wpEnv</code> (default: <code>false</code>) \u2013 enables integration with the <code>@wordpress/env</code> package and adds the <code>env</code> script to the <code>package.json</code>.</li>\n<li><code>customScripts</code> (default: {}) \u2013 the list of custom scripts to add to <code>package.json</code> . It also allows overriding default scripts.</li>\n<li><code>npmDependencies</code> (default: <code>[]</code>) \u2013 the list of remote npm packages to be installed in the project with <a href=\"https://docs.npmjs.com/cli/v8/commands/npm-install\"><code>npm install</code></a> when <code>wpScripts</code> is enabled.</li>\n<li><code>npmDevDependencies</code> (default: <code>[]</code>) \u2013 the list of remote npm packages to be installed in the project with <a href=\"https://docs.npmjs.com/cli/v8/commands/npm-install\"><code>npm install --save-dev</code></a> when <code>wpScripts</code> is enabled.</li>\n<li><code>customPackageJSON</code> (no default) &#8211; allows definition of additional properties for the generated package.json file.</li>\n</ul>\n<p><strong>Plugin header and readme fields</strong> (learn more about <a href=\"https://developer.wordpress.org/plugins/plugin-basics/header-requirements/\">header requirements</a> and <a href=\"https://developer.wordpress.org/plugins/wordpress-org/how-your-readme-txt-works/\">readmes</a>):</p>\n<ul>\n<li><code>pluginURI</code> (no default) \u2013 the home page of the plugin.</li>\n<li><code>version</code> (default: <code>'0.1.0'</code>) \u2013 the current version number of the plugin.</li>\n<li><code>requiresAtLeast</code> (default: <code>'6.7'</code>) \u2013 the lowest WordPress version that the plugin will work on.</li>\n<li><code>requiresPHP</code> (default: <code>'7.4'</code>) \u2013 the minimum required PHP version for use with this plugin.</li>\n<li><code>testedUpTo</code> (default: <code>'6.7'</code>) \u2013 the highest WordPress version that the plugin has been tested against.</li>\n<li><code>author</code> (default: <code>'The WordPress Contributors'</code>) \u2013 the name of the plugin author(s).</li>\n<li><code>license</code> (default: <code>'GPL-2.0-or-later'</code>) \u2013 the short name of the plugin\u2019s license.</li>\n<li><code>licenseURI</code> (default: <code>'https://www.gnu.org/licenses/gpl-2.0.html'</code>) \u2013 a link to the full text of the license.</li>\n<li><code>domainPath</code> (no default) \u2013 a custom domain path for the translations (<a href=\"https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/#domain-path\">more info</a>).</li>\n<li><code>updateURI:</code> (no default) \u2013 a custom update URI for the plugin (<a href=\"https://make.wordpress.org/core/2021/06/29/introducing-update-uri-plugin-header-in-wordpress-5-8/\">related dev note</a>).</li>\n</ul>\n<p><strong>Block metadata</strong> (<a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/\">learn more</a>):</p>\n<ul>\n<li><code>folderName</code> (default: <code>src</code>) \u2013 the location for the <code>block.json</code> file and other optional block files generated from block templates included in the folder set with the <code>blockTemplatesPath</code> setting.</li>\n<li><code>$schema</code> (default: `https://schemas.wp.org/trunk/block.json`) \u2013 the schema URL used for block validation.</li>\n<li><code>apiVersion</code> (default: <code>2</code>) \u2013 the block API version (<a href=\"https://make.wordpress.org/core/2020/11/18/block-api-version-2/\">related dev note</a>).</li>\n<li><code>slug</code> (no default) \u2013 the block slug used for identification in the block name.</li>\n<li><code>namespace</code> (default: <code>'create-block'</code>) \u2013 the internal namespace for the block name.</li>\n<li><code>title</code> (no default) \u2013 a display title for your block.</li>\n<li><code>description</code> (no default) \u2013 a short description for your block.</li>\n<li><code>dashicon</code> (no default) \u2013 an icon property thats makes it easier to identify a block (<a href=\"https://developer.wordpress.org/resource/dashicons/\">available values</a>).</li>\n<li><code>category</code> (default: <code>'widgets'</code>) \u2013 blocks are grouped into categories to help users browse and discover them. The categories provided by core are <code>text</code>, <code>media</code>, <code>design</code>, <code>widgets</code>, <code>theme</code>, and <code>embed</code>.</li>\n<li><code>textdomain</code> (defaults to the <code>slug</code> value) \u2013 the text domain used to make strings translatable (<a href=\"https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/#text-domains\">more info</a>).</li>\n<li><code>attributes</code> (no default) \u2013 block attributes (<a href=\"https://developer.wordpress.org/block-editor/developers/block-api/block-attributes/\">more details</a>).</li>\n<li><code>supports</code> (no default) \u2013 optional block extended support features (<a href=\"https://developer.wordpress.org/block-editor/developers/block-api/block-supports/\">more details</a>.</li>\n<li><code>editorScript</code> (default: <code>'file:./index.js'</code>) \u2013 an editor script definition.</li>\n<li><code>editorStyle</code> (default: <code>'file:./index.css'</code>) \u2013 an editor style definition.</li>\n<li><code>style</code> (default: <code>'file:./style-index.css'</code>) \u2013 a frontend and editor style definition.</li>\n<li><code>render</code> (no default) \u2013 a path to the PHP file used when rendering the block type on the server before presenting on the front end.</li>\n<li><code>customBlockJSON</code> (no default) &#8211; allows definition of additional properties for the generated block.json file.</li>\n<li><code>transformer</code> (default: <code>( view ) =&gt; view</code> ) &#8211; a function that receives all variables generated by the create-block tool and returns an object of values. This function provides the ability to modify existing values and add new variables.</li>\n</ul>\n<h4><code>transformer</code> examples</h4>\n<p>This examples adds a generated value to the slug variable.</p>\n<pre><code class=\"language-js\">transformer: ( view ) =&gt; {\n    const hex = getRandomHexCode();\n      return {\n         ...view,\n         slug: `${ view.slug }-${ hex }`,\n      };\n},\n</code></pre>\n<p>This example creates a new custom variable that can be used in the associated mustache templates as <code>{{customVariable}}</code></p>\n<pre><code class=\"language-js\">transformer: ( view ) =&gt; {\n      return {\n         ...view,\n         customVariable: `Custom Value`,\n      };\n},\n</code></pre>\n<h3><code>variants</code></h3>\n<p>Variants are used to create variations for a template. Variants can override any <code>defaultValues</code> by providing their own.</p>\n<pre><code class=\"language-js\">module.exports = {\n    defaultValues: {\n        slug: 'my-fantastic-block',\n        title: 'My fantastic block',\n        dashicon: 'palmtree',\n        version: '1.2.3',\n    },\n    variants: {\n        primary: {},\n        secondary: {\n            title: 'My fantastic block - secondary variant',\n        },\n    },\n};\n</code></pre>\n<p>Variants are accessed using the <code>--variant</code> flag, i.e<code>--variant secondary</code>.</p>\n<p>If no variant is provided, the first variant is used if any are defined.</p>\n<p>Mustache variables are created for variants that can be used to conditionally output content in files. The format is <code>{{isVARIANT_NAMEVariant}}</code>.</p>\n<pre><code class=\"language-mustache\">{{#isPrimaryVariant}}\nThis content is only rendered if `--variant primary` is passed.\n{{/isPrimaryVariant}}\n\n{{#isSecondaryVariant}}\nThis content is only rendered if `--variant secondary` is passed.\n{{/isSecondaryVariant}}\n\n</code></pre>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134542,
    "menu_order": 259,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-142028",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/142028",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 9,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/142028/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 156155,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/142028/revisions/156155"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134542"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=142028"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}