{
    "id": 134451,
    "date": "2021-03-09T08:38:20",
    "date_gmt": "2021-03-09T08:38:20",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/components/custom-select-control/"
    },
    "modified": "2025-07-08T10:16:10",
    "modified_gmt": "2025-07-08T10:16:10",
    "slug": "custom-select-control",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/components/custom-select-control/",
    "title": {
        "rendered": "CustomSelectControl"
    },
    "content": {
        "rendered": "<p><code>CustomSelectControl</code> allows users to select an item from a single-option menu just like <a href=\"https://developer.wordpress.org/block-editor/reference-guide/components/select-control/\"><code>SelectControl</code></a>, with the addition of being able to provide custom styles for each item in the menu. This means it does not use a native <code>&lt;select&gt;</code>, so should only be used if the custom styling is necessary.</p>\n<h2>Design guidelines</h2>\n<p>These are the same as <a href=\"https://developer.wordpress.org/block-editor/reference-guide/components/select-control/#design-guidelines\">the ones for <code>SelectControl</code>s</a>.</p>\n<h2>Development guidelines</h2>\n<h3>Usage</h3>\n<pre><code class=\"language-jsx\">import { useState } from 'react';\nimport { CustomSelectControl } from '@wordpress/components';\n\nconst options = [\n    {\n        key: 'small',\n        name: 'Small',\n        style: { fontSize: '50%' },\n    },\n    {\n        key: 'normal',\n        name: 'Normal',\n        style: { fontSize: '100%' },\n    },\n    {\n        key: 'large',\n        name: 'Large',\n        style: { fontSize: '200%' },\n    },\n    {\n        key: 'huge',\n        name: 'Huge',\n        style: { fontSize: '300%' },\n    },\n];\n\nfunction MyCustomSelectControl() {\n    const [ , setFontSize ] = useState();\n    return (\n        &lt;CustomSelectControl\n            __next40pxDefaultSize\n            label=\"Font Size\"\n            options={ options }\n            onChange={ ( { selectedItem } ) =&gt; setFontSize( selectedItem ) }\n        /&gt;\n    );\n}\n\nfunction MyControlledCustomSelectControl() {\n    const [ fontSize, setFontSize ] = useState( options[ 0 ] );\n    return (\n        &lt;CustomSelectControl\n            __next40pxDefaultSize\n            label=\"Font Size\"\n            options={ options }\n            onChange={ ( { selectedItem } ) =&gt; setFontSize( selectedItem ) }\n            value={ options.find( ( option ) =&gt; option.key === fontSize.key ) }\n        /&gt;\n    );\n}\n</code></pre>\n<h3>Props</h3>\n<h4><code>className</code>: <code>string</code></h4>\n<p>Optional classname for the component.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>hideLabelFromVision</code>: <code>boolean</code></h4>\n<p>Hide the label visually, while keeping available to assistive technology.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>describedBy</code>: <code>string</code></h4>\n<p>Description for the select trigger button used by assistive technology. If no value is passed, the text &#8220;Currently selected: selectedItem.name&#8221; will be used fully translated.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>label</code>: <code>string</code></h4>\n<p>Label for the control.</p>\n<ul>\n<li>Required: Yes</li>\n</ul>\n<h4><code>onChange</code>: <code>( newValue: ChangeObject ) =&gt; void</code></h4>\n<p>Function called with the control&#8217;s internal state changes. The <code>selectedItem</code> property contains the next selected item.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>options</code>: <code>Array&lt; Option &gt;</code></h4>\n<p>The list of options that can be chosen from.</p>\n<ul>\n<li>Required: Yes</li>\n</ul>\n<h4><code>size</code>: <code>'default' | 'small' | '\\_\\_unstable-large'</code></h4>\n<p>The size of the control.</p>\n<ul>\n<li>Default: <code>'default'</code></li>\n<li>Required: No</li>\n</ul>\n<h4><code>showSelectedHint</code>: <code>boolean</code></h4>\n<p>Show the hint of the selected item in the trigger button.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>value</code>: <code>Option</code></h4>\n<p>Can be used to externally control the value of the control, like in the <code>MyControlledCustomSelectControl</code> example above.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>onMouseOver</code>: <code>MouseEventHandler&lt; HTMLButtonElement &gt;</code></h4>\n<p>A handler for <code>mouseover</code> events on the trigger button.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>onMouseOut</code>: <code>MouseEventHandler&lt; HTMLButtonElement &gt;</code></h4>\n<p>A handler for <code>mouseout</code> events on the trigger button.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>onFocus</code>: <code>FocusEventHandler&lt; HTMLButtonElement &gt;</code></h4>\n<p>A handler for <code>focus</code> events on the trigger button.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>onBlur</code>: <code>FocusEventHandler&lt; HTMLButtonElement &gt;</code></h4>\n<p>A handler for <code>blur</code> events on the trigger button.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h4><code>__next40pxDefaultSize</code>: <code>boolean</code></h4>\n<p>Start opting into the larger default height that will become the default size in a future version.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>false</code></li>\n</ul>\n<h2>Related components</h2>\n<ul>\n<li>\n<p>Like this component, but implemented using a native <code>&lt;select&gt;</code> for when custom styling is not necessary, the <code>SelectControl</code> component.</p>\n</li>\n<li>\n<p>To select one option from a set, when you want to show all the available options at once, use the <code>Radio</code> component.</p>\n</li>\n<li>To select one or more items from a set, use the <code>CheckboxControl</code> component.</li>\n<li>\n<p>To toggle a single setting on or off, use the <code>ToggleControl</code> component.</p>\n</li>\n<li>\n<p>If you have a lot of items, <code>ComboboxControl</code> might be a better fit.</p>\n</li>\n</ul>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134435,
    "menu_order": 138,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134451",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134451",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 15,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134451/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155920,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134451/revisions/155920"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134435"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134451"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}