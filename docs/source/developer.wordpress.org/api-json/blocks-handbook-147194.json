{
    "id": 147194,
    "date": "2023-04-06T12:10:01",
    "date_gmt": "2023-04-06T12:10:01",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-commands/"
    },
    "modified": "2025-07-08T10:15:32",
    "modified_gmt": "2025-07-08T10:15:32",
    "slug": "packages-commands",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-commands/",
    "title": {
        "rendered": "@wordpress/commands"
    },
    "content": {
        "rendered": "<p>Commands is a generic package that allows registering and modifying commands to be displayed using the commands menu, also called the Command Palette. The Command Palette can be accessed in the Editor using <code>cmd+k</code>.</p>\n<h2>Types of commands</h2>\n<p>There are two ways to register commands: static or dynamic. Both methods receive a command object as an argument, which provides:</p>\n<ul>\n<li><code>name</code>: A unique machine-readable name for the command</li>\n<li><code>label</code>: A human-readable label</li>\n<li><code>icon</code>: An SVG icon</li>\n<li><code>callback</code>: A callback function that is called when the command is selected</li>\n<li><code>context</code>: (Optional) The context of the command</li>\n</ul>\n<h3>Static commands</h3>\n<p>Static commands can be registered using the <code>wp.data.dispatch( wp.commands.store ).registerCommand</code> action or using the <code>wp.commands.useCommand</code> React hook. Static commands are commonly used to perform a specific action. These could include adding a new page or opening a section of the Editor interface, such as opening the Editor Preferences modal. See the <code>useCommand</code> <a href=\"#usecommand\">code example</a> below.</p>\n<h3>Dynamic commands</h3>\n<p>Dynamic commands, on the other hand, are registered using \u201ccommand loaders&#8221;, <code>wp.commands.useCommandLoader</code>. These loaders are needed when the command list depends on a search term entered by the user in the Command Palette input or when some commands are only available when some conditions are met.</p>\n<p>For example, when a user types &#8220;contact&#8221;, the Command Palette needs to filter the available pages using that input to try and find the Contact page. See the <code>useCommandLoader</code> <a href=\"#usecommandloader\">code example</a> below.</p>\n<h2>Contextual commands</h2>\n<p>Static and dynamic commands can be contextual. This means that in a given context (for example, when navigating the Site Editor or editing a template), some specific commands are given more priority and are visible as soon as you open the Command Palette. Also, when typing the Command Palette, these contextual commands are shown above the rest of the commands.</p>\n<p>At the moment, three contexts have been implemented:</p>\n<ul>\n<li><code>site-editor</code>: This is the context that is set when you are navigating in the site editor (sidebar visible).</li>\n<li><code>entity-edit</code>: This is the context that is set when you are editing a document (template, template part or page).</li>\n<li><code>block-selection-edit</code>: This is the context that is set when a block is selected.</li>\n</ul>\n<p>As the usage of the Command Palette expands, more contexts will be added.</p>\n<p>Attaching a command or command loader to a given context is as simple as adding the <code>context</code> property (with the right context value from the available contexts above) to the <code>useCommand</code> or <code>useCommandLoader</code> calls.</p>\n<h2>WordPress Data API</h2>\n<p>The Command Palette also offers a number of <a href=\"https://developer.wordpress.org/block-editor/reference-guides/data/data-core-commands/\">selectors and actions</a> to manipulate its state, which include:</p>\n<ul>\n<li>Retrieving the registered commands and command loaders using the following selectors <code>getCommands</code> and <code>getCommandLoader</code></li>\n<li>Checking if the Command Palette is open using the <code>isOpen</code> selector.</li>\n<li>Programmatically open or close the Command Palette using the <code>open</code> and <code>close</code> actions.</li>\n</ul>\n<p>See the <a href=\"https://developer.wordpress.org/block-editor/reference-guides/data/data-core-commands/\">Commands Data</a> documentation for more information.</p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/commands --save\n</code></pre>\n<p><em>This package assumes that your code will run in an <strong>ES2015+</strong> environment. If you&#8217;re using an environment that has limited or no support for such language features and APIs, you should include <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/packages/babel-preset-default#polyfill\">the polyfill shipped in <code>@wordpress/babel-preset-default</code></a> in your code.</em></p>\n<p><em>This package requires the following stylesheets to be included for proper styling:</em></p>\n<pre><code class=\"language-css\">/* From node_modules: */\n@import '@wordpress/components/build-style/style.css';\n@import '@wordpress/commands/build-style/style.css';\n</code></pre>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>store</h3>\n<p>Store definition for the commands namespace.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\">https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore</a></li>\n</ul>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { store as commandsStore } from '@wordpress/commands';\nimport { useDispatch } from '@wordpress/data';\n...\nconst { open: openCommandCenter } = useDispatch( commandsStore );\n</code></pre>\n<p><em>Type</em></p>\n<ul>\n<li><code>Object</code></li>\n</ul>\n<h3>useCommand</h3>\n<p>Attach a command to the command palette. Used for static commands.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { useCommand } from '@wordpress/commands';\nimport { plus } from '@wordpress/icons';\n\nuseCommand( {\n    name: 'myplugin/my-command-name',\n    label: __( 'Add new post' ),\n    icon: plus,\n    callback: ( { close } ) =&gt; {\n        document.location.href = 'post-new.php';\n        close();\n    },\n} );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>command</em> <code>import('../store/actions').WPCommandConfig</code>: command config.</li>\n</ul>\n<h3>useCommandLoader</h3>\n<p>Attach a command loader to the command palette. Used for dynamic commands.</p>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">import { useCommandLoader } from '@wordpress/commands';\nimport { post, page, layout, symbolFilled } from '@wordpress/icons';\n\nconst icons = {\n    post,\n    page,\n    wp_template: layout,\n    wp_template_part: symbolFilled,\n};\n\nfunction usePageSearchCommandLoader( { search } ) {\n    // Retrieve the pages for the \"search\" term.\n    const { records, isLoading } = useSelect( ( select ) =&gt; {\n        const { getEntityRecords } = select( coreStore );\n        const query = {\n            search: !! search ? search : undefined,\n            per_page: 10,\n            orderby: search ? 'relevance' : 'date',\n        };\n        return {\n            records: getEntityRecords( 'postType', 'page', query ),\n            isLoading: ! select( coreStore ).hasFinishedResolution(\n                'getEntityRecords',\n                'postType', 'page', query ]\n            ),\n        };\n    }, [ search ] );\n\n    // Create the commands.\n    const commands = useMemo( () =&gt; {\n        return ( records ?? [] ).slice( 0, 10 ).map( ( record ) =&gt; {\n            return {\n                name: record.title?.rendered + ' ' + record.id,\n                label: record.title?.rendered\n                    ? record.title?.rendered\n                    : __( '(no title)' ),\n                icon: icons[ postType ],\n                callback: ( { close } ) =&gt; {\n                    const args = {\n                        postType,\n                        postId: record.id,\n                        ...extraArgs,\n                    };\n                    document.location = addQueryArgs( 'site-editor.php', args );\n                    close();\n                },\n            };\n        } );\n    }, [ records, history ] );\n\n    return {\n        commands,\n        isLoading,\n    };\n}\n\nuseCommandLoader( {\n    name: 'myplugin/page-search',\n    hook: usePageSearchCommandLoader,\n} );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>loader</em> <code>import('../store/actions').WPCommandLoaderConfig</code>: command loader config.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 253,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-147194",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/147194",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 9,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/147194/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 158980,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/147194/revisions/158980"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=147194"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}