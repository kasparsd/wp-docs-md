{
    "id": 134550,
    "date": "2021-03-09T08:38:23",
    "date_gmt": "2021-03-09T08:38:23",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-docgen/"
    },
    "modified": "2025-07-08T10:16:00",
    "modified_gmt": "2025-07-08T10:16:00",
    "slug": "packages-docgen",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-docgen/",
    "title": {
        "rendered": "@wordpress/docgen"
    },
    "content": {
        "rendered": "<p><code>docgen</code> helps you to generate the <em>public API</em> of your code. Given an entry point file, it outputs the ES6 export statements and their corresponding JSDoc comments in human-readable format. It also supports TypeScript via the TypeScript babel plugin.</p>\n<p>Some characteristics:</p>\n<ul>\n<li>If the export statement doesn&#8217;t contain any JSDoc, it&#8217;ll look up for JSDoc up to the declaration.</li>\n<li>It can resolve relative dependencies, either files or directories. For example, <code>import default from './dependency'</code> will find <code>dependency.js</code> or <code>dependency/index.js</code></li>\n<li>For TypeScript support, all types must be explicitly annotated as the TypeScript Babel plugin is unable to consume inferred types (it does not run the TS compiler, after all\u2014it merely parses TypeScript). For example, all function return types must be explicitly annotated if they are to be documented by <code>docgen</code>.</li>\n</ul>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/docgen --save-dev\n</code></pre>\n<p><strong>Note</strong>: This package requires Node.js version with long-term support status (check <a href=\"https://nodejs.org/en/about/previous-releases\">Active LTS or Maintenance LTS releases</a>). It is not compatible with older versions.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-bash\">npx docgen &lt;entry-point.js&gt;\n</code></pre>\n<p>This command will generate a file named <code>entry-point-api.md</code> containing all the exports and their JSDoc comments.</p>\n<h3>CLI options</h3>\n<ul>\n<li><strong>&#8211;formatter</strong> <code>(String)</code>: A path to a custom formatter to control the contents of the output file. It should be a CommonJS module that exports a function that takes as input:\n<ul>\n<li><em>rootDir</em> <code>(String)</code>: current working directory as seen by docgen.</li>\n<li><em>docPath</em> <code>(String)</code>: path of the output document to generate.</li>\n<li><em>symbols</em> <code>(Array)</code>: the symbols found.</li>\n</ul>\n</li>\n<li><strong>&#8211;ignore</strong> <code>(RegExp)</code>: A regular expression used to ignore symbols whose name match it.</li>\n<li><strong>&#8211;output</strong> <code>(String)</code>: Output file that will contain the API documentation.</li>\n<li><strong>&#8211;to-section</strong> <code>(String)</code>: Append generated documentation to this section in the Markdown output. To be used by the default Markdown formatter. Depends on <code>--output</code> and bypasses the custom <code>--formatter</code> passed, if any.</li>\n<li><strong>&#8211;to-token</strong>: Embed generated documentation within the start and end tokens in the Markdown output. To be used by the default Markdown formatter.Depends on <code>--output</code> and bypasses the custom <code>--formatter</code> passed, if any.\n<ul>\n<li>Start token: <code>&lt;!-- START TOKEN(Autogenerated API docs) --&gt;</code></li>\n<li>End token: <code>&lt;!-- END TOKEN(Autogenerated API docs) --&gt;</code></li>\n</ul>\n</li>\n<li><strong>&#8211;use-token</strong> <code>(String)</code>: This options allows you to customize the string between the tokens. For example, <code>--use-token my-api</code> will look up for the start token <code>&lt;!-- START TOKEN(my-api) --&gt;</code> and the end token <code>&lt;!-- END TOKEN(my-api) --&gt;</code>. Depends on <code>--to-token</code>.</li>\n<li><strong>&#8211;debug</strong>: Run in debug mode, which outputs some intermediate files useful for debugging.</li>\n</ul>\n<h3>Babel Configuration</h3>\n<p><code>@wordpress/docgen</code> follows the default <a href=\"https://babeljs.io/docs/en/next/config-files#project-wide-configuration\">project-wide configuration of Babel</a>. Like Babel, it will automatically search for a <code>babel.config.json</code> file, or an equivalent one using the <a href=\"https://babeljs.io/docs/en/next/config-files#supported-file-extensions\">supported extensions</a>, in the project root directory.</p>\n<p>Without it, <code>@wordpress/docgen</code> runs with the default option. In other words, it cannot parse JSX or other advanced syntaxes.</p>\n<h2>Examples</h2>\n<h3>Default export</h3>\n<p>Entry point <code>index.js</code>:</p>\n<pre><code class=\"language-js\">/**\n * Adds two numbers.\n *\n * @param {number} term1 First number.\n * @param {number} term2 Second number.\n * @return {number} The result of adding the two numbers.\n */\nexport default function addition( term1, term2 ) {\n    // Implementation would go here.\n}\n</code></pre>\n<p>Output of <code>npx docgen index.js</code> would be <code>index-api.js</code>:</p>\n<pre><code class=\"language-markdown\"># API\n\n## default\n\n[example.js#L8-L10](example.js#L8-L10)\n\nAdds two numbers.\n\n**Parameters**\n\n-   **term1** `number`: First number.\n-   **term2** `number`: Second number.\n\n**Returns**\n\n`number` The result of adding the two numbers.\n</code></pre>\n<h3>Named export</h3>\n<p>Entry point <code>index.js</code>:</p>\n<pre><code class=\"language-js\">/**\n * Adds two numbers.\n *\n * @param {number} term1 First number.\n * @param {number} term2 Second number.\n * @return {number} The result of adding the two numbers.\n */\nfunction addition( term1, term2 ) {\n    return term1 + term2;\n}\n\n/**\n * Adds two numbers.\n *\n * @deprecated Use `addition` instead.\n *\n * @param {number} term1 First number.\n * @param {number} term2 Second number.\n * @return {number} The result of adding the two numbers.\n */\nfunction count( term1, term2 ) {\n    return term1 + term2;\n}\n\nexport { count, addition };\n</code></pre>\n<p>Output of <code>npx docgen index.js</code> would be <code>index-api.js</code>:</p>\n<pre><code class=\"language-markdown\"># API\n\n## addition\n\n[example.js#L25-L25](example.js#L25-L25)\n\nAdds two numbers.\n\n**Parameters**\n\n-   **term1** `number`: First number.\n-   **term2** `number`: Second number.\n\n**Returns**\n\n`number` The result of adding the two numbers.\n\n## count\n\n[example.js#L25-L25](example.js#L25-L25)\n\n&gt; **Deprecated** Use `addition` instead.\n\nAdds two numbers.\n\n**Parameters**\n\n-   **term1** `number`: First number.\n-   **term2** `number`: Second number.\n\n**Returns**\n\n`number` The result of adding the two numbers.\n</code></pre>\n<h3>Namespace export</h3>\n<p>Let the entry point be <code>index.js</code>:</p>\n<pre><code class=\"language-js\">export * from './count';\n</code></pre>\n<p>with <code>./count/index.js</code> contents being:</p>\n<pre><code class=\"language-js\">/**\n * Subtracts two numbers.\n *\n * @example\n *\n * ```js\n * const result = subtraction( 5, 2 );\n * console.log( result ); // Will log 3\n * ```\n *\n * @param {number} term1 First number.\n * @param {number} term2 Second number.\n * @return {number} The result of subtracting the two numbers.\n */\nexport function subtraction( term1, term2 ) {\n    return term1 - term2;\n}\n\n/**\n * Adds two numbers.\n *\n * @example\n *\n * ```js\n * const result = addition( 5, 2 );\n * console.log( result ); // Will log 7\n * ```\n *\n * @param {number} term1 First number.\n * @param {number} term2 Second number.\n * @return {number} The result of adding the two numbers.\n */\nexport function addition( term1, term2 ) {\n    // Implementation would go here.\n    return term1 - term2;\n}\n</code></pre>\n<p>Output of <code>npx docgen index.js</code> would be <code>index-api.js</code>:</p>\n<pre><code class=\"language-markdown\"># API\n\n## addition\n\n[example-module.js#L1-L1](example-module.js#L1-L1)\n\nAdds two numbers.\n\n**Usage**\n\n```js\nconst result = addition( 5, 2 );\nconsole.log( result ); // Will log 7\n```\n\n**Parameters**\n\n-   **term1** `number`: First number.\n-   **term2** `number`: Second number.\n\n**Returns**\n\n`number` The result of adding the two numbers.\n\n## subtraction\n\n[example-module.js#L1-L1](example-module.js#L1-L1)\n\nSubtracts two numbers.\n\n**Usage**\n\n```js\nconst result = subtraction( 5, 2 );\nconsole.log( result ); // Will log 3\n```\n\n**Parameters**\n\n-   **term1** `number`: First number.\n-   **term2** `number`: Second number.\n\n**Returns**\n\n`number` The result of subtracting the two numbers.\n</code></pre>\n<h3>TypeScript support</h3>\n<p>Entry point <code>index.ts</code>:</p>\n<pre><code class=\"language-js\">/**\n * Adds two numbers.\n *\n * @param term1 First number.\n * @param term2 Second number.\n * @return The result of adding the two numbers.\n */\nexport default function addition( term1: number, term2: number ): number {\n    // Implementation would go here.\n}\n</code></pre>\n<p>Output of <code>npx docgen index.ts</code> would be <code>index-api.js</code>:</p>\n<pre><code class=\"language-markdown\"># API\n\n## default\n\n[example.js#L8-L10](example.js#L8-L10)\n\nAdds two numbers.\n\n**Parameters**\n\n-   **term1** `number`: First number.\n-   **term2** `number`: Second number.\n\n**Returns**\n\n`number` The result of adding the two numbers.\n</code></pre>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 269,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134550",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134550",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 8,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134550/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 156177,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134550/revisions/156177"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134550"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}