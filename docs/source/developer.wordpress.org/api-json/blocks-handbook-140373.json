{
    "id": 140373,
    "date": "2022-03-24T02:54:48",
    "date_gmt": "2022-03-24T02:54:48",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/components/border-box-control/"
    },
    "modified": "2024-10-30T17:09:50",
    "modified_gmt": "2024-10-30T17:09:50",
    "slug": "border-box-control",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/components/border-box-control/",
    "title": {
        "rendered": "BorderBoxControl"
    },
    "content": {
        "rendered": "<p>An input control for the color, style, and width of the border of a box. The<br />\nborder can be customized as a whole, or individually for each side of the box.</p>\n<h2>Development guidelines</h2>\n<p>The <code>BorderBoxControl</code> effectively has two view states. The first, a &#8220;linked&#8221;<br />\nview, allows configuration of a flat border via a single <code>BorderControl</code>.<br />\nThe second, a &#8220;split&#8221; view, contains a <code>BorderControl</code> for each side<br />\nas well as a visualizer for the currently selected borders. Each view also<br />\ncontains a button to toggle between the two.</p>\n<p>When switching from the &#8220;split&#8221; view to &#8220;linked&#8221;, if the individual side<br />\nborders are not consistent, the &#8220;linked&#8221; view will display any border properties<br />\nselections that are consistent while showing a mixed state for those that<br />\naren&#8217;t. For example, if all borders had the same color and style but different<br />\nwidths, then the border dropdown in the &#8220;linked&#8221; view&#8217;s <code>BorderControl</code> would<br />\nshow that consistent color and style but the &#8220;linked&#8221; view&#8217;s width input would<br />\nshow &#8220;Mixed&#8221; placeholder text.</p>\n<h2>Usage</h2>\n<pre><code class=\"language-jsx\">import { useState } from 'react';\nimport { BorderBoxControl } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\n\nconst colors = [\n    { name: 'Blue 20', color: '#72aee6' },\n    // ...\n];\n\nconst MyBorderBoxControl = () =&gt; {\n    const defaultBorder = {\n        color: '#72aee6',\n        style: 'dashed',\n        width: '1px',\n    };\n    const [ borders, setBorders ] = useState( {\n        top: defaultBorder,\n        right: defaultBorder,\n        bottom: defaultBorder,\n        left: defaultBorder,\n    } );\n    const onChange = ( newBorders ) =&gt; setBorders( newBorders );\n\n    return (\n        &lt;BorderBoxControl\n            __next40pxDefaultSize\n            colors={ colors }\n            label={ __( 'Borders' ) }\n            onChange={ onChange }\n            value={ borders }\n        /&gt;\n    );\n};\n</code></pre>\n<p>If you&#8217;re using this component outside the editor, you can<br />\n<a href=\"https://developer.wordpress.org/block-editor/reference-guide/components/#popovers-and-tooltips\">ensure <code>Tooltip</code> positioning</a><br />\nfor the <code>BorderBoxControl</code>&#8216;s color and style options, by rendering your<br />\n<code>BorderBoxControl</code> with a <code>Popover.Slot</code> further up the element tree and within<br />\na <code>SlotFillProvider</code> overall.</p>\n<h2>Props</h2>\n<h3><code>colors</code>: <code>( PaletteObject | ColorObject )[]</code></h3>\n<p>An array of color definitions. This may also be a multi-dimensional array where<br />\ncolors are organized by multiple origins.</p>\n<p>Each color may be an object containing a <code>name</code> and <code>color</code> value.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>[]</code></li>\n</ul>\n<h3><code>disableCustomColors</code>: <code>boolean</code></h3>\n<p>This toggles the ability to choose custom colors.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>enableAlpha</code>: <code>boolean</code></h3>\n<p>This controls whether the alpha channel will be offered when selecting<br />\ncustom colors.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>false</code></li>\n</ul>\n<h3><code>enableStyle</code>: <code>boolean</code></h3>\n<p>This controls whether to support border style selections.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>true</code></li>\n</ul>\n<h3><code>hideLabelFromVision</code>: <code>boolean</code></h3>\n<p>Provides control over whether the label will only be visible to screen readers.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>label</code>: <code>string</code></h3>\n<p>If provided, a label will be generated using this as the content.</p>\n<p><em>Whether it is visible only to screen readers is controlled via<br />\n<code>hideLabelFromVision</code>.</em></p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>onChange</code>: <code>( value?: Object ) =&gt; void</code></h3>\n<p>A callback function invoked when any border value is changed. The value received<br />\nmay be a &#8220;flat&#8221; border object, one that has properties defining individual side<br />\nborders, or <code>undefined</code>.</p>\n<p><em>Note: The will be <code>undefined</code> if a user clears all borders.</em></p>\n<ul>\n<li>Required: Yes</li>\n</ul>\n<h3><code>popoverPlacement</code>: <code>string</code></h3>\n<p>The position of the color popovers relative to the control wrapper.</p>\n<p>By default, popovers are displayed relative to the button that initiated the popover. By supplying a popover placement, you force the popover to display in a specific location.</p>\n<p>The available base placements are &#8216;top&#8217;, &#8216;right&#8217;, &#8216;bottom&#8217;, &#8216;left&#8217;. Each of these base placements has an alignment in the form -start and -end. For example, &#8216;right-start&#8217;, or &#8216;bottom-end&#8217;. These allow you to align the tooltip to the edges of the button, rather than centering it.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>popoverOffset</code>: <code>number</code></h3>\n<p>The space between the popover and the control wrapper.</p>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>size</code>: <code>string</code></h3>\n<p>Size of the control.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>default</code></li>\n<li>Allowed values: <code>default</code>, <code>__unstable-large</code></li>\n</ul>\n<h3><code>value</code>: <code>Object</code></h3>\n<p>An object representing the current border configuration.</p>\n<p>This may be a &#8220;flat&#8221; border where the object has <code>color</code>, <code>style</code>, and <code>width</code><br />\nproperties or a &#8220;split&#8221; border which defines the previous properties but for<br />\neach side; <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code>.</p>\n<p>Examples:</p>\n<pre><code class=\"language-js\">const flatBorder = { color: '#72aee6', style: 'solid', width: '1px' };\nconst splitBorders = {\n    top: { color: '#72aee6', style: 'solid', width: '1px' },\n    right: { color: '#e65054', style: 'dashed', width: '2px' },\n    bottom: { color: '#68de7c', style: 'solid', width: '1px' },\n    left: { color: '#f2d675', style: 'dotted', width: '1em' },\n};\n</code></pre>\n<ul>\n<li>Required: No</li>\n</ul>\n<h3><code>__next40pxDefaultSize</code>: <code>boolean</code></h3>\n<p>Start opting into the larger default height that will become the default size in a future version.</p>\n<ul>\n<li>Required: No</li>\n<li>Default: <code>false</code></li>\n</ul>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134435,
    "menu_order": 116,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-140373",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/140373",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 12,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/140373/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155616,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/140373/revisions/155616"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134435"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=140373"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}