{
    "id": 135627,
    "date": "2021-04-21T15:39:48",
    "date_gmt": "2021-04-21T15:39:48",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-transforms/"
    },
    "modified": "2025-06-19T01:45:46",
    "modified_gmt": "2025-06-19T01:45:46",
    "slug": "block-transforms",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/block-api/block-transforms/",
    "title": {
        "rendered": "Transforms"
    },
    "content": {
        "rendered": "<p>Block Transforms is the API that allows a block to be transformed <em>from</em> and <em>to</em> other blocks, as well as <em>from</em> other entities. Existing entities that work with this API include shortcodes, files, regular expressions, and raw DOM nodes.</p>\n<h2>Transform direction: <code>to</code> and <code>from</code></h2>\n<p>A block declares which transformations it supports via the optional <code>transforms</code> key of the block configuration, whose subkeys <code>to</code> and <code>from</code> hold an array of available transforms for every direction. Example:</p>\n<pre><code class=\"language-js\">export const settings = {\n    title: 'My Block Title',\n    description: 'My block description',\n    /* ... */\n    transforms: {\n        from: [\n            /* supported from transforms */\n        ],\n        to: [\n            /* supported to transforms */\n        ],\n    },\n};\n</code></pre>\n<h2>Transformations types</h2>\n<p>This section goes through the existing types of transformations blocks support:</p>\n<ul>\n<li>block</li>\n<li>enter</li>\n<li>files</li>\n<li>prefix</li>\n<li>raw</li>\n<li>shortcode</li>\n</ul>\n<h3>Block</h3>\n<p>This type of transformations support both <em>from</em> and <em>to</em> directions, allowing blocks to be converted into a different one. It has a corresponding UI control within the block toolbar.</p>\n<p>A transformation of type <code>block</code> is an object that takes the following parameters:</p>\n<ul>\n<li><strong>type</strong> <em>(string)</em>: the value <code>block</code>.</li>\n<li><strong>blocks</strong> <em>(array)</em>: a list of known block types. It also accepts the wildcard value (<code>\"*\"</code>), meaning that the transform is available to <em>all</em> block types (eg: all blocks can transform into <code>core/group</code>).</li>\n<li><strong>transform</strong> <em>(function)</em>: a callback that receives the attributes and inner blocks of the block being processed. It should return a block object or an array of block objects.</li>\n<li><strong>isMatch</strong> <em>(function, optional)</em>: a callback that receives the block attributes as the first argument and the block object as the second argument and should return a boolean. Returning <code>false</code> from this function will prevent the transform from being available and displayed as an option to the user.</li>\n<li><strong>isMultiBlock</strong> <em>(boolean, optional)</em>: whether the transformation can be applied when multiple blocks are selected. If true, the <code>transform</code> function&#8217;s first parameter will be an array containing each selected block&#8217;s attributes, and the second an array of each selected block&#8217;s inner blocks. False by default.</li>\n<li><strong>priority</strong> <em>(number, optional)</em>: controls the priority with which a transformation is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https://developer.wordpress.org/reference/#Hook_to_WordPress\">WordPress hook</a>. Like hooks, the default priority is <code>10</code> when not otherwise set.</li>\n</ul>\n<p><strong>Example: from Paragraph block to Heading block</strong></p>\n<p>To declare this transformation we add the following code into the heading block configuration, which uses the <code>createBlock</code> function from the <a href=\"https://developer.wordpress.org/block-editor/reference-guide/packages/packages-blocks/#createBlock\"><code>wp-blocks</code> package</a>.</p>\n<pre><code class=\"language-js\">transforms: {\n    from: [\n        {\n            type: 'block',\n            blocks: [ 'core/paragraph' ],\n            transform: ( { content } ) =&gt; {\n                return createBlock( 'core/heading', {\n                    content,\n                } );\n            },\n        },\n    ]\n},\n</code></pre>\n<p><strong>Example: blocks that have InnerBlocks</strong></p>\n<p>A block with InnerBlocks can also be transformed from and to another block with InnerBlocks.</p>\n<pre><code class=\"language-js\">transforms: {\n    to: [\n        {\n            type: 'block',\n            blocks: [ 'some/block-with-innerblocks' ],\n            transform: ( attributes, innerBlocks ) =&gt; {\n                return createBlock(\n                    'some/other-block-with-innerblocks',\n                    attributes,\n                    innerBlocks\n                );\n            },\n        },\n    ],\n},\n</code></pre>\n<h3>Enter</h3>\n<p>This type of transformations support the <em>from</em> direction, allowing blocks to be created from some content introduced by the user. They&#8217;re applied in a new block line after the user has introduced some content and hit the ENTER key.</p>\n<p>A transformation of type <code>enter</code> is an object that takes the following parameters:</p>\n<ul>\n<li><strong>type</strong> <em>(string)</em>: the value <code>enter</code>.</li>\n<li><strong>regExp</strong> <em>(RegExp)</em>: the Regular Expression to use as a matcher. If the value matches, the transformation will be applied.</li>\n<li><strong>transform</strong> <em>(function)</em>: a callback that receives an object with a <code>content</code> field containing the value that has been entered. It should return a block object or an array of block objects.</li>\n<li><strong>priority</strong> <em>(number, optional)</em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https://developer.wordpress.org/reference/#Hook_to_WordPress\">WordPress hook</a>. Like hooks, the default priority is <code>10</code> when not otherwise set.</li>\n</ul>\n<p><strong>Example: from &#8212; to Separator block</strong></p>\n<p>To create a separator block when the user types the hyphen three times and then hits the ENTER key we can use the following code:</p>\n<pre><code class=\"language-js\">transforms = {\n    from: [\n        {\n            type: 'enter',\n            regExp: /^-{3,}$/,\n            transform: () =&gt; createBlock( 'core/separator' ),\n        },\n    ],\n};\n</code></pre>\n<h3>Files</h3>\n<p>This type of transformations support the <em>from</em> direction, allowing blocks to be created from files dropped into the editor.</p>\n<p>A transformation of type <code>files</code> is an object that takes the following parameters:</p>\n<ul>\n<li><strong>type</strong> <em>(string)</em>: the value <code>files</code>.</li>\n<li><strong>transform</strong> <em>(function)</em>: a callback that receives the array of files being processed. It should return a block object or an array of block objects.</li>\n<li><strong>isMatch</strong> <em>(function, optional)</em>: a callback that receives the array of files being processed and should return a boolean. Returning <code>false</code> from this function will prevent the transform from being applied.</li>\n<li><strong>priority</strong> <em>(number, optional)</em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https://developer.wordpress.org/reference/#Hook_to_WordPress\">WordPress hook</a>. Like hooks, the default priority is <code>10</code> when not otherwise set.</li>\n</ul>\n<p><strong>Example: from file to File block</strong></p>\n<p>To create a File block when the user drops a file into the editor we can use the following code:</p>\n<pre><code class=\"language-js\">transforms: {\n    from: [\n        {\n            type: 'files',\n            isMatch: ( files ) =&gt; files.length === 1,\n            // By defining a lower priority than the default of 10,\n            // we make that the File block to be created as a fallback,\n            // if no other transform is found.\n            priority: 15,\n            transform: ( files ) =&gt; {\n                const file = files[ 0 ];\n                const blobURL = createBlobURL( file );\n                // File will be uploaded in componentDidMount()\n                return createBlock( 'core/file', {\n                    href: blobURL,\n                    fileName: file.name,\n                    textLinkHref: blobURL,\n                } );\n            },\n        },\n    ];\n}\n</code></pre>\n<h3>Prefix</h3>\n<p>This type of transformations support the <em>from</em> direction, allowing blocks to be created from some text typed by the user. They&#8217;re applied when, in a new block line, the user types some text and then adds a trailing space.</p>\n<p>A transformation of type <code>prefix</code> is an object that takes the following parameters:</p>\n<ul>\n<li><strong>type</strong> <em>(string)</em>: the value <code>prefix</code>.</li>\n<li><strong>prefix</strong> <em>(string)</em>: the character or sequence of characters that match this transform.</li>\n<li><strong>transform</strong> <em>(function)</em>: a callback that receives the content introduced. It should return a block object or an array of block objects.</li>\n<li><strong>priority</strong> <em>(number, optional)</em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https://developer.wordpress.org/reference/#Hook_to_WordPress\">WordPress hook</a>. Like hooks, the default priority is <code>10</code> when not otherwise set.</li>\n</ul>\n<p><strong>Example: from text to custom block</strong></p>\n<p>If we want to create a custom block when the user types the question mark, we could use this code:</p>\n<pre><code class=\"language-js\">transforms: {\n    from: [\n        {\n            type: 'prefix',\n            prefix: '?',\n            transform( content ) {\n                return createBlock( 'my-plugin/question', {\n                    content,\n                } );\n            },\n        },\n    ];\n}\n</code></pre>\n<h3>Raw</h3>\n<p>This type of transformations support the <em>from</em> direction, allowing blocks to be created from raw HTML nodes. They&#8217;re applied when the user executes the &#8220;Convert to Blocks&#8221; action from within the block setting UI menu, as well as when some content is pasted or dropped into the editor.</p>\n<p>A transformation of type <code>raw</code> is an object that takes the following parameters:</p>\n<ul>\n<li><strong>type</strong> <em>(string)</em>: the value <code>raw</code>.</li>\n<li><strong>transform</strong> <em>(function, optional)</em>: a callback that receives the node being processed. It should return a block object or an array of block objects.</li>\n<li><strong>schema</strong> <em>(object|function, optional)</em>: defines an <a href=\"https://html.spec.whatwg.org/multipage/dom.html#content-models\">HTML content model</a> used to detect and process pasted contents. See <a href=\"#schemas-and-content-models\">below</a>.</li>\n<li><strong>selector</strong> <em>(string, optional)</em>: a CSS selector string to determine whether the element matches according to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\">element.matches</a> method. The transform won&#8217;t be executed if the element doesn&#8217;t match. This is a shorthand and alternative to using <code>isMatch</code>, which, if present, will take precedence.</li>\n<li><strong>isMatch</strong> <em>(function, optional)</em>: a callback that receives the node being processed and should return a boolean. Returning <code>false</code> from this function will prevent the transform from being applied.</li>\n<li><strong>priority</strong> <em>(number, optional)</em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https://developer.wordpress.org/reference/#Hook_to_WordPress\">WordPress hook</a>. Like hooks, the default priority is <code>10</code> when not otherwise set.</li>\n</ul>\n<p><strong>Example: from URLs to Embed block</strong></p>\n<p>If we want to create an Embed block when the user pastes some URL in the editor, we could use this code:</p>\n<pre><code class=\"language-js\">transforms: {\n    from: [\n        {\n            type: 'raw',\n            isMatch: ( node ) =&gt;\n                node.nodeName === 'P' &amp;&amp;\n                /^\\s*(https?:\\/\\/\\S+)\\s*$/i.test( node.textContent ),\n            transform: ( node ) =&gt; {\n                return createBlock( 'core/embed', {\n                    url: node.textContent.trim(),\n                } );\n            },\n        },\n    ],\n}\n</code></pre>\n<h4 id=\"schemas-and-content-models\">Schemas and Content Models</h4>\n<p>When pasting content it&#8217;s possible to define a <a href=\"https://html.spec.whatwg.org/multipage/dom.html#content-models\">content model</a> that will be used to validate and process pasted content. It&#8217;s often the case that HTML pasted into the editor will contain a mixture of elements that <em>should</em> transfer as well as elements that <em>shouldn&#8217;t</em>. For example, consider pasting <code>&lt;span class=\"time\"&gt;12:04 pm&lt;/span&gt;</code> into the editor. We want to copy <code>12:04 pm</code> and omit the <code>&lt;span&gt;</code> and its <code>class</code> attribute because those won&#8217;t carry the same meaning or structure as they originally did from where they were copied.</p>\n<p>When writing <code>raw</code> transforms you can control this by supplying a <code>schema</code> which describes allowable content and which will be applied to clean up the pasted content before attempting to match with your block. The schemas are passed into <a href=\"https://github.com/wordpress/gutenberg/blob/trunk/packages/dom/src/dom/clean-node-list.js\"><code>cleanNodeList</code> from <code>@wordpress/dom</code></a>; check there for a <a href=\"https://github.com/wordpress/gutenberg/blob/trunk/packages/dom/src/phrasing-content.js\">complete description of the schema</a>.</p>\n<pre><code class=\"language-js\">schema = { span: { children: { '#text': {} } } };\n</code></pre>\n<p><strong>Example: a custom content model</strong></p>\n<p>Suppose we want to match the following HTML snippet and turn it into some kind of custom post preview block.</p>\n<pre><code class=\"language-html\">&lt;div data-post-id=\"13\"&gt;\n    &lt;h2&gt;The Post Title&lt;/h2&gt;\n    &lt;p&gt;Some &lt;em&gt;great&lt;/em&gt; content.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>We want to tell the editor to allow the inner <code>h2</code> and <code>p</code> elements. We do this by supplying the following schema. In this example we&#8217;re using the function form, which accepts an argument supplying <code>phrasingContentSchema</code> (as well as a boolean <code>isPaste</code> indicating if the transformation operation started with pasting text). The <code>phrasingContentSchema</code> is pre-defined to match HTML phrasing elements, such as <code>&lt;strong&gt;</code> and <code>&lt;sup&gt;</code> and <code>&lt;kbd&gt;</code>. Anywhere we expect<br />\na <code>&lt;RichText /&gt;</code> component is a good place to allow phrasing content otherwise we&#8217;ll lose all text formatting on conversion.</p>\n<pre><code class=\"language-js\">schema = ({ phrasingContentSchema }) =&gt; {\n    div: {\n        required: true,\n        attributes: [ 'data-post-id' ],\n        children: {\n            h2: { children: phrasingContentSchema },\n            p: { children: phrasingContentSchema }\n        }\n    }\n}\n</code></pre>\n<p>When we successfully match this content every HTML attribute will be stripped away except for <code>data-post-id</code> and if we have other arrangements of HTML inside of a given <code>div</code> then it won&#8217;t match our transformer. Likewise we&#8217;d fail to match if we found an <code>&lt;h3&gt;</code> in there instead of an <code>&lt;h2&gt;</code>.</p>\n<p>Schemas are most-important when wanting to match HTML snippets containing non-phrasing content, such as <code>&lt;details&gt;</code> with a <code>&lt;summary&gt;</code>. Without declaring the custom schema the editor will skip over these other constructions before attempting to run them through any block transforms.</p>\n<h3>Shortcode</h3>\n<p>This type of transformations support the <em>from</em> direction, allowing blocks to be created from shortcodes. It&#8217;s applied as part of the <code>raw</code> transformation process.</p>\n<p>A transformation of type <code>shortcode</code> is an object that takes the following parameters:</p>\n<ul>\n<li><strong>type</strong> <em>(string)</em>: the value <code>shortcode</code>.</li>\n<li><strong>tag</strong> <em>(string|array)</em>: the shortcode tag or list of shortcode aliases this transform can work with.</li>\n<li><strong>transform</strong> <em>(function, optional)</em>: a callback that receives the shortcode attributes as the first argument and the <a href=\"https://developer.wordpress.org/block-editor/reference-guide/packages/packages-shortcode/#next\">WPShortcodeMatch</a> as the second. It should return a block object or an array of block objects. When this parameter is defined, it will take precedence over the <code>attributes</code> parameter.</li>\n<li><strong>attributes</strong> <em>(object, optional)</em>: object representing where the block attributes should be sourced from, according to the attributes shape defined by the <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/\">block configuration object</a>. If a particular attribute contains a <code>shortcode</code> key, it should be a function that receives the shortcode attributes as the first arguments and the <a href=\"https://developer.wordpress.org/block-editor/reference-guide/packages/packages-shortcode/#next\">WPShortcodeMatch</a> as second, and returns a value for the attribute that will be sourced in the block&#8217;s comment.</li>\n<li><strong>isMatch</strong> <em>(function, optional)</em>: a callback that receives the shortcode attributes per the <a href=\"https://codex.wordpress.org/Shortcode_API\">Shortcode API</a> and should return a boolean. Returning <code>false</code> from this function will prevent the shortcode to be transformed into this block.</li>\n<li><strong>priority</strong> <em>(number, optional)</em>: controls the priority with which a transform is applied, where a lower value will take precedence over higher values. This behaves much like a <a href=\"https://developer.wordpress.org/reference/#Hook_to_WordPress\">WordPress hook</a>. Like hooks, the default priority is <code>10</code> when not otherwise set.</li>\n</ul>\n<p><strong>Example: from shortcode to block using <code>transform</code></strong></p>\n<p>An existing shortcode can be transformed into its block counterpart using the <code>transform</code> method.</p>\n<pre><code class=\"language-js\">transforms: {\n    from: [\n        {\n            type: 'shortcode',\n            tag: 'video',\n            transform( { named: { src } } ) {\n                return createBlock( 'core/video', { src } );\n            },\n            // Prevent the shortcode to be converted\n            // into this block when it doesn't\n            // have the proper ID.\n            isMatch( { named: { id } } ) {\n                return id === 'my-id';\n            },\n        },\n    ],\n},\n</code></pre>\n<p><strong>Example: from shortcode to block using <code>attributes</code></strong></p>\n<p>An existing shortcode can be transformed into its block counterpart using the <code>attributes</code> parameters.</p>\n<pre><code class=\"language-js\">transforms: {\n    from: [\n        {\n            type: 'shortcode',\n            tag: 'youtube',\n            attributes: {\n                url: {\n                    type: 'string',\n                    source: 'attribute',\n                    attribute: 'src',\n                    selector: 'img',\n                },\n                align: {\n                    type: 'string',\n                    // The shortcode function will extract\n                    // the shortcode atts into a value\n                    // to be sourced in the block's comment.\n                    shortcode: ( { named: { align = 'alignnone' } } ) =&gt; {\n                        return align.replace( 'align', &apos;&apos; );\n                    },\n                },\n            },\n            // Prevent the shortcode to be converted\n            // into this block when it doesn't\n            // have the proper ID.\n            isMatch( { named: { id } } ) {\n                return id === 'my-id';\n            },\n        },\n    ]\n},\n</code></pre>\n<h2><code>ungroup</code> blocks</h2>\n<p>Via the optional <code>transforms</code> key of the block configuration, blocks can use the <code>ungroup</code> subkey to define the blocks that will replace the block being processed. These new blocks will usually be a subset of the existing inner blocks, but could also include new blocks.</p>\n<p>If a block has an <code>ungroup</code> transform, it is eligible for ungrouping, without the requirement of being the default grouping block. The UI used to ungroup a block with this API is the same as the one used for the default grouping block. In order for the Ungroup button to be displayed, we must have a single grouping block selected, which also contains some inner blocks.</p>\n<p><strong>ungroup</strong> is a callback function that receives the attributes and inner blocks of the block being processed. It should return an array of block objects.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">export const settings = {\n    title: 'My grouping Block Title',\n    description: 'My grouping block description',\n    /* ... */\n    transforms: {\n        ungroup: ( attributes, innerBlocks ) =&gt;\n            innerBlocks.flatMap( ( innerBlock ) =&gt; innerBlock.innerBlocks ),\n    },\n};\n</code></pre>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134406,
    "menu_order": 73,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-135627",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/135627",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 17,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/135627/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 158997,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/135627/revisions/158997"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134406"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=135627"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}