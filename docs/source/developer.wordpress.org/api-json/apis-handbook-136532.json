{
    "id": 136532,
    "date": "2021-07-19T22:57:36",
    "date_gmt": "2021-07-19T22:57:36",
    "guid": {
        "rendered": "https://developer.wordpress.org/?post_type=apis-handbook&#038;p=136532"
    },
    "modified": "2022-11-21T16:11:04",
    "modified_gmt": "2022-11-21T16:11:04",
    "slug": "site-health",
    "status": "publish",
    "type": "apis-handbook",
    "link": "https://developer.wordpress.org/apis/site-health/",
    "title": {
        "rendered": "Site Health"
    },
    "content": {
        "rendered": "\n<p>Since WordPress 5.8, developers are allowed to extend Site Health screen. This API allows developers to add their own tabs to the Site Health interface.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/make.wordpress.org/core/files/2021/06/4-menu-items.png?ssl=1\" alt=\"\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">Registering a custom tab navigation</h2>\n\n\n\n<p>Developers need to start by creating a navigation element, so that users may access the new tab. This is done using the&nbsp;<code>site_health_navigation_tabs</code>&nbsp;filter, which is an associated array of tab keys, and their label.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">&lt;?php\nfunction wporg_example_site_health_navigation_tabs( $tabs ) {\n    // translators: Tab heading for Site Health navigation.\n    $tabs['example-site-health-tab'] = esc_html_x( 'My New Tab', 'Site Health', 'text-domain' );\n \n    return $tabs;\n}\nadd_filter( 'site_health_navigation_tabs', 'wporg_example_site_health_navigation_tabs' );</code></pre>\n\n\n\n<p>The above example will add the identifier&nbsp;<code>example-site-health-tab</code>&nbsp;with the label&nbsp;<code>My New Tab</code>&nbsp;to the header navigation located in Site Health screens.</p>\n\n\n\n<p>It is also possible to re-order what tabs are displayed first using this filter, or even remove tabs. By default core has two tabs, the&nbsp;<code>Status</code>&nbsp;and&nbsp;<code>Info</code>&nbsp;screens. The&nbsp;<code>Status</code>&nbsp;screen is the default, and therefore has no slug.</p>\n\n\n\n<p>To not overburden the navigation area, if there are more than 4 items added, only the first three will be displayed directly, with the remaining items being wrapped inside a sub-navigation. This is based on usage testing in the Health Check&nbsp;plugin, where 4 items have shown to be enough to cover most use cases, but not so many as to become confusing.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Displaying the content of a custom tab</h2>\n\n\n\n<p>When a user visits a Site Health tab, other than the default screen, the&nbsp;<code>site_health_tab_content</code>&nbsp;action triggers. This action includes a single argument being the slug, as defined by the tab navigation in the previous filter, to help developers to identify which page is being requested.</p>\n\n\n\n<p>The action fires after the header itself has been loaded, but does not include any wrappers. This gives you as a developer the full width of the screen (not counting the&nbsp;admin&nbsp;menu) to work with.</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">&lt;?php\nfunction wporg_example_site_health_tab_content( $tab ) {\n    // Do nothing if this is not our tab.\n    if ( 'example-site-health-tab' !== $tab ) {\n        return;\n    }\n \n    // Include the interface, kept in a separate file just to differentiate code from views.\n    include trailingslashit( plugin_dir_path( __FILE__ ) ) . 'views/site-health-tab.php';\n}\nadd_action( 'site_health_tab_content', 'wporg_example_site_health_tab_content' );</code></pre>\n\n\n\n<p>The above example loads in a file with your tab content from your plugin, but only if the tab matches the tab key (or slug if you will) which was defined in the previous example.</p>\n\n\n\n<p>It is possible to provide output on any tab this way, or on another tab not your own, for example if they interact with each other.</p>\n\n\n\n<p>Another example might be to extend the default&nbsp;<code>Info</code>&nbsp;tab, which has the slug&nbsp;<code>debug</code>, and add a button to copy some information specific to only your plugin or theme:</p>\n\n\n\n<pre class=\"wp-block-code\"><code lang=\"php\" class=\"language-php\">&lt;?php\nfunction wporg_add_button_to_site_health_info_tab( $tab ) {\n    // Do nothing if this is not the \"debug\" tab.\n    if ( 'debug' !== $tab ) {\n        return;\n    }\n    ?&gt;\n    &lt;button class=\"copy-my-plugin-info\"&gt;\n        &lt;?php esc_html_e( 'Click to copy plugin info', 'text-domain' ); ?&gt;\n    &lt;/button&gt;\n    &lt;?php\n}\nadd_action( 'site_health_tab_content', 'wporg_add_button_to_site_health_info_tab' );</code></pre>\n",
        "protected": false
    },
    "author": 8670591,
    "featured_media": 0,
    "parent": 0,
    "menu_order": 135,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-136532",
        "apis-handbook",
        "type-apis-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/apis-handbook/136532",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/apis-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/apis-handbook"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/users/8670591"
            }
        ],
        "version-history": [
            {
                "count": 7,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/apis-handbook/136532/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 144366,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/apis-handbook/136532/revisions/144366"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=136532"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}