{
    "id": 134607,
    "date": "2021-03-09T08:38:24",
    "date_gmt": "2021-03-09T08:38:24",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core/"
    },
    "modified": "2025-01-07T18:34:12",
    "modified_gmt": "2025-01-07T18:34:12",
    "slug": "data-core",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/data/data-core/",
    "title": {
        "rendered": "WordPress Core Data"
    },
    "content": {
        "rendered": "<p>Namespace: <code>core</code>.</p>\n<h2>Dynamically generated selectors</h2>\n<p>There are a number of user-friendly selectors that are wrappers of the more generic <code>getEntityRecord</code> and <code>getEntityRecords</code> that can be used to retrieve information for the various entities.</p>\n<h3>getPostType</h3>\n<p>Returns the information for a given post type.</p>\n<p><em>Usage</em></p>\n<pre><code>import { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nconst postType = useSelect(\n    ( select ) =&gt; select( coreDataStore ).getPostType( 'post' )\n\n    // Equivalent to: select( coreDataStore ).getEntityRecord( 'root', 'postType', 'post' )\n);\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li>postType <code>string</code></li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord | undefined</code>: Record.</li>\n</ul>\n<h3>getPostTypes</h3>\n<p>Returns the information for post types.</p>\n<p><em>Usage</em></p>\n<pre><code>import { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nconst postTypes = useSelect( ( select ) =&gt; {\n    return select( coreDataStore ).getPostTypes( { per_page: 4 } );\n\n    // Equivalent to:\n    // select( coreDataStore ).getEntityRecords( 'root', 'postType', { per_page: 4 } );\n} );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord[] | null</code>: Records.</li>\n</ul>\n<h3>getTaxonomy</h3>\n<p>Returns information for a given taxonomy.</p>\n<p><em>Usage</em></p>\n<pre><code>import { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nconst taxonomy = useSelect( ( select ) =&gt; {\n    return select( coreDataStore ).getTaxonomy( 'category' );\n\n    // Equivalent to:\n    // select( coreDataStore ).getEntityRecord( 'root', 'taxonomy', 'category' );\n} );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li>taxonomy <code>string</code></li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord | undefined</code>: Record.</li>\n</ul>\n<h3>getTaxonomies</h3>\n<p>Returns information for taxonomies.</p>\n<p><em>Usage</em></p>\n<pre><code>import { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nconst taxonomies = useSelect( ( select ) =&gt; {\n    return select( coreDataStore ).getTaxonomies( { type: 'post' } );\n\n    // Equivalent to:\n    // select( coreDataStore ).getEntityRecords( 'root', 'taxonomy', { type: 'post' } );\n} );\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord[] | null</code>: Records.</li>\n</ul>\n<h2>Other Selectors</h2>\n<p><!-- START TOKEN(Autogenerated selectors|../../../packages/core-data/src/selectors.ts) --></p>\n<h3>canUser</h3>\n<p>Returns whether the current user can perform the given action on the given REST resource.</p>\n<p>Calling this may trigger an OPTIONS request to the REST API via the <code>canUser()</code> resolver.</p>\n<p><a href=\"https://developer.wordpress.org/rest-api/reference/\">https://developer.wordpress.org/rest-api/reference/</a></p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>action</em> <code>string</code>: Action to check. One of: &#8216;create&#8217;, &#8216;read&#8217;, &#8216;update&#8217;, &#8216;delete&#8217;.</li>\n<li><em>resource</em> <code>string | EntityResource</code>: Entity resource to check. Accepts entity object <code>{ kind: 'root', name: 'media', id: 1 }</code> or REST base as a string &#8211; <code>media</code>.</li>\n<li><em>id</em> <code>EntityRecordKey</code>: Optional ID of the rest resource to check.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean | undefined</code>: Whether or not the user can perform the action, or <code>undefined</code> if the OPTIONS request is still being made.</li>\n</ul>\n<h3>canUserEditEntityRecord</h3>\n<p>Returns whether the current user can edit the given entity.</p>\n<p>Calling this may trigger an OPTIONS request to the REST API via the <code>canUser()</code> resolver.</p>\n<p><a href=\"https://developer.wordpress.org/rest-api/reference/\">https://developer.wordpress.org/rest-api/reference/</a></p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record&#8217;s id.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean | undefined</code>: Whether or not the user can edit, or <code>undefined</code> if the OPTIONS request is still being made.</li>\n</ul>\n<h3>getAuthors</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since 11.3. Callers should use <code>select( 'core' ).getUsers({ who: 'authors' })</code> instead.\n</p></blockquote>\n<p>Returns all available authors.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional object of query parameters to include with request. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/users/\">Users page</a> in the REST API Handbook and see the arguments for <a href=\"https://developer.wordpress.org/rest-api/reference/users/#list-users\">List Users</a> and <a href=\"https://developer.wordpress.org/rest-api/reference/users/#retrieve-a-user\">Retrieve a User</a>.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ET.User[]</code>: Authors list.</li>\n</ul>\n<h3>getAutosave</h3>\n<p>Returns the autosave for the post and author.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>postType</em> <code>string</code>: The type of the parent post.</li>\n<li><em>postId</em> <code>EntityRecordKey</code>: The id of the parent post.</li>\n<li><em>authorId</em> <code>EntityRecordKey</code>: The id of the author.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord | undefined</code>: The autosave for the post and author.</li>\n</ul>\n<h3>getAutosaves</h3>\n<p>Returns the latest autosaves for the post.</p>\n<p>May return multiple autosaves since the backend stores one autosave per author for each post.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>postType</em> <code>string</code>: The type of the parent post.</li>\n<li><em>postId</em> <code>EntityRecordKey</code>: The id of the parent post.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt; | undefined</code>: An array of autosaves for the post, or undefined if there is none.</li>\n</ul>\n<h3>getBlockPatternCategories</h3>\n<p>Retrieve the list of registered block pattern categories.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt;</code>: Block pattern category list.</li>\n</ul>\n<h3>getBlockPatterns</h3>\n<p>Retrieve the list of registered block patterns.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt;</code>: Block pattern list.</li>\n</ul>\n<h3>getCurrentTheme</h3>\n<p>Return the current theme.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: The current theme.</li>\n</ul>\n<h3>getCurrentThemeGlobalStylesRevisions</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WordPress 6.5.0. Callers should use <code>select( 'core' ).getRevisions( 'root', 'globalStyles', ${ recordKey } )</code> instead, where <code>recordKey</code> is the id of the global styles parent post.\n</p></blockquote>\n<p>Returns the revisions of the current global styles theme.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; object &gt; | null</code>: The current global styles.</li>\n</ul>\n<h3>getCurrentUser</h3>\n<p>Returns the current user.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ET.User&lt; 'edit' &gt;</code>: Current user object.</li>\n</ul>\n<h3>getDefaultTemplateId</h3>\n<p>Returns the default template use to render a given query.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>query</em> <code>TemplateQuery</code>: Query.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The default template id for the given query.</li>\n</ul>\n<h3>getEditedEntityRecord</h3>\n<p>Returns the specified entity record, merged with its edits.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ET.Updatable&lt; EntityRecord &gt; | false</code>: The entity record, merged with its edits.</li>\n</ul>\n<h3>getEmbedPreview</h3>\n<p>Returns the embed preview for the given URL.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>url</em> <code>string</code>: Embedded URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.</li>\n</ul>\n<h3>getEntitiesByKind</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WordPress 6.0. Use getEntitiesConfig instead\n</p></blockquote>\n<p>Returns the loaded entities for the given kind.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt;</code>: Array of entities with config matching kind.</li>\n</ul>\n<h3>getEntitiesConfig</h3>\n<p>Returns the loaded entities for the given kind.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; any &gt;</code>: Array of entities with config matching kind.</li>\n</ul>\n<h3>getEntity</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WordPress 6.0. Use getEntityConfig instead\n</p></blockquote>\n<p>Returns the entity config given its kind and name.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: Entity config</li>\n</ul>\n<h3>getEntityConfig</h3>\n<p>Returns the entity config given its kind and name.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: Entity config</li>\n</ul>\n<h3>getEntityRecord</h3>\n<p>Returns the Entity&#8217;s record object by key. Returns <code>null</code> if the value is not yet received, undefined if the value entity is known to not exist, or the entity object if it exists and is received.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>key</em> <code>EntityRecordKey</code>: Optional record&#8217;s key. If requesting a global record (e.g. site settings), the key can be omitted. If requesting a specific item, the key must always be included.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available &#8220;Retrieve a [Entity kind]&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord | undefined</code>: Record.</li>\n</ul>\n<h3>getEntityRecordEdits</h3>\n<p>Returns the specified entity record&#8217;s edits.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Optional&lt; any &gt;</code>: The entity record&#8217;s edits.</li>\n</ul>\n<h3>getEntityRecordNonTransientEdits</h3>\n<p>Returns the specified entity record&#8217;s non transient edits.</p>\n<p>Transient edits don&#8217;t create an undo level, and are not considered for change detection. They are defined in the entity&#8217;s config.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Optional&lt; any &gt;</code>: The entity record&#8217;s non transient edits.</li>\n</ul>\n<h3>getEntityRecords</h3>\n<p>Returns the Entity&#8217;s records.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord[] | null</code>: Records.</li>\n</ul>\n<h3>getEntityRecordsTotalItems</h3>\n<p>Returns the Entity&#8217;s total available records for a given query (ignoring pagination).</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>number | null</code>: number | null.</li>\n</ul>\n<h3>getEntityRecordsTotalPages</h3>\n<p>Returns the number of available pages for the given query.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. If requesting specific fields, fields must always include the ID. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>number | null</code>: number | null.</li>\n</ul>\n<h3>getLastEntityDeleteError</h3>\n<p>Returns the specified entity record&#8217;s last delete error.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: The entity record&#8217;s save error.</li>\n</ul>\n<h3>getLastEntitySaveError</h3>\n<p>Returns the specified entity record&#8217;s last save error.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: The entity record&#8217;s save error.</li>\n</ul>\n<h3>getRawEntityRecord</h3>\n<p>Returns the entity&#8217;s record object by key, with its attributes mapped to their raw values.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>key</em> <code>EntityRecordKey</code>: Record&#8217;s key.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>EntityRecord | undefined</code>: Object with the entity&#8217;s raw attributes.</li>\n</ul>\n<h3>getRedoEdit</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since 6.3\n</p></blockquote>\n<p>Returns the next edit from the current undo offset for the entity records edits history, if any.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Optional&lt; any &gt;</code>: The edit.</li>\n</ul>\n<h3>getReferenceByDistinctEdits</h3>\n<p>Returns a new reference when edited values have changed. This is useful in inferring where an edit has been made between states by comparison of the return values using strict equality.</p>\n<p><em>Usage</em></p>\n<pre><code>const hasEditOccurred = (\n   getReferenceByDistinctEdits( beforeState ) !==\n   getReferenceByDistinctEdits( afterState )\n);\n</code></pre>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> Editor state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li>A value whose reference will change only when an edit occurs.</li>\n</ul>\n<h3>getRevision</h3>\n<p>Returns a single, specific revision of a parent entity.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordKey</em> <code>EntityRecordKey</code>: The key of the entity record whose revisions you want to fetch.</li>\n<li><em>revisionKey</em> <code>EntityRecordKey</code>: The revision&#8217;s key.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see revisions schema in <a href=\"https://developer.wordpress.org/rest-api/reference/\">the REST API Handbook</a>. Then see the arguments available &#8220;Retrieve a [entity kind]&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RevisionRecord | Record&lt; PropertyKey, never &gt; | undefined</code>: Record.</li>\n</ul>\n<h3>getRevisions</h3>\n<p>Returns an entity&#8217;s revisions.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordKey</em> <code>EntityRecordKey</code>: The key of the entity record whose revisions you want to fetch.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional query. If requesting specific fields, fields must always include the ID. For valid query parameters see revisions schema in <a href=\"https://developer.wordpress.org/rest-api/reference/\">the REST API Handbook</a>. Then see the arguments available &#8220;Retrieve a [Entity kind]&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>RevisionRecord[] | null</code>: Record.</li>\n</ul>\n<h3>getThemeSupports</h3>\n<p>Return theme supports data in the index.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>any</code>: Index data.</li>\n</ul>\n<h3>getUndoEdit</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since 6.3\n</p></blockquote>\n<p>Returns the previous edit from the current undo offset for the entity records edits history, if any.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Optional&lt; any &gt;</code>: The edit.</li>\n</ul>\n<h3>getUserPatternCategories</h3>\n<p>Retrieve the registered user pattern categories.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Array&lt; UserPatternCategory &gt;</code>: User patterns category array.</li>\n</ul>\n<h3>getUserQueryResults</h3>\n<p>Returns all the users returned by a query ID.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>queryID</em> <code>string</code>: Query ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>ET.User&lt; 'edit' &gt;[]</code>: Users list.</li>\n</ul>\n<h3>hasEditsForEntityRecord</h3>\n<p>Returns true if the specified entity record has edits, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the entity record has edits or not.</li>\n</ul>\n<h3>hasEntityRecords</h3>\n<p>Returns true if records have been received for the given set of parameters, or false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>query</em> <code>GetRecordsHttpQuery</code>: Optional terms query. For valid query parameters see the <a href=\"https://developer.wordpress.org/rest-api/reference/\">Reference</a> in the REST API Handbook and select the entity kind. Then see the arguments available for &#8220;List [Entity kind]s&#8221;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether entity records have been received.</li>\n</ul>\n<h3>hasFetchedAutosaves</h3>\n<p>Returns true if the REST request for autosaves has completed.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>postType</em> <code>string</code>: The type of the parent post.</li>\n<li><em>postId</em> <code>EntityRecordKey</code>: The id of the parent post.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: True if the REST request was completed. False otherwise.</li>\n</ul>\n<h3>hasRedo</h3>\n<p>Returns true if there is a next edit from the current undo offset for the entity records edits history, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether there is a next edit or not.</li>\n</ul>\n<h3>hasUndo</h3>\n<p>Returns true if there is a previous edit from the current undo offset for the entity records edits history, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether there is a previous edit or not.</li>\n</ul>\n<h3>isAutosavingEntityRecord</h3>\n<p>Returns true if the specified entity record is autosaving, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the entity record is autosaving or not.</li>\n</ul>\n<h3>isDeletingEntityRecord</h3>\n<p>Returns true if the specified entity record is deleting, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the entity record is deleting or not.</li>\n</ul>\n<h3>isPreviewEmbedFallback</h3>\n<p>Determines if the returned preview is an oEmbed link fallback.</p>\n<p>WordPress can be configured to return a simple link to a URL if it is not embeddable. We need to be able to determine if a URL is embeddable or not, based on what we get back from the oEmbed preview API.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>url</em> <code>string</code>: Embedded URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Is the preview for the URL an oEmbed link fallback.</li>\n</ul>\n<h3>isRequestingEmbedPreview</h3>\n<p>Returns true if a request is in progress for embed preview data, or false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: Data state.</li>\n<li><em>url</em> <code>string</code>: URL the preview would be for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether a request is in progress for an embed preview.</li>\n</ul>\n<h3>isSavingEntityRecord</h3>\n<p>Returns true if the specified entity record is saving, and false otherwise.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>state</em> <code>State</code>: State tree.</li>\n<li><em>kind</em> <code>string</code>: Entity kind.</li>\n<li><em>name</em> <code>string</code>: Entity name.</li>\n<li><em>recordId</em> <code>EntityRecordKey</code>: Record ID.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the entity record is saving or not.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated selectors|../../../packages/core-data/src/selectors.ts) --></p>\n<h2>Actions</h2>\n<p><!-- START TOKEN(Autogenerated actions|../../../packages/core-data/src/actions.js) --></p>\n<h3>addEntities</h3>\n<p>Returns an action object used in adding new entities.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>entities</em> <code>Array</code>: Entities received.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>deleteEntityRecord</h3>\n<p>Action triggered to delete an entity record.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the deleted entity.</li>\n<li><em>name</em> <code>string</code>: Name of the deleted entity.</li>\n<li><em>recordId</em> <code>number|string</code>: Record ID of the deleted entity.</li>\n<li><em>query</em> <code>?Object</code>: Special query parameters for the DELETE API call.</li>\n<li><em>options</em> <code>[Object]</code>: Delete options.</li>\n<li><em>options.&#095;&#095;unstableFetch</em> <code>[Function]</code>: Internal use only. Function to call instead of <code>apiFetch()</code>. Must return a promise.</li>\n<li><em>options.throwOnError</em> <code>[boolean]</code>: If false, this action suppresses all the exceptions. Defaults to false.</li>\n</ul>\n<h3>editEntityRecord</h3>\n<p>Returns an action object that triggers an edit to an entity record.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the edited entity record.</li>\n<li><em>name</em> <code>string</code>: Name of the edited entity record.</li>\n<li><em>recordId</em> <code>number|string</code>: Record ID of the edited entity record.</li>\n<li><em>edits</em> <code>Object</code>: The edits.</li>\n<li><em>options</em> <code>Object</code>: Options for the edit.</li>\n<li><em>options.undoIgnore</em> <code>[boolean]</code>: Whether to ignore the edit in undo history or not.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveDefaultTemplateId</h3>\n<p>Returns an action object used to set the template for a given query.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>query</em> <code>Object</code>: The lookup query.</li>\n<li><em>templateId</em> <code>string</code>: The resolved template id.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveEntityRecords</h3>\n<p>Returns an action object used in signalling that entity records have been received.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the received entity record.</li>\n<li><em>name</em> <code>string</code>: Name of the received entity record.</li>\n<li><em>records</em> <code>Array|Object</code>: Records received.</li>\n<li><em>query</em> <code>?Object</code>: Query Object.</li>\n<li><em>invalidateCache</em> <code>?boolean</code>: Should invalidate query caches.</li>\n<li><em>edits</em> <code>?Object</code>: Edits to reset.</li>\n<li><em>meta</em> <code>?Object</code>: Meta information about pagination.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveNavigationFallbackId</h3>\n<p>Returns an action object signalling that the fallback Navigation Menu id has been received.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>fallbackId</em> <code>integer</code>: the id of the fallback Navigation Menu</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveRevisions</h3>\n<p>Action triggered to receive revision items.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the received entity record revisions.</li>\n<li><em>name</em> <code>string</code>: Name of the received entity record revisions.</li>\n<li><em>recordKey</em> <code>number|string</code>: The key of the entity record whose revisions you want to fetch.</li>\n<li><em>records</em> <code>Array|Object</code>: Revisions received.</li>\n<li><em>query</em> <code>?Object</code>: Query Object.</li>\n<li><em>invalidateCache</em> <code>?boolean</code>: Should invalidate query caches.</li>\n<li><em>meta</em> <code>?Object</code>: Meta information about pagination.</li>\n</ul>\n<h3>receiveThemeSupports</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WP 5.9, this is not useful anymore, use the selector directly.\n</p></blockquote>\n<p>Returns an action object used in signalling that the index has been received.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>receiveUploadPermissions</h3>\n<blockquote><p>\n  <strong>Deprecated</strong> since WP 5.9, use receiveUserPermission instead.\n</p></blockquote>\n<p>Returns an action object used in signalling that Upload permissions have been received.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>hasUploadPermissions</em> <code>boolean</code>: Does the user have permission to upload files?</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Object</code>: Action object.</li>\n</ul>\n<h3>redo</h3>\n<p>Action triggered to redo the last undone edit to an entity record, if any.</p>\n<h3>saveEditedEntityRecord</h3>\n<p>Action triggered to save an entity record&#8217;s edits.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the entity.</li>\n<li><em>name</em> <code>string</code>: Name of the entity.</li>\n<li><em>recordId</em> <code>Object</code>: ID of the record.</li>\n<li><em>options</em> <code>Object=</code>: Saving options.</li>\n</ul>\n<h3>saveEntityRecord</h3>\n<p>Action triggered to save an entity record.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>kind</em> <code>string</code>: Kind of the received entity.</li>\n<li><em>name</em> <code>string</code>: Name of the received entity.</li>\n<li><em>record</em> <code>Object</code>: Record to be saved.</li>\n<li><em>options</em> <code>Object</code>: Saving options.</li>\n<li><em>options.isAutosave</em> <code>[boolean]</code>: Whether this is an autosave.</li>\n<li><em>options.&#095;&#095;unstableFetch</em> <code>[Function]</code>: Internal use only. Function to call instead of <code>apiFetch()</code>. Must return a promise.</li>\n<li><em>options.throwOnError</em> <code>[boolean]</code>: If false, this action suppresses all the exceptions. Defaults to false.</li>\n</ul>\n<h3>undo</h3>\n<p>Action triggered to undo the last edit to an entity record, if any.</p>\n<p><!-- END TOKEN(Autogenerated actions|../../../packages/core-data/src/actions.js) --></p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134606,
    "menu_order": 335,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134607",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134607",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 50,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134607/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 156170,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134607/revisions/156170"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134606"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134607"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}