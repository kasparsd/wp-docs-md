{
    "id": 140593,
    "date": "2022-05-18T09:09:48",
    "date_gmt": "2022-05-18T09:09:48",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/4-building-a-create-page-form/"
    },
    "modified": "2024-11-18T21:54:44",
    "modified_gmt": "2024-11-18T21:54:44",
    "slug": "4-building-a-create-page-form",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/how-to-guides/data-basics/4-building-a-create-page-form/",
    "title": {
        "rendered": "Building a Create page form"
    },
    "content": {
        "rendered": "<p>In the <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/\">previous part</a> we created an <em>Edit page</em> feature, and in this part we will add a <em>Create page</em> feature. Here&#8217;s a glimpse of what we&#8217;re going to build:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/create-form/create-form-with-text.png?ssl=1\" alt=\"\" /></p>\n<h3>Step 1: Add a <em>Create a new page</em> button</h3>\n<p>Let\u2019s start by building a button to display the <em>create page</em> form. It\u2019s similar to an <em>Edit</em> button we have built in the <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/\">part 3</a>:</p>\n<pre><code class=\"language-js\">import { useDispatch } from '@wordpress/data';\nimport { Button, Modal, TextControl } from '@wordpress/components';\n\nfunction CreatePageButton() {\n    const [isOpen, setOpen] = useState( false );\n    const openModal = () =&gt; setOpen( true );\n    const closeModal = () =&gt; setOpen( false );\n    return (\n        &lt;&gt;\n            &lt;Button onClick={ openModal } variant=\"primary\"&gt;\n                Create a new Page\n            &lt;/Button&gt;\n            { isOpen &amp;&amp; (\n                &lt;Modal onRequestClose={ closeModal } title=\"Create a new page\"&gt;\n                    &lt;CreatePageForm\n                        onCancel={ closeModal }\n                        onSaveFinished={ closeModal }\n                    /&gt;\n                &lt;/Modal&gt;\n            ) }\n        &lt;/&gt;\n    );\n}\n\nfunction CreatePageForm() {\n    // Empty for now\n    return &lt;div/&gt;;\n}\n\n</code></pre>\n<p>Great! Now let\u2019s make <code>MyFirstApp</code> display our shiny new button:</p>\n<pre><code class=\"language-js\">function MyFirstApp() {\n    // ...\n    return (\n        &lt;div&gt;\n            &lt;div className=\"list-controls\"&gt;\n                &lt;SearchControl onChange={ setSearchTerm } value={ searchTerm }/&gt;\n                &lt;CreatePageButton/&gt;\n            &lt;/div&gt;\n            &lt;PagesList hasResolved={ hasResolved } pages={ pages }/&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>\n<p>The final result should look as follows:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/create-form/create-button.png?ssl=1\" alt=\"\" /></p>\n<h3>Step 2: Extract a controlled PageForm</h3>\n<p>Now that the button is in place, we can focus entirely on building the form. This tutorial is about managing data, so we will not build a complete page editor. Instead, the form will only contain one field: post title.</p>\n<p>Luckily, the <code>EditPageForm</code> we built in <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/\">part three</a> already takes us 80% of the way there. The bulk of the user interface is already available, and we will reuse it in the <code>CreatePageForm</code>. Let\u2019s start by extracting the form UI into a separate component:</p>\n<pre><code class=\"language-js\">function EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n    // ...\n    return (\n        &lt;PageForm\n            title={ page.title }\n            onChangeTitle={ handleChange }\n            hasEdits={ hasEdits }\n            lastError={ lastError }\n            isSaving={ isSaving }\n            onCancel={ onCancel }\n            onSave={ handleSave }\n        /&gt;\n    );\n}\n\nfunction PageForm( { title, onChangeTitle, hasEdits, lastError, isSaving, onCancel, onSave } ) {\n    return (\n        &lt;div className=\"my-gutenberg-form\"&gt;\n            &lt;TextControl\n                __nextHasNoMarginBottom\n                __next40pxDefaultSize\n                label=\"Page title:\"\n                value={ title }\n                onChange={ onChangeTitle }\n            /&gt;\n            { lastError ? (\n                &lt;div className=\"form-error\"&gt;Error: { lastError.message }&lt;/div&gt;\n            ) : (\n                false\n            ) }\n            &lt;div className=\"form-buttons\"&gt;\n                &lt;Button\n                    onClick={ onSave }\n                    variant=\"primary\"\n                    disabled={ !hasEdits || isSaving }\n                &gt;\n                    { isSaving ? (\n                        &lt;&gt;\n                            &lt;Spinner/&gt;\n                            Saving\n                        &lt;/&gt;\n                    ) : 'Save' }\n                &lt;/Button&gt;\n                &lt;Button\n                    onClick={ onCancel }\n                    variant=\"tertiary\"\n                    disabled={ isSaving }\n                &gt;\n                    Cancel\n                &lt;/Button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>\n<p>This code quality change should not alter anything about how the application works. Let\u2019s try to edit a page just to be sure:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/create-form/edit-page-form.png?ssl=1\" alt=\"\" /></p>\n<p>Great! The edit form is still there, and now we have a building block to power the new <code>CreatePageForm</code>.</p>\n<h3>Step 3: Build a CreatePageForm</h3>\n<p>The only thing that <code>CreatePageForm</code> component must do is to provide the following seven properties needed to render the <code>PageForm</code> component:</p>\n<ul>\n<li>title</li>\n<li>onChangeTitle</li>\n<li>hasEdits</li>\n<li>lastError</li>\n<li>isSaving</li>\n<li>onCancel</li>\n<li>onSave</li>\n</ul>\n<p>Let\u2019s see how we can do that:</p>\n<h4>Title, onChangeTitle, hasEdits</h4>\n<p>The <code>EditPageForm</code> updated and saved an existing entity record that lived in the Redux state. Because of that, we relied on the <code>editedEntityRecords</code> selector.</p>\n<p>In case of the <code>CreatePageForm</code> however, there is no pre-existing entity record. There is only an empty form. Anything that the user types is local to that form, which means we can keep track of it using the React\u2019s <code>useState</code> hook:</p>\n<pre><code class=\"language-js\">function CreatePageForm( { onCancel, onSaveFinished } ) {\n    const [title, setTitle] = useState();\n    const handleChange = ( title ) =&gt; setTitle( title );\n    return (\n        &lt;PageForm\n            title={ title }\n            onChangeTitle={ setTitle }\n            hasEdits={ !!title }\n            { /* ... */ }\n        /&gt;\n    );\n}\n</code></pre>\n<h4>onSave, onCancel</h4>\n<p>In the <code>EditPageForm</code>, we dispatched the <code>saveEditedEntityRecord('postType', 'page', pageId )</code> action to save the edits that lived in the Redux state.</p>\n<p>In the <code>CreatePageForm</code> however, we do not have any edits in the Redux state, nor we do have a <code>pageId</code>. The action we need to dispatch in this case is called <a href=\"https://developer.wordpress.org/block-editor/reference-guides/data/data-core/#saveentityrecord\"><code>saveEntityRecord</code></a> (without the word <em>Edited</em> in the name) and it accepts an object representing the new entity record instead of a <code>pageId</code>.</p>\n<p>The data passed to <code>saveEntityRecord</code> is sent via a POST request to the appropriate REST API endpoint. For example, dispatching the following action:</p>\n<pre><code class=\"language-js\">saveEntityRecord( 'postType', 'page', { title: \"Test\" } );\n</code></pre>\n<p>Triggers a POST request to the <a href=\"https://developer.wordpress.org/rest-api/reference/pages/\"><code>/wp/v2/pages</code> WordPress REST API</a> endpoint with a  single field in the request body: <code>title=Test</code>.</p>\n<p>Now that we know more about <code>saveEntityRecord</code>, let&#8217;s use it in <code>CreatePageForm</code>.</p>\n<pre><code class=\"language-js\">function CreatePageForm( { onSaveFinished, onCancel } ) {\n    // ...\n    const { saveEntityRecord } = useDispatch( coreDataStore );\n    const handleSave = async () =&gt; {\n        const savedRecord = await saveEntityRecord(\n            'postType',\n            'page',\n            { title }\n        );\n        if ( savedRecord ) {\n            onSaveFinished();\n        }\n    };\n    return (\n        &lt;PageForm\n            { /* ... */ }\n            onSave={ handleSave }\n            onCancel={ onCancel }\n        /&gt;\n    );\n}\n</code></pre>\n<p>There is one more detail to address: our newly created pages are not yet picked up by the <code>PagesList</code>. Accordingly to the REST API documentation, the <code>/wp/v2/pages</code> endpoint creates (<code>POST</code> requests) pages with <code>status=draft</code> by default, but <em>returns</em> (<code>GET</code> requests) pages with <code>status=publish</code>. The solution is to pass the <code>status</code> parameter explicitly:</p>\n<pre><code class=\"language-js\">function CreatePageForm( { onSaveFinished, onCancel } ) {\n    // ...\n    const { saveEntityRecord } = useDispatch( coreDataStore );\n    const handleSave = async () =&gt; {\n        const savedRecord = await saveEntityRecord(\n            'postType',\n            'page',\n            { title, status: 'publish' }\n        );\n        if ( savedRecord ) {\n            onSaveFinished();\n        }\n    };\n    return (\n        &lt;PageForm\n            { /* ... */ }\n            onSave={ handleSave }\n            onCancel={ onCancel }\n        /&gt;\n    );\n}\n</code></pre>\n<p>Go ahead and apply that change to your local <code>CreatePageForm</code> component, and let\u2019s tackle the remaining two props.</p>\n<h4>lastError, isSaving</h4>\n<p>The <code>EditPageForm</code>  retrieved the error and progress information via the <code>getLastEntitySaveError</code> and <code>isSavingEntityRecord</code> selectors. In both cases, it passed the following three arguments: <code>( 'postType', 'page', pageId )</code>.</p>\n<p>In <code>CreatePageForm</code> however, we do not have a <code>pageId</code>. What now? We can skip the <code>pageId</code> argument to retrieve the information about the entity record without any id \u2013 this will be the newly created one. The <code>useSelect</code> call is thus very similar to the one from <code>EditPageForm</code>:</p>\n<pre><code class=\"language-js\">function CreatePageForm( { onCancel, onSaveFinished } ) {\n    // ...\n    const { lastError, isSaving } = useSelect(\n        ( select ) =&gt; ( {\n            // Notice the missing pageId argument:\n            lastError: select( coreDataStore )\n                .getLastEntitySaveError( 'postType', 'page' ),\n            // Notice the missing pageId argument\n            isSaving: select( coreDataStore )\n                .isSavingEntityRecord( 'postType', 'page' ),\n        } ),\n        []\n    );\n    // ...\n    return (\n        &lt;PageForm\n            { /* ... */ }\n            lastError={ lastError }\n            isSaving={ isSaving }\n        /&gt;\n    );\n}\n</code></pre>\n<p>And that\u2019s it! Here&#8217;s what our new form looks like in action:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/create-form/create-saving.png?ssl=1\" alt=\"\" /><br />\n<img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/create-form/created-item.png?ssl=1\" alt=\"\" /></p>\n<h3>Wiring it all together</h3>\n<p>Here\u2019s everything we built in this chapter in one place:</p>\n<pre><code class=\"language-js\">function CreatePageForm( { onCancel, onSaveFinished } ) {\n    const [title, setTitle] = useState();\n    const { lastError, isSaving } = useSelect(\n        ( select ) =&gt; ( {\n            lastError: select( coreDataStore )\n                .getLastEntitySaveError( 'postType', 'page' ),\n            isSaving: select( coreDataStore )\n                .isSavingEntityRecord( 'postType', 'page' ),\n        } ),\n        []\n    );\n\n    const { saveEntityRecord } = useDispatch( coreDataStore );\n    const handleSave = async () =&gt; {\n        const savedRecord = await saveEntityRecord(\n            'postType',\n            'page',\n            { title, status: 'publish' }\n        );\n        if ( savedRecord ) {\n            onSaveFinished();\n        }\n    };\n\n    return (\n        &lt;PageForm\n            title={ title }\n            onChangeTitle={ setTitle }\n            hasEdits={ !!title }\n            onSave={ handleSave }\n            lastError={ lastError }\n            onCancel={ onCancel }\n            isSaving={ isSaving }\n        /&gt;\n    );\n}\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n    const { page, lastError, isSaving, hasEdits } = useSelect(\n        ( select ) =&gt; ( {\n            page: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n            lastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId ),\n            isSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n            hasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n        } ),\n        [pageId]\n    );\n\n    const { saveEditedEntityRecord, editEntityRecord } = useDispatch( coreDataStore );\n    const handleSave = async () =&gt; {\n        const savedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n        if ( savedRecord ) {\n            onSaveFinished();\n        }\n    };\n    const handleChange = ( title ) =&gt; editEntityRecord( 'postType', 'page', page.id, { title } );\n\n    return (\n        &lt;PageForm\n            title={ page.title }\n            onChangeTitle={ handleChange }\n            hasEdits={ hasEdits }\n            lastError={ lastError }\n            isSaving={ isSaving }\n            onCancel={ onCancel }\n            onSave={ handleSave }\n        /&gt;\n    );\n}\n\nfunction PageForm( { title, onChangeTitle, hasEdits, lastError, isSaving, onCancel, onSave } ) {\n    return (\n        &lt;div className=\"my-gutenberg-form\"&gt;\n            &lt;TextControl\n                __nextHasNoMarginBottom\n                __next40pxDefaultSize\n                label=\"Page title:\"\n                value={ title }\n                onChange={ onChangeTitle }\n            /&gt;\n            { lastError ? (\n                &lt;div className=\"form-error\"&gt;Error: { lastError.message }&lt;/div&gt;\n            ) : (\n                false\n            ) }\n            &lt;div className=\"form-buttons\"&gt;\n                &lt;Button\n                    onClick={ onSave }\n                    variant=\"primary\"\n                    disabled={ !hasEdits || isSaving }\n                &gt;\n                    { isSaving ? (\n                        &lt;&gt;\n                            &lt;Spinner/&gt;\n                            Saving\n                        &lt;/&gt;\n                    ) : 'Save' }\n                &lt;/Button&gt;\n                &lt;Button\n                    onClick={ onCancel }\n                    variant=\"tertiary\"\n                    disabled={ isSaving }\n                &gt;\n                    Cancel\n                &lt;/Button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>\n<p>All that\u2019s left is to refresh the page and enjoy the form:</p>\n<p><img data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/create-form/create-form-with-text.png?ssl=1\" alt=\"\" /></p>\n<h2>What&#8217;s next?</h2>\n<ul>\n<li><strong>Next part:</strong> <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/data-basics/5-adding-a-delete-button/\">Adding a delete button</a></li>\n<li><strong>Previous part:</strong> <a href=\"https://developer.wordpress.org/block-editor/how-to-guides/data-basics/3-building-an-edit-form/\">Building an edit form</a></li>\n<li>(optional) Review the <a href=\"https://github.com/WordPress/block-development-examples/tree/trunk/plugins/data-basics-59c8f8\">finished app</a> in the block-development-examples repository</li>\n</ul>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 140129,
    "menu_order": 33,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-140593",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/140593",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 7,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/140593/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 155761,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/140593/revisions/155761"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/140129"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=140593"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}