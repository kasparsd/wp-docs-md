{
    "id": 134553,
    "date": "2021-03-09T08:38:23",
    "date_gmt": "2021-03-09T08:38:23",
    "guid": {
        "rendered": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-e2e-test-utils/"
    },
    "modified": "2025-01-06T18:49:13",
    "modified_gmt": "2025-01-06T18:49:13",
    "slug": "packages-e2e-test-utils",
    "status": "publish",
    "type": "blocks-handbook",
    "link": "https://developer.wordpress.org/block-editor/reference-guides/packages/packages-e2e-test-utils/",
    "title": {
        "rendered": "@wordpress/e2e-test-utils"
    },
    "content": {
        "rendered": "<p>End-To-End (E2E) test utils for WordPress.</p>\n<p><em>It works properly with the minimum version of Gutenberg <code>13.8.0</code> or the minimum version of WordPress <code>6.0.0</code>.</em></p>\n<p><strong>Note that there&#8217;s currently an ongoing <a href=\"https://github.com/WordPress/gutenberg/issues/38851\">project</a> to migrate E2E tests to Playwright instead. This package is deprecated and will only accept bug fixes until fully migrated.</strong></p>\n<h2>Installation</h2>\n<p>Install the module</p>\n<pre><code class=\"language-bash\">npm install @wordpress/e2e-test-utils --save-dev\n</code></pre>\n<p><strong>Note</strong>: This package requires Node.js version with long-term support status (check <a href=\"https://nodejs.org/en/about/previous-releases\">Active LTS or Maintenance LTS releases</a>). It is not compatible with older versions.</p>\n<h2>API</h2>\n<p><!-- START TOKEN(Autogenerated API docs) --></p>\n<h3>activatePlugin</h3>\n<p>Activates an installed plugin.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>slug</em> <code>string</code>: Plugin slug.</li>\n</ul>\n<h3>activateTheme</h3>\n<p>Activates an installed theme.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>slug</em> <code>string</code>: Theme slug.</li>\n</ul>\n<h3>arePrePublishChecksEnabled</h3>\n<p>Verifies if publish checks are enabled.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise&lt;boolean&gt;</code>: Boolean which represents the state of prepublish checks.</li>\n</ul>\n<h3>canvas</h3>\n<p>Gets the editor canvas frame.</p>\n<h3>changeSiteTimezone</h3>\n<p>Visits general settings page and changes the timezone to the given value.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>timezone</em> <code>string</code>: Value of the timezone to set.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Value of the previous timezone.</li>\n</ul>\n<h3>clearLocalStorage</h3>\n<p>Clears the local storage.</p>\n<h3>clickBlockAppender</h3>\n<p>Clicks the default block appender.</p>\n<h3>clickBlockToolbarButton</h3>\n<p>Clicks a block toolbar button.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>label</em> <code>string</code>: The text string of the button label.</li>\n<li><em>type</em> <code>[string]</code>: The type of button label: &#8216;ariaLabel&#8217; or &#8216;content&#8217;.</li>\n</ul>\n<h3>clickButton</h3>\n<p>Clicks a button based on the text on the button.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>buttonText</em> <code>string</code>: The text that appears on the button to click.</li>\n</ul>\n<h3>clickMenuItem</h3>\n<p>Searches for an item in the menu with the text provided and clicks it.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>label</em> <code>string</code>: The label to search the menu item for.</li>\n</ul>\n<h3>clickOnCloseModalButton</h3>\n<p>Click on the close button of an open modal.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>modalClassName</em> <code>?string</code>: Class name for the modal to close</li>\n</ul>\n<h3>clickOnMoreMenuItem</h3>\n<p>Clicks on More Menu item, searches for the button with the text provided and clicks it.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>buttonLabel</em> <code>string</code>: The label to search the button for.</li>\n</ul>\n<h3>closeGlobalBlockInserter</h3>\n<p>Closes the global inserter.</p>\n<h3>closeListView</h3>\n<p>Closes list view</p>\n<h3>createEmbeddingMatcher</h3>\n<p>Creates a function to determine if a request is embedding a certain URL.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>url</em> <code>string</code>: The URL to check against a request.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Function</code>: Function that determines if a request is for the embed API, embedding a specific URL.</li>\n</ul>\n<h3>createJSONResponse</h3>\n<p>Respond to a request with a JSON response.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>mockResponse</em> <code>string</code>: The mock object to wrap in a JSON response.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise that responds to a request with the mock JSON response.</li>\n</ul>\n<h3>createMenu</h3>\n<p>Create menus and all linked resources for the menu using the REST API.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>menu</em> <code>Object</code>: Rest payload for the menu</li>\n<li><em>menuItems</em> <code>?Array</code>: Data for any menu items to be created.</li>\n</ul>\n<h3>createNewPost</h3>\n<p>Creates new post.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>object</em> <code>Object</code>: Object to create new post, along with tips enabling option.</li>\n<li><em>object.postType</em> <code>[string]</code>: Post type of the new post.</li>\n<li><em>object.title</em> <code>[string]</code>: Title of the new post.</li>\n<li><em>object.content</em> <code>[string]</code>: Content of the new post.</li>\n<li><em>object.excerpt</em> <code>[string]</code>: Excerpt of the new post.</li>\n<li><em>object.showWelcomeGuide</em> <code>[boolean]</code>: Whether to show the welcome guide.</li>\n</ul>\n<h3>createNewTemplate</h3>\n<p>Opens the template editor with a newly created template.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Name of the template.</li>\n</ul>\n<h3>createReusableBlock</h3>\n<p>Creates a simple reusable block with a paragraph block.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>content</em> <code>string</code>: Paragraph block&#8217;s content</li>\n<li><em>title</em> <code>title</code>: Reusable block&#8217;s name.</li>\n</ul>\n<h3>createURL</h3>\n<p>Creates new URL by parsing base URL, WPPath and query string.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>WPPath</em> <code>string</code>: String to be serialized as pathname.</li>\n<li><em>query</em> <code>?string</code>: String to be serialized as query portion of URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: String which represents full URL.</li>\n</ul>\n<h3>createURLMatcher</h3>\n<p>Creates a function to determine if a request is calling a URL with the substring present.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>substring</em> <code>string</code>: The substring to check for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Function</code>: Function that determines if a request&#8217;s URL contains substring.</li>\n</ul>\n<h3>createUser</h3>\n<p>Create a new user account.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>username</em> <code>string</code>: User name.</li>\n<li><em>object</em> <code>?Object</code>: Optional Settings for the new user account.</li>\n<li><em>object.firstName</em> <code>[string]</code>: First name.</li>\n<li><em>object.lastName</em> <code>[string]</code>: Last name.</li>\n<li><em>object.role</em> <code>[string]</code>: Role. Defaults to Administrator.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: Password for the newly created user account.</li>\n</ul>\n<h3>deactivatePlugin</h3>\n<p>Deactivates an active plugin.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>slug</em> <code>string</code>: Plugin slug.</li>\n</ul>\n<h3>deleteAllMenus</h3>\n<p>Delete all menus using the REST API</p>\n<h3>deleteAllTemplates</h3>\n<p>Delete all the templates of given type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>type</em> <code>('wp_template'|'wp_template_part')</code>: &#8211; Template type to delete.</li>\n</ul>\n<h3>deleteAllWidgets</h3>\n<p>Delete all the widgets in the widgets screen.</p>\n<h3>deleteTheme</h3>\n<p>Deletes a theme from the site, activating another theme if necessary.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>slug</em> <code>string</code>: Theme slug.</li>\n<li><em>settings</em> <code>?Object</code>: Optional settings object.</li>\n<li><em>settings.newThemeSlug</em> <code>?string</code>: A theme to switch to if the theme to delete is active. Required if the theme to delete is active.</li>\n<li><em>settings.newThemeSearchTerm</em> <code>?string</code>: A search term to use if the new theme is not findable by its slug.</li>\n</ul>\n<h3>deleteUser</h3>\n<p>Delete a user account.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>username</em> <code>string</code>: User name.</li>\n</ul>\n<h3>disableFocusLossObservation</h3>\n<p>Removes the focus loss listener that <code>enableFocusLossObservation()</code> adds.</p>\n<h3>disablePageDialogAccept</h3>\n<p>Disable auto-accepting any dialogs.</p>\n<h3>disablePrePublishChecks</h3>\n<p>Disables Pre-publish checks.</p>\n<h3>disableSiteEditorWelcomeGuide</h3>\n<p>Skips the welcome guide popping up to first time users of the site editor</p>\n<h3>dragAndResize</h3>\n<p>Clicks an element, drags a particular distance and releases the mouse button.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>element</em> <code>Object</code>: The puppeteer element handle.</li>\n<li><em>delta</em> <code>Object</code>: Object containing movement distances.</li>\n<li><em>delta.x</em> <code>number</code>: Horizontal distance to drag.</li>\n<li><em>delta.y</em> <code>number</code>: Vertical distance to drag.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving when drag completes.</li>\n</ul>\n<h3>enableFocusLossObservation</h3>\n<p>Adds an event listener to the document which throws an error if there is a loss of focus.</p>\n<h3>enablePageDialogAccept</h3>\n<p>Enables event listener which auto-accepts all dialogs on the page.</p>\n<h3>enablePrePublishChecks</h3>\n<p>Enables Pre-publish checks.</p>\n<h3>ensureSidebarOpened</h3>\n<p>Verifies that the edit post/site/widgets sidebar is opened, and if it is not, opens it.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving once the sidebar is opened.</li>\n</ul>\n<h3>enterEditMode</h3>\n<p>Enters edit mode.</p>\n<h3>findSidebarPanelToggleButtonWithTitle</h3>\n<p>Finds a sidebar panel with the provided title.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>panelTitle</em> <code>string</code>: The name of sidebar panel.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>?ElementHandle</code>: Object that represents an in-page DOM element.</li>\n</ul>\n<h3>findSidebarPanelWithTitle</h3>\n<p>Finds the button responsible for toggling the sidebar panel with the provided title.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>panelTitle</em> <code>string</code>: The name of sidebar panel.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise&lt;ElementHandle|undefined&gt;</code>: Object that represents an in-page DOM element.</li>\n</ul>\n<h3>getAllBlockInserterItemTitles</h3>\n<p>Returns an array of strings with all inserter item titles.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving with an array containing all inserter item titles.</li>\n</ul>\n<h3>getAllBlocks</h3>\n<p>Returns an array with all blocks; Equivalent to calling wp.data.select( &#8216;core/block-editor&#8217; ).getBlocks();</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving with an array containing all blocks in the document.</li>\n</ul>\n<h3>getAvailableBlockTransforms</h3>\n<p>Returns an array of strings with all block titles, that the current selected block can be transformed into.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving with an array containing all possible block transforms</li>\n</ul>\n<h3>getBlockSetting</h3>\n<p>Returns a string containing the block title associated with the provided block name.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockName</em> <code>string</code>: Block name.</li>\n<li><em>setting</em> <code>string</code>: Block setting e.g: title, attributes&#8230;.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving with a string containing the block title.</li>\n</ul>\n<h3>getCurrentPostContent</h3>\n<p>Returns a promise which resolves with the current post content (HTML string).</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving with current post content markup.</li>\n</ul>\n<h3>getCurrentSiteEditorContent</h3>\n<p>Returns a promise which resolves with the edited post content (HTML string).</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise&lt;string&gt;</code>: Promise resolving with post content markup.</li>\n</ul>\n<h3>getEditedPostContent</h3>\n<p>Returns a promise which resolves with the edited post content (HTML string).</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving with post content markup.</li>\n</ul>\n<h3>getListViewBlocks</h3>\n<p>Gets all block anchor nodes in the list view that match a given block name label.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>blockLabel</em> <code>string</code>: the label of the block as displayed in the ListView.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: all the blocks anchor nodes matching the label in the ListView.</li>\n</ul>\n<h3>getOption</h3>\n<p>Returns a site option, from the options admin page.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>setting</em> <code>string</code>: The option, used to get the option by id.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The value of the option.</li>\n</ul>\n<h3>getPageError</h3>\n<p>Returns a promise resolving to one of either a string or null. A string will be resolved if an error message is present in the contents of the page. If no error is present, a null value will be resolved instead. This requires the environment be configured to display errors.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"http://php.net/manual/en/function.error-reporting.php\">http://php.net/manual/en/function.error-reporting.php</a></li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise&lt;?string&gt;</code>: Promise resolving to a string or null, depending whether a page error is present.</li>\n</ul>\n<h3>hasBlockSwitcher</h3>\n<p>Returns a boolean indicating if the current selected block has a block switcher or not.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving with a boolean.</li>\n</ul>\n<h3>insertBlock</h3>\n<p>Inserts a block matching a given search term via the global inserter.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>searchTerm</em> <code>string</code>: The term by which to find the block to insert.</li>\n</ul>\n<h3>insertBlockDirectoryBlock</h3>\n<p>Inserts a Block Directory block matching a given search term via the global inserter.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>searchTerm</em> <code>string</code>: The term by which to find the Block Directory block to insert.</li>\n</ul>\n<h3>insertPattern</h3>\n<p>Inserts a pattern matching a given search term via the global inserter.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>searchTerm</em> <code>string</code>: The term by which to find the pattern to insert.</li>\n</ul>\n<h3>installPlugin</h3>\n<p>Installs a plugin from the WP.org repository.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>slug</em> <code>string</code>: Plugin slug.</li>\n<li><em>searchTerm</em> <code>?string</code>: If the plugin is not findable by its slug use an alternative term to search.</li>\n</ul>\n<h3>installTheme</h3>\n<p>Installs a theme from the WP.org repository.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>slug</em> <code>string</code>: Theme slug.</li>\n<li><em>settings</em> <code>?Object</code>: Optional settings object.</li>\n<li><em>settings.searchTerm</em> <code>?string</code>: Search term to use if the theme is not findable by its slug.</li>\n</ul>\n<h3>isCurrentURL</h3>\n<p>Checks if current URL is a WordPress path.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>WPPath</em> <code>string</code>: String to be serialized as pathname.</li>\n<li><em>query</em> <code>?string</code>: String to be serialized as query portion of URL.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Boolean represents whether current URL is or not a WordPress path.</li>\n</ul>\n<h3>isInDefaultBlock</h3>\n<p>Checks if the block that is focused is the default block.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving with a boolean indicating if the focused block is the default block.</li>\n</ul>\n<h3>isListViewOpen</h3>\n<p>Undocumented declaration.</p>\n<h3>isOfflineMode</h3>\n<p>Undocumented declaration.</p>\n<h3>isThemeInstalled</h3>\n<p>Checks whether a theme exists on the site.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>slug</em> <code>string</code>: Theme slug to check.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>boolean</code>: Whether the theme exists.</li>\n</ul>\n<h3>loginUser</h3>\n<p>Performs log in with specified username and password.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>username</em> <code>?string</code>: String to be used as user credential.</li>\n<li><em>password</em> <code>?string</code>: String to be used as user credential.</li>\n</ul>\n<h3>logout</h3>\n<p>Performs log out.</p>\n<h3>mockOrTransform</h3>\n<p>Mocks a request with the supplied mock object, or allows it to run with an optional transform, based on the deserialised JSON response for the request.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>mockCheck</em> <code>Function</code>: function that returns true if the request should be mocked.</li>\n<li><em>mock</em> <code>Object</code>: A mock object to wrap in a JSON response, if the request should be mocked.</li>\n<li><em>responseObjectTransform</em> <code>Function|undefined</code>: An optional function that transforms the response&#8217;s object before the response is used.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise that uses <code>mockCheck</code> to see if a request should be mocked with <code>mock</code>, and optionally transforms the response with <code>responseObjectTransform</code>.</li>\n</ul>\n<h3>openDocumentSettingsSidebar</h3>\n<p>Clicks on the button in the header which opens Document Settings sidebar when it is closed.</p>\n<h3>openGlobalBlockInserter</h3>\n<p>Opens the global inserter.</p>\n<h3>openGlobalStylesPanel</h3>\n<p>Opens a global styles panel.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>panelName</em> <code>string</code>: Name of the panel that is going to be opened.</li>\n</ul>\n<h3>openListView</h3>\n<p>Opens list view</p>\n<h3>openPreviewPage</h3>\n<p>Opens the preview page of an edited post.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>editorPage</em> <code>Page</code>: puppeteer editor page.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Page</code>: preview page.</li>\n</ul>\n<h3>openPreviousGlobalStylesPanel</h3>\n<p>Opens the previous global styles panel.</p>\n<h3>openPublishPanel</h3>\n<p>Opens the publish panel.</p>\n<h3>openTypographyToolsPanelMenu</h3>\n<p>Opens the Typography tools panel menu provided via block supports.</p>\n<h3>pressKeyTimes</h3>\n<p>Presses the given keyboard key a number of times in sequence.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>key</em> <code>string</code>: Key to press.</li>\n<li><em>count</em> <code>number</code>: Number of times to press.</li>\n</ul>\n<h3>pressKeyWithModifier</h3>\n<p>Performs a key press with modifier (Shift, Control, Meta, Alt), where each modifier is normalized to platform-specific modifier.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>modifier</em> <code>string</code>: Modifier key.</li>\n<li><em>key</em> <code>string</code>: Key to press while modifier held.</li>\n</ul>\n<h3>publishPost</h3>\n<p>Publishes the post, resolving once the request is complete (once a notice is displayed).</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving when publish is complete.</li>\n</ul>\n<h3>publishPostWithPrePublishChecksDisabled</h3>\n<p>Publishes the post without the pre-publish checks, resolving once the request is complete (once a notice is displayed).</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving when publish is complete.</li>\n</ul>\n<h3>resetPreferences</h3>\n<p>Clears all user meta preferences.</p>\n<h3>saveDraft</h3>\n<p>Saves the post as a draft, resolving once the request is complete (once the &#8220;Saved&#8221; indicator is displayed).</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving when draft save is complete.</li>\n</ul>\n<h3>searchForBlock</h3>\n<p>Searches for a block via the global inserter.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>searchTerm</em> <code>string</code>: The term to search the inserter for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise&lt;ElementHandle|null&gt;</code>: The handle of block to be inserted or null if nothing was found.</li>\n</ul>\n<h3>searchForBlockDirectoryBlock</h3>\n<p>Searches for a Block Directory block via the global inserter.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>searchTerm</em> <code>string</code>: The term to search the inserter for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise&lt;ElementHandle|null&gt;</code>: The handle of the Block Directory block to be inserted or null if nothing was found.</li>\n</ul>\n<h3>searchForPattern</h3>\n<p>Searches for a pattern via the global inserter.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>searchTerm</em> <code>string</code>: The term to search the inserter for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise&lt;ElementHandle|null&gt;</code>: The handle of the pattern to be inserted or null if nothing was found.</li>\n</ul>\n<h3>searchForReusableBlock</h3>\n<p>Searches for a reusable block via the global inserter.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>searchTerm</em> <code>string</code>: The term to search the inserter for.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise&lt;ElementHandle|null&gt;</code>: The handle of the reusable block to be inserted or null if nothing was found.</li>\n</ul>\n<h3>selectBlockByClientId</h3>\n<p>Given the clientId of a block, selects the block on the editor.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>clientId</em> <code>string</code>: Identified of the block.</li>\n</ul>\n<h3>setBrowserViewport</h3>\n<p>Sets browser viewport to specified type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>viewport</em> <code>WPViewport</code>: Viewport name or dimensions object to assign.</li>\n</ul>\n<h3>setClipboardData</h3>\n<p>Sets the clipboard data that can be pasted with <code>pressKeyWithModifier( 'primary', 'v' )</code>.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>$1</em> <code>Object</code>: Options.</li>\n<li><em>$1.plainText</em> <code>string</code>: Plain text to set.</li>\n<li><em>$1.html</em> <code>string</code>: HTML to set.</li>\n</ul>\n<h3>setOption</h3>\n<p>Sets a site option, from the options-general admin page.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>setting</em> <code>string</code>: The option, used to get the option by id.</li>\n<li><em>value</em> <code>string</code>: The value to set the option to.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>string</code>: The previous value of the option.</li>\n</ul>\n<h3>setPostContent</h3>\n<p>Sets code editor content</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>content</em> <code>string</code>: New code editor content.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving with an array containing all blocks in the document.</li>\n</ul>\n<h3>setUpResponseMocking</h3>\n<p>Sets up mock checks and responses. Accepts a list of mock settings with the following properties:</p>\n<ul>\n<li><code>match</code>: function to check if a request should be mocked.</li>\n<li><code>onRequestMatch</code>: async function to respond to the request.</li>\n</ul>\n<p><em>Usage</em></p>\n<pre><code class=\"language-js\">const MOCK_RESPONSES = [\n    {\n        match: isEmbedding( 'https://wordpress.org/gutenberg/handbook/' ),\n        onRequestMatch: JSONResponse( MOCK_BAD_WORDPRESS_RESPONSE ),\n    },\n    {\n        match: isEmbedding(\n            'https://wordpress.org/gutenberg/handbook/block-api/attributes/'\n        ),\n        onRequestMatch: JSONResponse( MOCK_EMBED_WORDPRESS_SUCCESS_RESPONSE ),\n    },\n];\nsetUpResponseMocking( MOCK_RESPONSES );\n</code></pre>\n<p>If none of the mock settings match the request, the request is allowed to continue.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>mocks</em> <code>Array</code>: Array of mock settings.</li>\n</ul>\n<h3>showBlockToolbar</h3>\n<p>The block toolbar is not always visible while typing. Call this function to reveal it.</p>\n<h3>switchBlockInspectorTab</h3>\n<p>Clicks on the block inspector tab button with the supplied label and waits for the tab switch.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>label</em> <code>string</code>: Aria label to find tab button by.</li>\n</ul>\n<h3>switchEditorModeTo</h3>\n<p>Switches editor mode.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>mode</em> <code>string</code>: String editor mode.</li>\n</ul>\n<h3>switchUserToAdmin</h3>\n<p>Switches the current user to the admin user (if the user running the test is not already the admin user).</p>\n<h3>switchUserToTest</h3>\n<p>Switches the current user to whichever user we should be running the tests as (if we&#8217;re not already that user).</p>\n<h3>toggleGlobalBlockInserter</h3>\n<p>Toggles the global inserter.</p>\n<h3>toggleGlobalStyles</h3>\n<p>Toggles the global styles sidebar (opens it if closed and closes it if open).</p>\n<h3>toggleMoreMenu</h3>\n<p>Toggles the More Menu.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>waitFor</em> <code>['open' | 'close']</code>: Whether it should wait for the menu to open or close. If <code>undefined</code> it won&#8217;t wait for anything.</li>\n</ul>\n<h3>toggleOfflineMode</h3>\n<p>Undocumented declaration.</p>\n<h3>togglePreferencesOption</h3>\n<p>Toggles a preference option with the given tab label and the option label.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>tabLabel</em> <code>string</code>: The preferences tab label to click.</li>\n<li><em>optionLabel</em> <code>string</code>: The option label to search the button for.</li>\n<li><em>shouldBeChecked</em> <code>[boolean]</code>: If true, turns the option on. If false, off. If not provided, the option will be toggled.</li>\n</ul>\n<h3>transformBlockTo</h3>\n<p>Converts editor&#8217;s block type.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>name</em> <code>string</code>: Block name.</li>\n</ul>\n<h3>trashAllComments</h3>\n<p>Navigates to the comments listing screen and bulk-trashes any comments which exist.</p>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving once comments have been trashed.</li>\n</ul>\n<h3>trashAllPosts</h3>\n<p>Navigates to the post listing screen and bulk-trashes any posts which exist.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>postType</em> <code>string</code>: &#8211; String slug for type of post to trash.</li>\n<li><em>postStatus</em> <code>string</code>: &#8211; String status of posts to trash.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise</code>: Promise resolving once posts have been trashed.</li>\n</ul>\n<h3>uninstallPlugin</h3>\n<p>Uninstalls a plugin.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>slug</em> <code>string</code>: Plugin slug.</li>\n</ul>\n<h3>visitAdminPage</h3>\n<p>Visits admin page; if user is not logged in then it logging in it first, then visits admin page.</p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>adminPath</em> <code>string</code>: String to be serialized as pathname.</li>\n<li><em>query</em> <code>string</code>: String to be serialized as query portion of URL.</li>\n</ul>\n<h3>visitSiteEditor</h3>\n<p>Visits the Site Editor main page</p>\n<p>By default, it also skips the welcome guide. The option can be disabled if need be.</p>\n<p><em>Related</em></p>\n<ul>\n<li>disableSiteEditorWelcomeGuide</li>\n</ul>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>query</em> <code>string</code>: String to be serialized as query portion of URL.</li>\n<li><em>skipWelcomeGuide</em> <code>[boolean]</code>: Whether to skip the welcome guide as part of the navigation.</li>\n</ul>\n<h3>waitForWindowDimensions</h3>\n<p>Function that waits until the page viewport has the required dimensions. It is being used to address a problem where after using setViewport the execution may continue, without the new dimensions being applied. <a href=\"https://github.com/GoogleChrome/puppeteer/issues/1751\">https://github.com/GoogleChrome/puppeteer/issues/1751</a></p>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>width</em> <code>number</code>: Width of the window.</li>\n<li><em>height</em> <code>number</code>: Height of the window.</li>\n</ul>\n<h3>wpDataSelect</h3>\n<p>Queries the WordPress data module.</p>\n<p><code>page.evaluate</code> &#8211; used in the function &#8211; returns <code>undefined</code> when it encounters a non-serializable value. Since we store many different values in the data module, you can end up with an <code>undefined</code> result. Before using this function, make sure the data you are querying doesn&#8217;t contain non-serializable values, for example, functions, DOM element handles, etc.</p>\n<p><em>Related</em></p>\n<ul>\n<li><a href=\"https://pptr.dev/#?product=Puppeteer&amp;version=v9.0.0&amp;show=api-pageevaluatepagefunction-args\">https://pptr.dev/#?product=Puppeteer&amp;version=v9.0.0&amp;show=api-pageevaluatepagefunction-args</a></li>\n<li><a href=\"https://github.com/WordPress/gutenberg/pull/31199\">https://github.com/WordPress/gutenberg/pull/31199</a></li>\n</ul>\n<p><em>Parameters</em></p>\n<ul>\n<li><em>store</em> <code>string</code>: Store to query e.g: core/editor, core/blocks&#8230;</li>\n<li><em>selector</em> <code>string</code>: Selector to execute e.g: getBlocks.</li>\n<li><em>parameters</em> <code>...Object</code>: Parameters to pass to the selector.</li>\n</ul>\n<p><em>Returns</em></p>\n<ul>\n<li><code>Promise&lt;?Object&gt;</code>: Result of querying.</li>\n</ul>\n<p><!-- END TOKEN(Autogenerated API docs) --></p>\n<h2>Contributing to this package</h2>\n<p>This is an individual package that&#8217;s part of the Gutenberg project. The project is organized as a monorepo. It&#8217;s made up of multiple self-contained software packages, each with a specific purpose. The packages in this monorepo are published to <a href=\"https://www.npmjs.com/\">npm</a> and used by <a href=\"https://make.wordpress.org/core/\">WordPress</a> as well as other software projects.</p>\n<p>To find out more about contributing to this package or Gutenberg as a whole, please read the project&#8217;s main <a href=\"https://github.com/WordPress/gutenberg/tree/HEAD/CONTRIBUTING.md\">contributor guide</a>.</p>\n",
        "protected": false
    },
    "author": 0,
    "featured_media": 0,
    "parent": 134521,
    "menu_order": 271,
    "template": "",
    "meta": {
        "footnotes": ""
    },
    "class_list": [
        "post-134553",
        "blocks-handbook",
        "type-blocks-handbook",
        "status-publish",
        "hentry",
        "type-handbook"
    ],
    "revision_note": "",
    "jetpack_sharing_enabled": true,
    "_links": {
        "self": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134553",
                "targetHints": {
                    "allow": [
                        "GET"
                    ]
                }
            }
        ],
        "collection": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook"
            }
        ],
        "about": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/types/blocks-handbook"
            }
        ],
        "version-history": [
            {
                "count": 42,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134553/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 156176,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134553/revisions/156176"
            }
        ],
        "up": [
            {
                "embeddable": true,
                "href": "https://developer.wordpress.org/wp-json/wp/v2/blocks-handbook/134521"
            }
        ],
        "wp:attachment": [
            {
                "href": "https://developer.wordpress.org/wp-json/wp/v2/media?parent=134553"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }
        ]
    }
}